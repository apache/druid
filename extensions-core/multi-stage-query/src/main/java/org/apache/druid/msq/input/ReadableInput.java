/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.druid.msq.input;

import com.google.common.base.Preconditions;
import org.apache.druid.frame.channel.ReadableFrameChannel;
import org.apache.druid.frame.read.FrameReader;
import org.apache.druid.java.util.common.ISE;
import org.apache.druid.msq.input.table.SegmentWithDescriptor;
import org.apache.druid.msq.kernel.StagePartition;

import javax.annotation.Nullable;

/**
 * A single item of readable input. Generated by {@link InputSliceReader#attach} from an {@link InputSlice}.
 *
 * Each item is either readable as a {@link org.apache.druid.segment.Segment} or as a {@link ReadableFrameChannel},
 * but not both. Check {@link #hasSegment()} and {@link #hasChannel()} to see which one you have.
 */
public class ReadableInput
{
  @Nullable
  private final SegmentWithDescriptor segment;

  @Nullable
  private final ReadableFrameChannel inputChannel;

  @Nullable
  private final FrameReader frameReader;

  @Nullable
  private final StagePartition stagePartition;

  private ReadableInput(
      @Nullable SegmentWithDescriptor segment,
      @Nullable ReadableFrameChannel channel,
      @Nullable FrameReader frameReader,
      @Nullable StagePartition stagePartition
  )
  {
    this.segment = segment;
    this.inputChannel = channel;
    this.frameReader = frameReader;
    this.stagePartition = stagePartition;

    if ((segment == null) == (channel == null)) {
      throw new ISE("Provide either 'segment' or 'channel'");
    }
  }

  public static ReadableInput segment(final SegmentWithDescriptor segment)
  {
    return new ReadableInput(segment, null, null, null);
  }

  public static ReadableInput channel(
      final ReadableFrameChannel inputChannel,
      final FrameReader frameReader,
      final StagePartition stagePartition
  )
  {
    return new ReadableInput(null, inputChannel, frameReader, stagePartition);
  }

  public boolean hasSegment()
  {
    return segment != null;
  }

  public boolean hasChannel()
  {
    return inputChannel != null;
  }

  public SegmentWithDescriptor getSegment()
  {
    return Preconditions.checkNotNull(segment, "segment");
  }

  public ReadableFrameChannel getChannel()
  {
    return Preconditions.checkNotNull(inputChannel, "channel");
  }

  public FrameReader getChannelFrameReader()
  {
    return Preconditions.checkNotNull(frameReader, "frameReader");
  }

  @Nullable
  public StagePartition getStagePartition()
  {
    return stagePartition;
  }
}
