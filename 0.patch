From 9de5fba6fd24d69da715cbdd9248092b998d1a44 Mon Sep 17 00:00:00 2001
From: gsheffi <gsheffi@yahoo-inc.com>
Date: Thu, 13 Sep 2018 17:45:44 +0300
Subject: [PATCH 1/3] Avoiding the double copying

---
 .../druid/segment/StringDimensionIndexer.java | 24 ++----
 .../segment/data/ArrayBasedIndexedInts.java   |  7 ++
 .../incremental/IncrementalIndexRow.java      | 27 ++++++
 .../incremental/OakIncrementalIndex.java      |  8 +-
 .../incremental/OakIncrementalIndexRow.java   | 85 +++++++++++++------
 .../segment/incremental/OakKeySerializer.java |  4 +-
 .../incremental/OakValueSerializer.java       |  4 +-
 7 files changed, 106 insertions(+), 53 deletions(-)

diff --git a/processing/src/main/java/org/apache/druid/segment/StringDimensionIndexer.java b/processing/src/main/java/org/apache/druid/segment/StringDimensionIndexer.java
index 2a1e331a4..d0e1a2bf3 100644
--- a/processing/src/main/java/org/apache/druid/segment/StringDimensionIndexer.java
+++ b/processing/src/main/java/org/apache/druid/segment/StringDimensionIndexer.java
@@ -445,18 +445,11 @@ public class StringDimensionIndexer implements DimensionIndexer<Integer, int[],
       {
         IncrementalIndexRow key = currEntry.get();
 
-        int[] indices;
-        if (dimIndex < key.getDimsLength()) {
-          indices = (int[]) key.getDim(dimIndex);
-        } else {
-          indices = null;
-        }
-
-        int[] row = null;
-        int rowSize = 0;
-
         // usually due to currEntry's rowIndex is smaller than the row's rowIndex in which this dim first appears
-        if (indices == null || indices.length == 0) {
+        if (key.getDimsLength() == 0 || key.calcStringDimSize(dimIndex) == 0) {
+          int[] row;
+          int rowSize;
+
           if (hasMultipleValues) {
             row = IntArrays.EMPTY_ARRAY;
             rowSize = 0;
@@ -475,14 +468,11 @@ public class StringDimensionIndexer implements DimensionIndexer<Integer, int[],
               rowSize = 0;
             }
           }
+          indexedInts.setValues(row, rowSize);
+        } else {
+          indexedInts.setValues(key, dimIndex);
         }
 
-        if (row == null && indices != null && indices.length > 0) {
-          row = indices;
-          rowSize = indices.length;
-        }
-
-        indexedInts.setValues(row, rowSize);
         return indexedInts;
       }
 
diff --git a/processing/src/main/java/org/apache/druid/segment/data/ArrayBasedIndexedInts.java b/processing/src/main/java/org/apache/druid/segment/data/ArrayBasedIndexedInts.java
index 450b3e2bb..939d5d3d3 100644
--- a/processing/src/main/java/org/apache/druid/segment/data/ArrayBasedIndexedInts.java
+++ b/processing/src/main/java/org/apache/druid/segment/data/ArrayBasedIndexedInts.java
@@ -22,6 +22,7 @@ package org.apache.druid.segment.data;
 import org.apache.druid.java.util.common.IAE;
 import org.apache.druid.query.monomorphicprocessing.RuntimeShapeInspector;
 import it.unimi.dsi.fastutil.ints.IntArrays;
+import org.apache.druid.segment.incremental.IncrementalIndexRow;
 
 /**
  */
@@ -73,6 +74,12 @@ public final class ArrayBasedIndexedInts implements IndexedInts
     this.size = size;
   }
 
+  public void setValues(IncrementalIndexRow row, int dimIndex)
+  {
+    ensureSize(row.calcStringDimSize(dimIndex));
+    this.size = row.copyStringDim(dimIndex, expansion);
+  }
+
   public void setValue(int index, int value)
   {
     expansion[index] = value;
diff --git a/processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndexRow.java b/processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndexRow.java
index 7510723af..303aa7c13 100644
--- a/processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndexRow.java
+++ b/processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndexRow.java
@@ -132,6 +132,33 @@ public class IncrementalIndexRow
     this.rowIndex = rowIndex;
   }
 
+  public int copyStringDim(int dimIndex, int[] dst)
+  {
+    if (dims == null || dimIndex >= dims.length) {
+      return 0;
+    }
+    int[] stringDim = (int[]) dims[dimIndex];
+    if (stringDim != null) {
+      if (dst.length < stringDim.length) {
+        dst = new int[stringDim.length];
+      }
+      System.arraycopy((int[]) dims[dimIndex], 0, dst, 0, stringDim.length);
+      return stringDim.length;
+    } else {
+      return 0;
+    }
+  }
+
+  public int calcStringDimSize(int dimIndex)
+  {
+    if (dims == null || dimIndex >= dims.length || dims[dimIndex] == null) {
+      return 0;
+    }
+
+    return ((int[]) dims[dimIndex]).length;
+
+  }
+
   /**
    * bytesInMemory estimates the size of IncrementalIndexRow key, it takes into account the timestamp(long),
    * dims(Object Array) and dimensionDescsList(List). Each of these are calculated as follows:
diff --git a/processing/src/main/java/org/apache/druid/segment/incremental/OakIncrementalIndex.java b/processing/src/main/java/org/apache/druid/segment/incremental/OakIncrementalIndex.java
index 976d124eb..5e4a7a442 100644
--- a/processing/src/main/java/org/apache/druid/segment/incremental/OakIncrementalIndex.java
+++ b/processing/src/main/java/org/apache/druid/segment/incremental/OakIncrementalIndex.java
@@ -36,7 +36,7 @@ import com.oath.oak.OakMapBuilder;
 import com.oath.oak.OakTransformView;
 import com.oath.oak.OakBufferView;
 import com.oath.oak.OakRBuffer;
-import com.oath.oak.CloseableIterator;
+import com.oath.oak.OakCloseableIterator;
 
 import java.nio.ByteBuffer;
 import java.util.Iterator;
@@ -175,7 +175,7 @@ public class OakIncrementalIndex extends InternalDataIncrementalIndex<BufferAggr
 
     OakMap tmpOakMap = descending ? oak.descendingMap() : oak;
     OakTransformView transformView = tmpOakMap.createTransformView(transformer);
-    CloseableIterator<Row> valuesIterator = transformView.valuesIterator();
+    OakCloseableIterator<Row> valuesIterator = transformView.valuesIterator();
     return new Iterable<Row>()
     {
       @Override
@@ -334,7 +334,7 @@ public class OakIncrementalIndex extends InternalDataIncrementalIndex<BufferAggr
     }
 
     OakBufferView bufferView = subMap.createBufferView();
-    CloseableIterator<OakRBuffer> keysIterator = bufferView.keysIterator();
+    OakCloseableIterator<OakRBuffer> keysIterator = bufferView.keysIterator();
     return new Iterable<IncrementalIndexRow>() {
       @Override
       public Iterator<IncrementalIndexRow> iterator()
@@ -350,7 +350,7 @@ public class OakIncrementalIndex extends InternalDataIncrementalIndex<BufferAggr
   @Override
   public Iterable<IncrementalIndexRow> keySet()
   {
-    CloseableIterator<IncrementalIndexRow> keysIterator = oak.keysIterator();
+    OakCloseableIterator<IncrementalIndexRow> keysIterator = oak.keysIterator();
 
     return new Iterable<IncrementalIndexRow>() {
       @Override
diff --git a/processing/src/main/java/org/apache/druid/segment/incremental/OakIncrementalIndexRow.java b/processing/src/main/java/org/apache/druid/segment/incremental/OakIncrementalIndexRow.java
index d2fc20c0c..8811bf4e1 100644
--- a/processing/src/main/java/org/apache/druid/segment/incremental/OakIncrementalIndexRow.java
+++ b/processing/src/main/java/org/apache/druid/segment/incremental/OakIncrementalIndexRow.java
@@ -27,13 +27,16 @@ import java.util.List;
 
 public class OakIncrementalIndexRow extends IncrementalIndexRow
 {
+  static final int NO_LENGTH = -1;
 
   OakRBuffer oakRBuffer;
+  int dimsLength;
 
   public OakIncrementalIndexRow(OakRBuffer oakRBuffer, List<DimensionDesc> dimensionDescsList)
   {
     this.oakRBuffer = oakRBuffer;
     this.dimensionDescsList = dimensionDescsList;
+    this.dimsLength = NO_LENGTH; // lazy initialization
   }
 
   @Override
@@ -45,41 +48,37 @@ public class OakIncrementalIndexRow extends IncrementalIndexRow
   @Override
   public int getDimsLength()
   {
-    return oakRBuffer.getInt(oakRBuffer.position() + OakIncrementalIndex.DIMS_LENGTH_INDEX);
+    if (dimsLength == NO_LENGTH) {
+      dimsLength = oakRBuffer.getInt(oakRBuffer.position() + OakIncrementalIndex.DIMS_LENGTH_INDEX);
+    }
+    return dimsLength;
   }
 
   @Override
   public Object getDim(int dimIndex)
   {
-    return getDim(getDimsLength(), dimIndex);
-  }
-
-  public Object getDim(int dimsLength, int dimIndex)
-  {
-    if (dimIndex >= dimsLength) {
+    if (dimIndex >= getDimsLength()) {
       return null;
     }
-    return getDimValue(dimsLength, dimIndex);
+    return getDimValue(dimIndex);
   }
 
   @Override
   public boolean isNull(int dimIndex)
   {
-    int dimsLength = getDimsLength();
-    return dimIndex >= dimsLength ||
-            getDimType(dimsLength, dimIndex) == OakIncrementalIndex.NO_DIM;
+    return dimIndex >= getDimsLength() ||
+            getDimType(dimIndex) == OakIncrementalIndex.NO_DIM;
   }
 
   @Override
   public Object[] getDims()
   {
-    int dimsLength = getDimsLength();
-    if (dimsLength == 0) {
+    if (getDimsLength() == 0) {
       return null;
     }
-    Object[] dims = new Object[dimsLength];
-    for (int dimIndex = 0; dimIndex < dimsLength; dimIndex++) {
-      Object dim = getDimValue(dimsLength, dimIndex);
+    Object[] dims = new Object[getDimsLength()];
+    for (int dimIndex = 0; dimIndex < getDimsLength(); dimIndex++) {
+      Object dim = getDimValue(dimIndex);
       dims[dimIndex] = dim;
     }
     return dims;
@@ -97,6 +96,37 @@ public class OakIncrementalIndexRow extends IncrementalIndexRow
     throw new UnsupportedOperationException();
   }
 
+  @Override
+  public int copyStringDim(int dimIndex, int[] dst)
+  {
+    if (getDimsLength() == 0 || getDimsLength() <= dimIndex) {
+      return 0;
+    }
+    int dimIndexInBuffer = getDimIndexInBuffer(dimIndex);
+    int arrayIndexOffset = oakRBuffer.getInt(dimIndexInBuffer + OakIncrementalIndex.ARRAY_INDEX_OFFSET);
+    int arrayIndex = oakRBuffer.position() + arrayIndexOffset;
+    int arraySize = oakRBuffer.getInt(dimIndexInBuffer + OakIncrementalIndex.ARRAY_LENGTH_OFFSET);
+    if (dst.length < arraySize) {
+      dst = new int[arraySize];
+    }
+    for (int i = 0; i < arraySize; i++) {
+      dst[i] = oakRBuffer.getInt(arrayIndex);
+      arrayIndex += Integer.BYTES;
+    }
+    return arraySize;
+  }
+
+  @Override
+  public int calcStringDimSize(int dimIndex)
+  {
+    if (getDimsLength() == 0 || getDimsLength() <= dimIndex) {
+      return 0;
+    }
+    int dimIndexInBuffer = getDimIndexInBuffer(dimIndex);
+    int arraySize = oakRBuffer.getInt(dimIndexInBuffer + OakIncrementalIndex.ARRAY_LENGTH_OFFSET);
+    return arraySize;
+  }
+
   /**
    * bytesInMemory estimates the size of the serialized IncrementalIndexRow key.
    * Each serialized IncrementalRoeIndex contains:
@@ -113,12 +143,11 @@ public class OakIncrementalIndexRow extends IncrementalIndexRow
   {
 
     long sizeInBytes = Long.BYTES + 2 * Integer.BYTES;
-    int dimsLength = getDimsLength();
-    for (int dimIndex = 0; dimIndex < dimsLength; dimIndex++) {
+    for (int dimIndex = 0; dimIndex < getDimsLength(); dimIndex++) {
       sizeInBytes += OakIncrementalIndex.ALLOC_PER_DIM;
-      int dimType = getDimType(dimsLength, dimIndex);
+      int dimType = getDimType(dimIndex);
       if (dimType == ValueType.STRING.ordinal()) {
-        int dimIndexInBuffer = getDimIndexInBuffer(dimsLength, dimIndex);
+        int dimIndexInBuffer = getDimIndexInBuffer(dimIndex);
         int arraySize = oakRBuffer.getInt(dimIndexInBuffer + OakIncrementalIndex.ARRAY_LENGTH_OFFSET);
         sizeInBytes += (arraySize * Integer.BYTES);
       }
@@ -131,21 +160,21 @@ public class OakIncrementalIndexRow extends IncrementalIndexRow
 
   /* ---------------- OakRBuffer utils -------------- */
 
-  private int getDimIndexInBuffer(int dimsLength, int dimIndex)
+  private int getDimIndexInBuffer(int dimIndex)
   {
-    if (dimIndex >= dimsLength) {
+    if (dimIndex >= getDimsLength()) {
       return OakIncrementalIndex.NO_DIM;
     }
     return oakRBuffer.position() + OakIncrementalIndex.DIMS_INDEX + dimIndex * OakIncrementalIndex.ALLOC_PER_DIM;
   }
 
-  private Object getDimValue(int dimsLength, int dimIndex)
+  private Object getDimValue(int dimIndex)
   {
     Object dimObject = null;
-    if (dimIndex >= dimsLength) {
+    if (dimIndex >= getDimsLength()) {
       return null;
     }
-    int dimIndexInBuffer = getDimIndexInBuffer(dimsLength, dimIndex);
+    int dimIndexInBuffer = getDimIndexInBuffer(dimIndex);
     int dimType = oakRBuffer.getInt(dimIndexInBuffer);
     if (dimType == OakIncrementalIndex.NO_DIM) {
       return null;
@@ -170,12 +199,12 @@ public class OakIncrementalIndexRow extends IncrementalIndexRow
     return dimObject;
   }
 
-  private int getDimType(int dimsLength, int dimIndex)
+  private int getDimType(int dimIndex)
   {
-    if (dimIndex >= dimsLength) {
+    if (dimIndex >= getDimsLength()) {
       return OakIncrementalIndex.NO_DIM;
     }
-    int dimIndexInBuffer = getDimIndexInBuffer(dimsLength, dimIndex);
+    int dimIndexInBuffer = getDimIndexInBuffer(dimIndex);
     return oakRBuffer.getInt(dimIndexInBuffer);
   }
 }
diff --git a/processing/src/main/java/org/apache/druid/segment/incremental/OakKeySerializer.java b/processing/src/main/java/org/apache/druid/segment/incremental/OakKeySerializer.java
index 9e367d11a..561d3c517 100644
--- a/processing/src/main/java/org/apache/druid/segment/incremental/OakKeySerializer.java
+++ b/processing/src/main/java/org/apache/druid/segment/incremental/OakKeySerializer.java
@@ -24,9 +24,9 @@ import java.nio.ByteBuffer;
 
 import org.apache.druid.segment.column.ValueType;
 import org.apache.druid.segment.incremental.IncrementalIndex.DimensionDesc;
-import com.oath.oak.Serializer;
+import com.oath.oak.OakSerializer;
 
-public class OakKeySerializer implements Serializer<IncrementalIndexRow>
+public class OakKeySerializer implements OakSerializer<IncrementalIndexRow>
 {
   private List<DimensionDesc> dimensionDescsList;
 
diff --git a/processing/src/main/java/org/apache/druid/segment/incremental/OakValueSerializer.java b/processing/src/main/java/org/apache/druid/segment/incremental/OakValueSerializer.java
index 11cf18c4f..2c77144aa 100644
--- a/processing/src/main/java/org/apache/druid/segment/incremental/OakValueSerializer.java
+++ b/processing/src/main/java/org/apache/druid/segment/incremental/OakValueSerializer.java
@@ -25,9 +25,9 @@ import org.apache.druid.data.input.Row;
 import java.nio.ByteBuffer;
 import java.util.List;
 import org.apache.druid.segment.incremental.IncrementalIndex.DimensionDesc;
-import com.oath.oak.Serializer;
+import com.oath.oak.OakSerializer;
 
-public class OakValueSerializer implements Serializer<Row>
+public class OakValueSerializer implements OakSerializer<Row>
 {
 
   private List<DimensionDesc> dimensionDescsList;
-- 
2.17.1 (Apple Git-112)


From efcd2d1478497bca5dfff06bcb6ffac7c7b5ab0d Mon Sep 17 00:00:00 2001
From: gsheffi <gsheffi@yahoo-inc.com>
Date: Sat, 15 Sep 2018 21:15:23 +0300
Subject: [PATCH 2/3] Reading more rows

---
 .../benchmark/indexing/OakIncrementalIndexReadBenchmark.java    | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/benchmarks/src/main/java/org/apache/druid/benchmark/indexing/OakIncrementalIndexReadBenchmark.java b/benchmarks/src/main/java/org/apache/druid/benchmark/indexing/OakIncrementalIndexReadBenchmark.java
index b50ade491..dfedd4151 100644
--- a/benchmarks/src/main/java/org/apache/druid/benchmark/indexing/OakIncrementalIndexReadBenchmark.java
+++ b/benchmarks/src/main/java/org/apache/druid/benchmark/indexing/OakIncrementalIndexReadBenchmark.java
@@ -115,7 +115,7 @@ public class OakIncrementalIndexReadBenchmark
     for (int j = 0; j < rowsPerSegment; j++) {
       InputRow row = gen.nextRow();
       if (j % 10000 == 0) {
-        log.info(j + " rows generated.");
+        log.info(j + " rows generated. ");
       }
       incIndex.add(row);
     }
-- 
2.17.1 (Apple Git-112)


From bb69c346238fa0f9b340995e0965221503a4858a Mon Sep 17 00:00:00 2001
From: gsheffi <gsheffi@yahoo-inc.com>
Date: Thu, 20 Sep 2018 11:03:28 +0300
Subject: [PATCH 3/3] Before rebasing

---
 .../benchmark/indexing/OakIncrementalIndexReadBenchmark.java    | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/benchmarks/src/main/java/org/apache/druid/benchmark/indexing/OakIncrementalIndexReadBenchmark.java b/benchmarks/src/main/java/org/apache/druid/benchmark/indexing/OakIncrementalIndexReadBenchmark.java
index dfedd4151..02bdacfe7 100644
--- a/benchmarks/src/main/java/org/apache/druid/benchmark/indexing/OakIncrementalIndexReadBenchmark.java
+++ b/benchmarks/src/main/java/org/apache/druid/benchmark/indexing/OakIncrementalIndexReadBenchmark.java
@@ -74,7 +74,7 @@ import java.util.concurrent.TimeUnit;
 @Measurement(iterations = 25)
 public class OakIncrementalIndexReadBenchmark
 {
-  @Param({"75000"})
+  @Param({"150000"})
   private int rowsPerSegment;
 
   @Param({"basic"})
-- 
2.17.1 (Apple Git-112)

