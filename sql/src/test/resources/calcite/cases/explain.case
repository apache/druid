Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
==============================================================
Converted from testExplainExactCountDistinctOfSemiJoinResult()

No vectorize for EXPLAIN tests so that the explain context
is constant. (The context contains the vectorize option.)
=== case
Explain exact count distinct of semi join result
=== SQL
EXPLAIN PLAN FOR SELECT COUNT(*)
FROM (
  SELECT DISTINCT dim2
  FROM druid.foo
  WHERE SUBSTRING(dim2, 1, 1) IN (
    SELECT SUBSTRING(dim1, 1, 1) FROM druid.foo WHERE dim1 IS NOT NULL
  )
)
=== options
sqlCompatibleNulls=both
vectorize=false
=== schema
PLAN VARCHAR
RESOURCES VARCHAR
=== plan
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[0])
    LogicalAggregate(group=[{0}])
      LogicalProject(dim2=[$3])
        LogicalFilter(condition=[IN(SUBSTRING($3, 1, 1), {
LogicalProject(EXPR$0=[SUBSTRING($2, 1, 1)])
  LogicalFilter(condition=[IS NOT NULL($2)])
    LogicalTableScan(table=[[druid, foo]])
})])
          LogicalTableScan(table=[[druid, foo]])
=== explain
!\QDruidOuterQueryRel(query=[{"queryType":"groupBy","dataSource":{"type":"query","query":{"queryType":"scan","dataSource":{"type":"table","name":"__subquery__"},"intervals":{"type":"intervals","intervals":["-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z"]},"resultFormat":"list","granularity":{"type":"all"}}},"intervals":{"type":"intervals","intervals":["-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z"]},"granularity":{"type":"all"},"dimensions":[],"aggregations":[{"type":"count","name":"a0"}],"limitSpec":{"type":"NoopLimitSpec"},"context":{"sqlQueryId":"\E.*\Q"}}], signature=[{a0:LONG}])\E
!  \QDruidJoinQueryRel(condition=[=(SUBSTRING($3, 1, 1), $8)], joinType=[inner], query=[{"queryType":"groupBy","dataSource":{"type":"table","name":"__join__"},"intervals":{"type":"intervals","intervals":["-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z"]},"granularity":{"type":"all"},"dimensions":[{"type":"default","dimension":"dim2","outputName":"d0","outputType":"STRING"}],"limitSpec":{"type":"NoopLimitSpec"},"context":{"sqlQueryId":"\E.*\Q"}}], signature=[{d0:STRING}])\E
!    \QDruidQueryRel(query=[{"queryType":"scan","dataSource":{"type":"table","name":"foo"},"intervals":{"type":"intervals","intervals":["-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z"]},"resultFormat":"compactedList","columns":["__time","cnt","dim1","dim2","dim3","m1","m2","unique_dim1"],"legacy":false,"context":{"sqlQueryId":"\E.*\Q"},"granularity":{"type":"all"}}], signature=[{__time:LONG, cnt:LONG, dim1:STRING, dim2:STRING, dim3:STRING, m1:FLOAT, m2:DOUBLE, unique_dim1:COMPLEX<hyperUnique>}])\E
!    \QDruidQueryRel(query=[{"queryType":"groupBy","dataSource":{"type":"table","name":"foo"},"intervals":{"type":"intervals","intervals":["-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z"]},"filter":{"type":"not","field":{"type":"selector","dimension":"dim1","value":null}},"granularity":{"type":"all"},"dimensions":[{"type":"extraction","dimension":"dim1","outputName":"d0","outputType":"STRING","extractionFn":{"type":"substring","index":0,"length":1}}],"limitSpec":{"type":"NoopLimitSpec"},"context":{"sqlQueryId":"\E.*\Q"}}], signature=[{d0:STRING}])\E
---
[ {
  "name" : "foo",
  "type" : "DATASOURCE"
} ]
=== results
["DruidOuterQueryRel(query=[{\"queryType\":\"groupBy\",\"dataSource\":{\"type\":\"query\",\"query\":{\"queryType\":\"scan\",\"dataSource\":{\"type\":\"table\",\"name\":\"__subquery__\"},\"intervals\":{\"type\":\"intervals\",\"intervals\":[\"-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z\"]},\"resultFormat\":\"list\",\"granularity\":{\"type\":\"all\"}}},\"intervals\":{\"type\":\"intervals\",\"intervals\":[\"-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z\"]},\"granularity\":{\"type\":\"all\"},\"dimensions\":[],\"aggregations\":[{\"type\":\"count\",\"name\":\"a0\"}],\"limitSpec\":{\"type\":\"NoopLimitSpec\"},\"context\":{\"defaultTimeout\":300000,\"maxScatterGatherBytes\":9223372036854775807,\"sqlCurrentTimestamp\":\"2000-01-01T00:00:00Z\",\"sqlQueryId\":\"dummy\",\"vectorize\":\"FALSE\",\"vectorizeVirtualColumns\":\"FALSE\"}}], signature=[{a0:LONG}])\n  DruidJoinQueryRel(condition=[=(SUBSTRING($3, 1, 1), $8)], joinType=[inner], query=[{\"queryType\":\"groupBy\",\"dataSource\":{\"type\":\"table\",\"name\":\"__join__\"},\"intervals\":{\"type\":\"intervals\",\"intervals\":[\"-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z\"]},\"granularity\":{\"type\":\"all\"},\"dimensions\":[{\"type\":\"default\",\"dimension\":\"dim2\",\"outputName\":\"d0\",\"outputType\":\"STRING\"}],\"limitSpec\":{\"type\":\"NoopLimitSpec\"},\"context\":{\"defaultTimeout\":300000,\"maxScatterGatherBytes\":9223372036854775807,\"sqlCurrentTimestamp\":\"2000-01-01T00:00:00Z\",\"sqlQueryId\":\"dummy\",\"vectorize\":\"FALSE\",\"vectorizeVirtualColumns\":\"FALSE\"}}], signature=[{d0:STRING}])\n    DruidQueryRel(query=[{\"queryType\":\"scan\",\"dataSource\":{\"type\":\"table\",\"name\":\"foo\"},\"intervals\":{\"type\":\"intervals\",\"intervals\":[\"-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z\"]},\"resultFormat\":\"compactedList\",\"columns\":[\"__time\",\"cnt\",\"dim1\",\"dim2\",\"dim3\",\"m1\",\"m2\",\"unique_dim1\"],\"legacy\":false,\"context\":{\"defaultTimeout\":300000,\"maxScatterGatherBytes\":9223372036854775807,\"sqlCurrentTimestamp\":\"2000-01-01T00:00:00Z\",\"sqlQueryId\":\"dummy\",\"vectorize\":\"FALSE\",\"vectorizeVirtualColumns\":\"FALSE\"},\"granularity\":{\"type\":\"all\"}}], signature=[{__time:LONG, cnt:LONG, dim1:STRING, dim2:STRING, dim3:STRING, m1:FLOAT, m2:DOUBLE, unique_dim1:COMPLEX<hyperUnique>}])\n    DruidQueryRel(query=[{\"queryType\":\"groupBy\",\"dataSource\":{\"type\":\"table\",\"name\":\"foo\"},\"intervals\":{\"type\":\"intervals\",\"intervals\":[\"-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z\"]},\"filter\":{\"type\":\"not\",\"field\":{\"type\":\"selector\",\"dimension\":\"dim1\",\"value\":null}},\"granularity\":{\"type\":\"all\"},\"dimensions\":[{\"type\":\"extraction\",\"dimension\":\"dim1\",\"outputName\":\"d0\",\"outputType\":\"STRING\",\"extractionFn\":{\"type\":\"substring\",\"index\":0,\"length\":1}}],\"limitSpec\":{\"type\":\"NoopLimitSpec\"},\"context\":{\"defaultTimeout\":300000,\"maxScatterGatherBytes\":9223372036854775807,\"sqlCurrentTimestamp\":\"2000-01-01T00:00:00Z\",\"sqlQueryId\":\"dummy\",\"vectorize\":\"FALSE\",\"vectorizeVirtualColumns\":\"FALSE\"}}], signature=[{d0:STRING}])\n","[{\"name\":\"foo\",\"type\":\"DATASOURCE\"}]"]
==============================================================
Converted from testExplainSelectStarWithOverrides()

This testcase has been added here and not in
CalciteSelectQueryTests since this checks if the overrides are
working properly when displaying the output of
"EXPLAIN PLAN FOR ..." queries

No vectorize for EXPLAIN tests so that the explain context
is constant. (The context contains the vectorize option.)
=== case
Explain select star with overrides
=== SQL
EXPLAIN PLAN FOR SELECT * FROM druid.foo
=== options
sqlCompatibleNulls=both
vectorize=false
=== schema
PLAN VARCHAR
RESOURCES VARCHAR
=== explain
DruidQueryRel(query=[(
{
  "queryType" : "scan",
  "dataSource" : {
    "type" : "table",
    "name" : "foo"
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "resultFormat" : "compactedList",
  "columns" : [ "__time", "cnt", "dim1", "dim2", "dim3", "m1", "m2", "unique_dim1" ],
  "legacy" : false,
  "context" : {
!    "sqlQueryId" : ".*"
  },
  "granularity" : {
    "type" : "all"
  }
},
signature=[(
  {__time:LONG, cnt:LONG, dim1:STRING, dim2:STRING, dim3:STRING, m1:FLOAT, m2:DOUBLE, unique_dim1:COMPLEX<hyperUnique>}
])
---
[ {
  "name" : "foo",
  "type" : "DATASOURCE"
} ]
=== results
["DruidQueryRel(query=[{\"queryType\":\"scan\",\"dataSource\":{\"type\":\"table\",\"name\":\"foo\"},\"intervals\":{\"type\":\"intervals\",\"intervals\":[\"-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z\"]},\"resultFormat\":\"compactedList\",\"columns\":[\"__time\",\"cnt\",\"dim1\",\"dim2\",\"dim3\",\"m1\",\"m2\",\"unique_dim1\"],\"legacy\":false,\"context\":{\"defaultTimeout\":300000,\"maxScatterGatherBytes\":9223372036854775807,\"sqlCurrentTimestamp\":\"2000-01-01T00:00:00Z\",\"sqlQueryId\":\"dummy\",\"vectorize\":\"FALSE\",\"vectorizeVirtualColumns\":\"FALSE\"},\"granularity\":{\"type\":\"all\"}}], signature=[{__time:LONG, cnt:LONG, dim1:STRING, dim2:STRING, dim3:STRING, m1:FLOAT, m2:DOUBLE, unique_dim1:COMPLEX<hyperUnique>}])\n","[{\"name\":\"foo\",\"type\":\"DATASOURCE\"}]"]
==============================================================
Converted from testExplainMultipleTopLevelUnionAllQueries()

No vectorize for EXPLAIN tests so that the explain context
is constant. (The context contains the vectorize option.)
=== case
Explain multiple top level union all queries
=== SQL
EXPLAIN PLAN FOR
SELECT dim1 FROM druid.foo
UNION ALL (SELECT dim1 FROM druid.foo WHERE dim1 = '42'
UNION ALL SELECT dim1 FROM druid.foo WHERE dim1 = '44')
=== options
sqlCompatibleNulls=both
vectorize=false
=== schema
PLAN VARCHAR
RESOURCES VARCHAR
=== plan
LogicalUnion(all=[true])
  LogicalProject(dim1=[$2])
    LogicalTableScan(table=[[druid, foo]])
  LogicalUnion(all=[true])
    LogicalProject(dim1=[$2])
      LogicalFilter(condition=[=($2, '42')])
        LogicalTableScan(table=[[druid, foo]])
    LogicalProject(dim1=[$2])
      LogicalFilter(condition=[=($2, '44')])
        LogicalTableScan(table=[[druid, foo]])
=== explain
DruidUnionRel(limit=[-1])
!  \QDruidQueryRel(query=[{"queryType":"scan","dataSource":{"type":"table","name":"foo"},"intervals":{"type":"intervals","intervals":["-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z"]},"resultFormat":"compactedList","columns":["dim1"],"legacy":false,"context":{"sqlQueryId":"\E.*\Q"},"granularity":{"type":"all"}}], signature=[{dim1:STRING}])\E
  DruidUnionRel(limit=[-1])
!    \QDruidQueryRel(query=[{"queryType":"scan","dataSource":{"type":"table","name":"foo"},"intervals":{"type":"intervals","intervals":["-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z"]},"resultFormat":"compactedList","filter":{"type":"selector","dimension":"dim1","value":"42"},"columns":["dim1"],"legacy":false,"context":{"sqlQueryId":"\E.*\Q"},"granularity":{"type":"all"}}], signature=[{dim1:STRING}])\E
!    \QDruidQueryRel(query=[{"queryType":"scan","dataSource":{"type":"table","name":"foo"},"intervals":{"type":"intervals","intervals":["-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z"]},"resultFormat":"compactedList","filter":{"type":"selector","dimension":"dim1","value":"44"},"columns":["dim1"],"legacy":false,"context":{"sqlQueryId":"\E.*\Q"},"granularity":{"type":"all"}}], signature=[{dim1:STRING}])\E
---
[ {
  "name" : "foo",
  "type" : "DATASOURCE"
} ]
=== results
["DruidUnionRel(limit=[-1])\n  DruidQueryRel(query=[{\"queryType\":\"scan\",\"dataSource\":{\"type\":\"table\",\"name\":\"foo\"},\"intervals\":{\"type\":\"intervals\",\"intervals\":[\"-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z\"]},\"resultFormat\":\"compactedList\",\"columns\":[\"dim1\"],\"legacy\":false,\"context\":{\"defaultTimeout\":300000,\"maxScatterGatherBytes\":9223372036854775807,\"sqlCurrentTimestamp\":\"2000-01-01T00:00:00Z\",\"sqlQueryId\":\"dummy\",\"vectorize\":\"FALSE\",\"vectorizeVirtualColumns\":\"FALSE\"},\"granularity\":{\"type\":\"all\"}}], signature=[{dim1:STRING}])\n  DruidUnionRel(limit=[-1])\n    DruidQueryRel(query=[{\"queryType\":\"scan\",\"dataSource\":{\"type\":\"table\",\"name\":\"foo\"},\"intervals\":{\"type\":\"intervals\",\"intervals\":[\"-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z\"]},\"resultFormat\":\"compactedList\",\"filter\":{\"type\":\"selector\",\"dimension\":\"dim1\",\"value\":\"42\"},\"columns\":[\"dim1\"],\"legacy\":false,\"context\":{\"defaultTimeout\":300000,\"maxScatterGatherBytes\":9223372036854775807,\"sqlCurrentTimestamp\":\"2000-01-01T00:00:00Z\",\"sqlQueryId\":\"dummy\",\"vectorize\":\"FALSE\",\"vectorizeVirtualColumns\":\"FALSE\"},\"granularity\":{\"type\":\"all\"}}], signature=[{dim1:STRING}])\n    DruidQueryRel(query=[{\"queryType\":\"scan\",\"dataSource\":{\"type\":\"table\",\"name\":\"foo\"},\"intervals\":{\"type\":\"intervals\",\"intervals\":[\"-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z\"]},\"resultFormat\":\"compactedList\",\"filter\":{\"type\":\"selector\",\"dimension\":\"dim1\",\"value\":\"44\"},\"columns\":[\"dim1\"],\"legacy\":false,\"context\":{\"defaultTimeout\":300000,\"maxScatterGatherBytes\":9223372036854775807,\"sqlCurrentTimestamp\":\"2000-01-01T00:00:00Z\",\"sqlQueryId\":\"dummy\",\"vectorize\":\"FALSE\",\"vectorizeVirtualColumns\":\"FALSE\"},\"granularity\":{\"type\":\"all\"}}], signature=[{dim1:STRING}])\n","[{\"name\":\"foo\",\"type\":\"DATASOURCE\"}]"]
