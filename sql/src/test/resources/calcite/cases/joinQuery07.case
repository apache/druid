Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
==============================================================
Test cases from the CalciteJoinQueryTest file

==============================================================
Converted from testCountOnSemiJoinSingleColumn()
=== case
Count on semi join single column
=== SQL
SELECT dim1
FROM foo
WHERE dim1 IN (SELECT dim1 FROM foo WHERE dim1 = '10.1')
=== options
provider=QueryContextForJoinProvider
sqlCompatibleNulls=both
vectorize=true
=== schema
dim1 VARCHAR
=== plan
LogicalProject(dim1=[$2])
  LogicalFilter(condition=[IN($2, {
LogicalProject(dim1=[$2])
  LogicalFilter(condition=[=($2, '10.1')])
    LogicalTableScan(table=[[druid, foo]])
})])
    LogicalTableScan(table=[[druid, foo]])
=== native
{
  "queryType" : "scan",
  "dataSource" : {
    "type" : "join",
    "left" : {
      "type" : "table",
      "name" : "foo"
    },
    "right" : {
      "type" : "query",
      "query" : {
        "queryType" : "groupBy",
        "dataSource" : {
          "type" : "table",
          "name" : "foo"
        },
        "intervals" : {
          "type" : "intervals",
          "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
        },
        "filter" : {
          "type" : "selector",
          "dimension" : "dim1",
          "value" : "10.1"
        },
        "granularity" : {
          "type" : "all"
        },
        "dimensions" : [ {
          "type" : "default",
          "dimension" : "dim1",
          "outputName" : "d0",
          "outputType" : "STRING"
        } ],
        "limitSpec" : {
          "type" : "NoopLimitSpec"
        }
      }
    },
    "rightPrefix" : "j0.",
    "condition" : "(\"dim1\" == \"j0.d0\")",
    "joinType" : "INNER"
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "virtualColumns" : [ {
    "type" : "expression",
    "name" : "v0",
    "expression" : "'10.1'",
    "outputType" : "STRING"
  } ],
  "resultFormat" : "compactedList",
  "columns" : [ "v0" ],
  "granularity" : {
    "type" : "all"
  }
}
=== results
["10.1"]
==============================================================
Converted from testTopNOnStringWithNonSortedOrUniqueDictionary()
=== case
Top n on string with non sorted or unique dictionary
=== SQL
SELECT druid.broadcast.dim4, COUNT(*)
FROM druid.numfoo
INNER JOIN druid.broadcast ON numfoo.dim4 = broadcast.dim4
GROUP BY 1 ORDER BY 2 LIMIT 4
=== options
provider=QueryContextForJoinProvider
sqlCompatibleNulls=both
vectorize=true
=== schema
dim4 VARCHAR
EXPR$1 BIGINT
=== plan
LogicalSort(sort0=[$1], dir0=[ASC], fetch=[4])
  LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
    LogicalProject(dim4=[$24])
      LogicalJoin(condition=[=($7, $24)], joinType=[inner])
        LogicalTableScan(table=[[druid, numfoo]])
        LogicalTableScan(table=[[druid, broadcast]])
=== native
{
  "queryType" : "topN",
  "dataSource" : {
    "type" : "join",
    "left" : {
      "type" : "table",
      "name" : "numfoo"
    },
    "right" : {
      "type" : "globalTable",
      "name" : "broadcast"
    },
    "rightPrefix" : "j0.",
    "condition" : "(\"dim4\" == \"j0.dim4\")",
    "joinType" : "INNER"
  },
  "dimension" : {
    "type" : "default",
    "dimension" : "j0.dim4",
    "outputName" : "_d0",
    "outputType" : "STRING"
  },
  "metric" : {
    "type" : "inverted",
    "metric" : {
      "type" : "numeric",
      "metric" : "a0"
    }
  },
  "threshold" : 4,
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "granularity" : {
    "type" : "all"
  },
  "aggregations" : [ {
    "type" : "count",
    "name" : "a0"
  } ]
}
=== results
["a",9]
["b",9]
==============================================================
Converted from testTopNOnStringWithNonSortedOrUniqueDictionaryOrderByDim()
=== case
Top n on string with non sorted or unique dictionary order by dim
=== SQL
SELECT druid.broadcast.dim4, COUNT(*)
FROM druid.numfoo
INNER JOIN druid.broadcast ON numfoo.dim4 = broadcast.dim4
GROUP BY 1
ORDER BY 1 DESC
LIMIT 4
=== options
provider=QueryContextForJoinProvider
sqlCompatibleNulls=both
vectorize=true
=== schema
dim4 VARCHAR
EXPR$1 BIGINT
=== plan
LogicalSort(sort0=[$0], dir0=[DESC], fetch=[4])
  LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
    LogicalProject(dim4=[$24])
      LogicalJoin(condition=[=($7, $24)], joinType=[inner])
        LogicalTableScan(table=[[druid, numfoo]])
        LogicalTableScan(table=[[druid, broadcast]])
=== native
{
  "queryType" : "topN",
  "dataSource" : {
    "type" : "join",
    "left" : {
      "type" : "table",
      "name" : "numfoo"
    },
    "right" : {
      "type" : "globalTable",
      "name" : "broadcast"
    },
    "rightPrefix" : "j0.",
    "condition" : "(\"dim4\" == \"j0.dim4\")",
    "joinType" : "INNER"
  },
  "dimension" : {
    "type" : "default",
    "dimension" : "j0.dim4",
    "outputName" : "_d0",
    "outputType" : "STRING"
  },
  "metric" : {
    "type" : "inverted",
    "metric" : {
      "type" : "dimension",
      "ordering" : {
        "type" : "lexicographic"
      }
    }
  },
  "threshold" : 4,
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "granularity" : {
    "type" : "all"
  },
  "aggregations" : [ {
    "type" : "count",
    "name" : "a0"
  } ]
}
=== results
["b",9]
["a",9]
==============================================================
Converted from testVirtualColumnOnMVFilterJoinExpression()
=== case
Virtual column on m v filter join expression
=== SQL
SELECT foo1.dim3, foo2.dim3
FROM druid.numfoo as foo1
INNER JOIN druid.numfoo as foo2
ON MV_FILTER_ONLY(foo1.dim3, ARRAY['a']) = MV_FILTER_ONLY(foo2.dim3, ARRAY['a'])
=== options
provider=QueryContextForJoinProvider
sqlCompatibleNulls=both
vectorize=true
=== schema
dim3 VARCHAR
dim3 VARCHAR
=== plan
LogicalProject(dim3=[$6], dim30=[$24])
  LogicalJoin(condition=[=($17, $35)], joinType=[inner])
    LogicalProject(__time=[$0], cnt=[$1], d1=[$2], d2=[$3], dim1=[$4], dim2=[$5], dim3=[$6], dim4=[$7], dim5=[$8], dim6=[$9], f1=[$10], f2=[$11], l1=[$12], l2=[$13], m1=[$14], m2=[$15], unique_dim1=[$16], $f17=[MV_FILTER_ONLY($6, ARRAY('a'))])
      LogicalTableScan(table=[[druid, numfoo]])
    LogicalProject(__time=[$0], cnt=[$1], d1=[$2], d2=[$3], dim1=[$4], dim2=[$5], dim3=[$6], dim4=[$7], dim5=[$8], dim6=[$9], f1=[$10], f2=[$11], l1=[$12], l2=[$13], m1=[$14], m2=[$15], unique_dim1=[$16], $f17=[MV_FILTER_ONLY($6, ARRAY('a'))])
      LogicalTableScan(table=[[druid, numfoo]])
=== native
{
  "queryType" : "scan",
  "dataSource" : {
    "type" : "join",
    "left" : {
      "type" : "table",
      "name" : "numfoo"
    },
    "right" : {
      "type" : "query",
      "query" : {
        "queryType" : "scan",
        "dataSource" : {
          "type" : "table",
          "name" : "numfoo"
        },
        "intervals" : {
          "type" : "intervals",
          "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
        },
        "virtualColumns" : [ {
          "type" : "mv-filtered",
          "name" : "v0",
          "delegate" : {
            "type" : "default",
            "dimension" : "dim3",
            "outputName" : "dim3",
            "outputType" : "STRING"
          },
          "values" : [ "a" ],
          "isAllowList" : true
        } ],
        "resultFormat" : "compactedList",
        "columns" : [ "dim3", "v0" ],
        "granularity" : {
          "type" : "all"
        }
      }
    },
    "rightPrefix" : "j0.",
    "condition" : "(\"v0\" == \"j0.v0\")",
    "joinType" : "INNER"
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "virtualColumns" : [ {
    "type" : "mv-filtered",
    "name" : "v0",
    "delegate" : {
      "type" : "default",
      "dimension" : "dim3",
      "outputName" : "dim3",
      "outputType" : "STRING"
    },
    "values" : [ "a" ],
    "isAllowList" : true
  } ],
  "resultFormat" : "compactedList",
  "columns" : [ "dim3", "j0.dim3" ],
  "granularity" : {
    "type" : "all"
  }
}
=== results
["[\"a\",\"b\"]","[\"a\",\"b\"]"]
==============================================================
Converted from testVirtualColumnOnMVFilterMultiJoinExpression()
=== case
Virtual column on m v filter multi join expression
=== SQL
SELECT foo1.dim3, foo2.dim3
FROM druid.numfoo as foo1
INNER JOIN (
  SELECT foo3.dim3
  FROM druid.numfoo as foo3
  INNER JOIN druid.numfoo as foo4
  ON MV_FILTER_ONLY(foo3.dim3, ARRAY['a']) = MV_FILTER_ONLY(foo4.dim3, ARRAY['a'])
  ) as foo2
ON MV_FILTER_ONLY(foo1.dim3, ARRAY['a']) = MV_FILTER_ONLY(foo2.dim3, ARRAY['a'])
=== options
provider=QueryContextForJoinProvider
sqlCompatibleNulls=both
vectorize=true
=== schema
dim3 VARCHAR
dim3 VARCHAR
=== plan
LogicalProject(dim3=[$6], dim30=[$18])
  LogicalJoin(condition=[=($17, $19)], joinType=[inner])
    LogicalProject(__time=[$0], cnt=[$1], d1=[$2], d2=[$3], dim1=[$4], dim2=[$5], dim3=[$6], dim4=[$7], dim5=[$8], dim6=[$9], f1=[$10], f2=[$11], l1=[$12], l2=[$13], m1=[$14], m2=[$15], unique_dim1=[$16], $f17=[MV_FILTER_ONLY($6, ARRAY('a'))])
      LogicalTableScan(table=[[druid, numfoo]])
    LogicalProject(dim3=[$6], $f1=[MV_FILTER_ONLY($6, ARRAY('a'))])
      LogicalJoin(condition=[=($17, $35)], joinType=[inner])
        LogicalProject(__time=[$0], cnt=[$1], d1=[$2], d2=[$3], dim1=[$4], dim2=[$5], dim3=[$6], dim4=[$7], dim5=[$8], dim6=[$9], f1=[$10], f2=[$11], l1=[$12], l2=[$13], m1=[$14], m2=[$15], unique_dim1=[$16], $f17=[MV_FILTER_ONLY($6, ARRAY('a'))])
          LogicalTableScan(table=[[druid, numfoo]])
        LogicalProject(__time=[$0], cnt=[$1], d1=[$2], d2=[$3], dim1=[$4], dim2=[$5], dim3=[$6], dim4=[$7], dim5=[$8], dim6=[$9], f1=[$10], f2=[$11], l1=[$12], l2=[$13], m1=[$14], m2=[$15], unique_dim1=[$16], $f17=[MV_FILTER_ONLY($6, ARRAY('a'))])
          LogicalTableScan(table=[[druid, numfoo]])
=== native
{
  "queryType" : "scan",
  "dataSource" : {
    "type" : "join",
    "left" : {
      "type" : "table",
      "name" : "numfoo"
    },
    "right" : {
      "type" : "query",
      "query" : {
        "queryType" : "scan",
        "dataSource" : {
          "type" : "join",
          "left" : {
            "type" : "table",
            "name" : "numfoo"
          },
          "right" : {
            "type" : "query",
            "query" : {
              "queryType" : "scan",
              "dataSource" : {
                "type" : "table",
                "name" : "numfoo"
              },
              "intervals" : {
                "type" : "intervals",
                "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
              },
              "virtualColumns" : [ {
                "type" : "mv-filtered",
                "name" : "v0",
                "delegate" : {
                  "type" : "default",
                  "dimension" : "dim3",
                  "outputName" : "dim3",
                  "outputType" : "STRING"
                },
                "values" : [ "a" ],
                "isAllowList" : true
              } ],
              "resultFormat" : "compactedList",
              "columns" : [ "v0" ],
              "granularity" : {
                "type" : "all"
              }
            }
          },
          "rightPrefix" : "j0.",
          "condition" : "(\"v0\" == \"j0.v0\")",
          "joinType" : "INNER"
        },
        "intervals" : {
          "type" : "intervals",
          "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
        },
        "virtualColumns" : [ {
          "type" : "mv-filtered",
          "name" : "v0",
          "delegate" : {
            "type" : "default",
            "dimension" : "dim3",
            "outputName" : "dim3",
            "outputType" : "STRING"
          },
          "values" : [ "a" ],
          "isAllowList" : true
        } ],
        "resultFormat" : "compactedList",
        "columns" : [ "dim3", "v0" ],
        "granularity" : {
          "type" : "all"
        }
      }
    },
    "rightPrefix" : "j0.",
    "condition" : "(\"v0\" == \"j0.v0\")",
    "joinType" : "INNER"
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "virtualColumns" : [ {
    "type" : "mv-filtered",
    "name" : "v0",
    "delegate" : {
      "type" : "default",
      "dimension" : "dim3",
      "outputName" : "dim3",
      "outputType" : "STRING"
    },
    "values" : [ "a" ],
    "isAllowList" : true
  } ],
  "resultFormat" : "compactedList",
  "columns" : [ "dim3", "j0.dim3" ],
  "granularity" : {
    "type" : "all"
  }
}
=== results
["[\"a\",\"b\"]","[\"a\",\"b\"]"]
==============================================================
Converted from testInnerJoinWithFilterPushdownAndManyFiltersEmptyResults()
=== case
Inner join with filter pushdown and many filters empty results
=== SQL
SELECT f1.m1, f2.m1
FROM foo f1
INNER JOIN foo f2 ON f1.m1 = f2.m1
where (f1.dim1, f1.dim2) in (
		('A', 'B'), ('C', 'D'), ('A', 'C'), ('C', 'E'), ('D', 'H'), ('A', 'D'), ('B', 'C'),
		('H', 'E'), ('I', 'J'), ('I', 'K'), ('J', 'I'), ('Q', 'R'), ('Q', 'S'), ('S', 'Q'),
		('X', 'Y'), ('Z', 'U'), ('U', 'Z'), ('P', 'Q'), ('X', 'A')
		)
=== options
provider=QueryContextForJoinProvider
sqlCompatibleNulls=both
vectorize=true
=== schema
m1 FLOAT
m1 FLOAT
=== plan
LogicalProject(m1=[$5], m10=[$13])
  LogicalFilter(condition=[OR(AND(=($2, 'A'), =($3, 'B')), AND(=($2, 'C'), =($3, 'D')), AND(=($2, 'A'), =($3, 'C')), AND(=($2, 'C'), =($3, 'E')), AND(=($2, 'D'), =($3, 'H')), AND(=($2, 'A'), =($3, 'D')), AND(=($2, 'B'), =($3, 'C')), AND(=($2, 'H'), =($3, 'E')), AND(=($2, 'I'), =($3, 'J')), AND(=($2, 'I'), =($3, 'K')), AND(=($2, 'J'), =($3, 'I')), AND(=($2, 'Q'), =($3, 'R')), AND(=($2, 'Q'), =($3, 'S')), AND(=($2, 'S'), =($3, 'Q')), AND(=($2, 'X'), =($3, 'Y')), AND(=($2, 'Z'), =($3, 'U')), AND(=($2, 'U'), =($3, 'Z')), AND(=($2, 'P'), =($3, 'Q')), AND(=($2, 'X'), =($3, 'A')))])
    LogicalJoin(condition=[=($5, $13)], joinType=[inner])
      LogicalTableScan(table=[[druid, foo]])
      LogicalTableScan(table=[[druid, foo]])
=== native
{
  "queryType" : "scan",
  "dataSource" : {
    "type" : "join",
    "left" : {
      "type" : "table",
      "name" : "foo"
    },
    "right" : {
      "type" : "query",
      "query" : {
        "queryType" : "scan",
        "dataSource" : {
          "type" : "table",
          "name" : "foo"
        },
        "intervals" : {
          "type" : "intervals",
          "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
        },
        "resultFormat" : "compactedList",
        "columns" : [ "m1" ],
        "granularity" : {
          "type" : "all"
        }
      }
    },
    "rightPrefix" : "j0.",
    "condition" : "(\"m1\" == \"j0.m1\")",
    "joinType" : "INNER"
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "resultFormat" : "compactedList",
  "filter" : {
    "type" : "or",
    "fields" : [ {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "A"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "B"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "C"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "D"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "A"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "C"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "C"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "E"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "D"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "H"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "A"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "D"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "B"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "C"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "H"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "E"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "I"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "J"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "I"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "K"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "J"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "I"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "Q"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "R"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "Q"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "S"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "S"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "Q"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "X"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "Y"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "Z"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "U"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "U"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "Z"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "P"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "Q"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "X"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "A"
      } ]
    } ]
  },
  "columns" : [ "j0.m1", "m1" ],
  "granularity" : {
    "type" : "all"
  }
}
=== results
==============================================================
Converted from testInnerJoinWithFilterPushdownAndManyFiltersNonEmptyResults()
=== case
Inner join with filter pushdown and many filters non empty results
=== SQL
SELECT f1.m1, f2.m1
FROM foo f1
INNER JOIN foo f2
ON f1.m1 = f2.m1
where (f1.dim1, f1.dim2) in (
		('1', 'a'), ('C', 'D'), ('A', 'C'), ('C', 'E'), ('D', 'H'), ('A', 'D'),
		('B', 'C'), ('H', 'E'), ('I', 'J'), ('I', 'K'), ('J', 'I'), ('Q', 'R'),
		('Q', 'S'), ('S', 'Q'), ('X', 'Y'), ('Z', 'U'), ('U', 'Z'), ('P', 'Q'),
		('X', 'A')
		)
=== options
provider=QueryContextForJoinProvider
sqlCompatibleNulls=both
vectorize=true
=== schema
m1 FLOAT
m1 FLOAT
=== plan
LogicalProject(m1=[$5], m10=[$13])
  LogicalFilter(condition=[OR(AND(=($2, '1'), =($3, 'a')), AND(=($2, 'C'), =($3, 'D')), AND(=($2, 'A'), =($3, 'C')), AND(=($2, 'C'), =($3, 'E')), AND(=($2, 'D'), =($3, 'H')), AND(=($2, 'A'), =($3, 'D')), AND(=($2, 'B'), =($3, 'C')), AND(=($2, 'H'), =($3, 'E')), AND(=($2, 'I'), =($3, 'J')), AND(=($2, 'I'), =($3, 'K')), AND(=($2, 'J'), =($3, 'I')), AND(=($2, 'Q'), =($3, 'R')), AND(=($2, 'Q'), =($3, 'S')), AND(=($2, 'S'), =($3, 'Q')), AND(=($2, 'X'), =($3, 'Y')), AND(=($2, 'Z'), =($3, 'U')), AND(=($2, 'U'), =($3, 'Z')), AND(=($2, 'P'), =($3, 'Q')), AND(=($2, 'X'), =($3, 'A')))])
    LogicalJoin(condition=[=($5, $13)], joinType=[inner])
      LogicalTableScan(table=[[druid, foo]])
      LogicalTableScan(table=[[druid, foo]])
=== native
{
  "queryType" : "scan",
  "dataSource" : {
    "type" : "join",
    "left" : {
      "type" : "table",
      "name" : "foo"
    },
    "right" : {
      "type" : "query",
      "query" : {
        "queryType" : "scan",
        "dataSource" : {
          "type" : "table",
          "name" : "foo"
        },
        "intervals" : {
          "type" : "intervals",
          "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
        },
        "resultFormat" : "compactedList",
        "columns" : [ "m1" ],
        "granularity" : {
          "type" : "all"
        }
      }
    },
    "rightPrefix" : "j0.",
    "condition" : "(\"m1\" == \"j0.m1\")",
    "joinType" : "INNER"
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "resultFormat" : "compactedList",
  "filter" : {
    "type" : "or",
    "fields" : [ {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "1"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "a"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "C"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "D"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "A"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "C"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "C"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "E"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "D"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "H"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "A"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "D"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "B"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "C"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "H"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "E"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "I"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "J"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "I"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "K"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "J"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "I"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "Q"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "R"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "Q"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "S"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "S"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "Q"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "X"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "Y"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "Z"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "U"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "U"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "Z"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "P"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "Q"
      } ]
    }, {
      "type" : "and",
      "fields" : [ {
        "type" : "selector",
        "dimension" : "dim1",
        "value" : "X"
      }, {
        "type" : "selector",
        "dimension" : "dim2",
        "value" : "A"
      } ]
    } ]
  },
  "columns" : [ "j0.m1", "m1" ],
  "granularity" : {
    "type" : "all"
  }
}
=== results
[4.0,4.0]
==============================================================
Converted from testPlanWithInFilterMoreThanInSubQueryThreshold()
=== case
Plan with in filter more than in sub query threshold
=== SQL
SELECT l1
FROM numfoo
WHERE l1 IN (4842, 4844, 4845, 14905, 4853, 29064)
=== context
inSubQueryThreshold=3
=== options
sqlCompatibleNulls=both
vectorize=true
=== schema
l1 BIGINT
=== plan
LogicalProject(l1=[$12])
  LogicalJoin(condition=[=($12, $17)], joinType=[inner])
    LogicalTableScan(table=[[druid, numfoo]])
    LogicalAggregate(group=[{0}])
      LogicalValues(type=[RecordType(BIGINT ROW_VALUE)], tuples=[[{ 4842 }, { 4844 }, { 4845 }, { 14905 }, { 4853 }, { 29064 }]])
=== native
{
  "queryType" : "scan",
  "dataSource" : {
    "type" : "join",
    "left" : {
      "type" : "table",
      "name" : "numfoo"
    },
    "right" : {
      "type" : "inline",
      "columnNames" : [ "ROW_VALUE" ],
      "columnTypes" : [ "LONG" ],
      "rows" : [ [ 4842 ], [ 4844 ], [ 4845 ], [ 14905 ], [ 4853 ], [ 29064 ] ]
    },
    "rightPrefix" : "j0.",
    "condition" : "(\"l1\" == \"j0.ROW_VALUE\")",
    "joinType" : "INNER"
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "resultFormat" : "compactedList",
  "columns" : [ "l1" ],
  "context" : {
    "inSubQueryThreshold" : 3
  },
  "granularity" : {
    "type" : "all"
  }
}
=== results
