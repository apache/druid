# testSemiAndAntiJoinSimultaneouslyUsingWhereInSubquery@all_enabled case-crc:588e02ac
# quidem testcase reason: SLIGHTLY_WORSE_FILTER_PUSHED_TO_JOIN_OPERAND
!set debug true
!set defaultTimeout 300000
!set enableJoinFilterRewrite true
!set enableJoinFilterRewriteValueColumnFilters true
!set enableRewriteJoinToFilter true
!set enableTimeBoundaryPlanning true
!set maxScatterGatherBytes 9223372036854775807
!set plannerStrategy DECOUPLED
!set sqlCurrentTimestamp 2000-01-01T00:00:00Z
!set sqlQueryId dummy
!set outputformat mysql
!use druidtest:///
SELECT dim1, COUNT(*) FROM foo
WHERE dim1 IN ('abc', 'def')
AND __time IN (SELECT MAX(__time) FROM foo)
AND __time NOT IN (SELECT MIN(__time) FROM foo)
GROUP BY 1;
+------+--------+
| dim1 | EXPR$1 |
+------+--------+
| abc  |      1 |
+------+--------+
(1 row)

!ok
LogicalAggregate(group=[{1}], EXPR$1=[COUNT()])
  LogicalFilter(condition=[OR(=($3, 0), AND(IS NULL($6), >=($4, $3)))])
    LogicalJoin(condition=[=($0, $5)], joinType=[left])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalJoin(condition=[=($0, $2)], joinType=[inner])
          LogicalFilter(condition=[SEARCH($1, Sarg['abc':VARCHAR, 'def':VARCHAR]:VARCHAR)])
            LogicalProject(__time=[$0], dim1=[$1])
              LogicalTableScan(table=[[druid, foo]])
          LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
            LogicalTableScan(table=[[druid, foo]])
        LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
          LogicalAggregate(group=[{}], EXPR$0=[MIN($0)])
            LogicalTableScan(table=[[druid, foo]])
      LogicalProject(EXPR$0=[$0], i=[true])
        LogicalAggregate(group=[{}], EXPR$0=[MIN($0)])
          LogicalTableScan(table=[[druid, foo]])

!logicalPlan
DruidAggregate(group=[{1}], EXPR$1=[COUNT()], druid=[logical])
  DruidFilter(condition=[OR(=($3, 0), AND(IS NULL($6), >=($4, $3)))])
    DruidJoin(condition=[=($0, $5)], joinType=[left])
      DruidJoin(condition=[true], joinType=[inner])
        DruidJoin(condition=[=($0, $2)], joinType=[inner])
          DruidFilter(condition=[SEARCH($1, Sarg['abc':VARCHAR, 'def':VARCHAR]:VARCHAR)])
            DruidProject(__time=[$0], dim1=[$1], druid=[logical])
              DruidTableScan(table=[[druid, foo]], druid=[logical])
          DruidAggregate(group=[{}], EXPR$0=[MAX($0)], druid=[logical])
            DruidTableScan(table=[[druid, foo]], druid=[logical])
        DruidAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)], druid=[logical])
          DruidAggregate(group=[{}], EXPR$0=[MIN($0)], druid=[logical])
            DruidTableScan(table=[[druid, foo]], druid=[logical])
      DruidProject(EXPR$0=[$0], i=[true], druid=[logical])
        DruidAggregate(group=[{}], EXPR$0=[MIN($0)], druid=[logical])
          DruidTableScan(table=[[druid, foo]], druid=[logical])

!druidPlan
!nativePlan
