# testFilterAndGroupByLookupUsingJoinOperatorBackwards@filter-rewrites@NullHandling=default case-crc:49af20a5
# quidem testcase reason: SLIGHTLY_WORSE_FILTER_PUSHED_TO_JOIN_OPERAND
!set debug true
!set defaultTimeout 300000
!set enableJoinFilterRewrite true
!set enableJoinFilterRewriteValueColumnFilters true
!set enableRewriteJoinToFilter false
!set maxScatterGatherBytes 9223372036854775807
!set plannerStrategy DECOUPLED
!set sqlCurrentTimestamp 2000-01-01T00:00:00Z
!set sqlQueryId dummy
!set outputformat mysql
!use druidtest:///
SELECT lookyloo.v, COUNT(*)
FROM lookup.lookyloo RIGHT JOIN foo ON foo.dim2 = lookyloo.k
WHERE lookyloo.v <> 'xa'
GROUP BY lookyloo.v;
+------+--------+
| v    | EXPR$1 |
+------+--------+
| xabc |      1 |
+------+--------+
(1 row)

!ok
LogicalAggregate(group=[{1}], EXPR$1=[COUNT()])
  LogicalJoin(condition=[=($2, $0)], joinType=[inner])
    LogicalFilter(condition=[<>($1, 'xa')])
      LogicalTableScan(table=[[lookup, lookyloo]])
    LogicalProject(dim2=[$2])
      LogicalTableScan(table=[[druid, foo]])

!logicalPlan
DruidAggregate(group=[{1}], EXPR$1=[COUNT()], druid=[logical])
  DruidJoin(condition=[=($0, $2)], joinType=[inner])
    DruidFilter(condition=[<>($1, 'xa')])
      DruidTableScan(table=[[lookup, lookyloo]], druid=[logical])
    DruidProject(dim2=[$2], druid=[logical])
      DruidTableScan(table=[[druid, foo]], druid=[logical])

!druidPlan
{
  "queryType" : "groupBy",
  "dataSource" : {
    "type" : "join",
    "left" : {
      "type" : "query",
      "query" : {
        "queryType" : "scan",
        "dataSource" : {
          "type" : "lookup",
          "lookup" : "lookyloo"
        },
        "intervals" : {
          "type" : "intervals",
          "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
        },
        "resultFormat" : "compactedList",
        "filter" : {
          "type" : "not",
          "field" : {
            "type" : "selector",
            "dimension" : "v",
            "value" : "xa"
          }
        },
        "columns" : [ "k", "v" ],
        "columnTypes" : [ "STRING", "STRING" ],
        "granularity" : {
          "type" : "all"
        },
        "legacy" : false
      }
    },
    "right" : {
      "type" : "query",
      "query" : {
        "queryType" : "scan",
        "dataSource" : {
          "type" : "table",
          "name" : "foo"
        },
        "intervals" : {
          "type" : "intervals",
          "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
        },
        "resultFormat" : "compactedList",
        "columns" : [ "dim2" ],
        "columnTypes" : [ "STRING" ],
        "granularity" : {
          "type" : "all"
        },
        "legacy" : false
      }
    },
    "rightPrefix" : "j0.",
    "condition" : "(\"k\" == \"j0.dim2\")",
    "joinType" : "INNER"
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "granularity" : {
    "type" : "all"
  },
  "dimensions" : [ {
    "type" : "default",
    "dimension" : "v",
    "outputName" : "d0",
    "outputType" : "STRING"
  } ],
  "aggregations" : [ {
    "type" : "count",
    "name" : "a0"
  } ],
  "limitSpec" : {
    "type" : "NoopLimitSpec"
  }
}
!nativePlan
