# testInnerJoinQueryOfLookup@join-to-filter case-crc:967213e2
# quidem testcase reason: FINALIZING_FIELD_ACCESS
!set debug true
!set defaultTimeout 300000
!set enableJoinFilterRewrite false
!set enableJoinFilterRewriteValueColumnFilters false
!set enableRewriteJoinToFilter true
!set maxScatterGatherBytes 9223372036854775807
!set plannerStrategy DECOUPLED
!set sqlCurrentTimestamp 2000-01-01T00:00:00Z
!set sqlQueryId dummy
!set outputformat mysql
!use druidtest:///
SELECT dim1, dim2, t1.v, t1.v
FROM foo
INNER JOIN 
  (SELECT SUBSTRING(k, 1, 1) k, ANY_VALUE(v, 10) v FROM lookup.lookyloo GROUP BY 1) t1
  ON foo.dim2 = t1.k;
+------+------+------+------+
| dim1 | dim2 | v    | v    |
+------+------+------+------+
|      | a    | xabc | xabc |
| 1    | a    | xabc | xabc |
+------+------+------+------+
(2 rows)

!ok
LogicalProject(dim1=[$0], dim2=[$1], v=[$3], v0=[$3])
  LogicalJoin(condition=[=($1, $2)], joinType=[inner])
    LogicalProject(dim1=[$1], dim2=[$2])
      LogicalTableScan(table=[[druid, foo]])
    LogicalAggregate(group=[{0}], v=[ANY_VALUE($1, $2)])
      LogicalProject(k=[SUBSTRING($0, 1, 1)], v=[$1], $f2=[10])
        LogicalTableScan(table=[[lookup, lookyloo]])

!logicalPlan
DruidProject(dim1=[$0], dim2=[$1], v=[$3], v0=[$3], druid=[logical])
  DruidJoin(condition=[=($1, $2)], joinType=[inner])
    DruidProject(dim1=[$1], dim2=[$2], druid=[logical])
      DruidTableScan(table=[[druid, foo]], druid=[logical])
    DruidAggregate(group=[{0}], v=[ANY_VALUE($1, $2)], druid=[logical])
      DruidProject(k=[SUBSTRING($0, 1, 1)], v=[$1], $f2=[10], druid=[logical])
        DruidTableScan(table=[[lookup, lookyloo]], druid=[logical])

!druidPlan
{
  "queryType" : "scan",
  "dataSource" : {
    "type" : "join",
    "left" : {
      "type" : "table",
      "name" : "foo"
    },
    "right" : {
      "type" : "query",
      "query" : {
        "queryType" : "groupBy",
        "dataSource" : {
          "type" : "lookup",
          "lookup" : "lookyloo"
        },
        "intervals" : {
          "type" : "intervals",
          "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
        },
        "granularity" : {
          "type" : "all"
        },
        "dimensions" : [ {
          "type" : "extraction",
          "dimension" : "k",
          "outputName" : "d0",
          "outputType" : "STRING",
          "extractionFn" : {
            "type" : "substring",
            "index" : 0,
            "length" : 1
          }
        } ],
        "aggregations" : [ {
          "type" : "stringAny",
          "name" : "a0:a",
          "fieldName" : "v",
          "maxStringBytes" : 10,
          "aggregateMultipleValues" : true
        } ],
        "postAggregations" : [ {
          "type" : "finalizingFieldAccess",
          "name" : "a0",
          "fieldName" : "a0:a"
        } ],
        "limitSpec" : {
          "type" : "NoopLimitSpec"
        }
      }
    },
    "rightPrefix" : "j0.",
    "condition" : "(\"dim2\" == \"j0.d0\")",
    "joinType" : "INNER"
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "resultFormat" : "compactedList",
  "columns" : [ "dim1", "dim2", "j0.a0" ],
  "legacy" : false,
  "columnTypes" : [ "STRING", "STRING", "STRING" ],
  "granularity" : {
    "type" : "all"
  }
}
!nativePlan
