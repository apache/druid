# testFilterAndGroupByLookupUsingJoinOperator@join-to-filter case-crc:6decf339
# quidem testcase reason: SLIGHTLY_WORSE_FILTER_PUSHED_TO_JOIN_OPERAND
!set debug true
!set defaultTimeout 300000
!set enableJoinFilterRewrite false
!set enableJoinFilterRewriteValueColumnFilters false
!set enableRewriteJoinToFilter true
!set maxScatterGatherBytes 9223372036854775807
!set plannerStrategy DECOUPLED
!set sqlCurrentTimestamp 2000-01-01T00:00:00Z
!set sqlQueryId dummy
!set outputformat mysql
!use druidtest:///
SELECT lookyloo.k, COUNT(*)
FROM foo LEFT JOIN lookup.lookyloo ON foo.dim2 = lookyloo.k
WHERE lookyloo.v = 'xa'
GROUP BY lookyloo.k;
+---+--------+
| k | EXPR$1 |
+---+--------+
| a |      2 |
+---+--------+
(1 row)

!ok
LogicalAggregate(group=[{1}], EXPR$1=[COUNT()])
  LogicalJoin(condition=[=($0, $1)], joinType=[inner])
    LogicalProject(dim2=[$2])
      LogicalTableScan(table=[[druid, foo]])
    LogicalFilter(condition=[=($1, 'xa')])
      LogicalTableScan(table=[[lookup, lookyloo]])

!logicalPlan
DruidAggregate(group=[{1}], EXPR$1=[COUNT()], druid=[logical])
  DruidJoin(condition=[=($0, $1)], joinType=[inner])
    DruidProject(dim2=[$2], druid=[logical])
      DruidTableScan(table=[[druid, foo]], druid=[logical])
    DruidFilter(condition=[=($1, 'xa')])
      DruidTableScan(table=[[lookup, lookyloo]], druid=[logical])

!druidPlan
!nativePlan
