# testJoinOuterGroupByAndSubqueryHasLimit@NullHandling=sql case-crc:2e733a5b
# quidem testcase reason: EQUIV_PLAN_EXTRA_COLUMNS
!set debug true
!set defaultTimeout 300000
!set maxScatterGatherBytes 9223372036854775807
!set plannerStrategy DECOUPLED
!set sqlCurrentTimestamp 2000-01-01T00:00:00Z
!set sqlQueryId dummy
!set outputformat mysql
!use druidtest:///
SELECT dim2, AVG(m2) FROM (SELECT * FROM foo AS t1 INNER JOIN foo AS t2 ON t1.m1 = t2.m1 LIMIT 10) AS t3 GROUP BY dim2;
+------+--------+
| dim2 | EXPR$1 |
+------+--------+
|      |    3.0 |
| a    |    2.5 |
| abc  |    5.0 |
|      |    4.0 |
+------+--------+
(4 rows)

!ok
LogicalAggregate(group=[{0}], EXPR$1=[AVG($2)])
  LogicalSort(fetch=[10])
    LogicalJoin(condition=[=($1, $3)], joinType=[inner])
      LogicalProject(dim2=[$2], m1=[$5], m2=[$6])
        LogicalTableScan(table=[[druid, foo]])
      LogicalProject(m1=[$5])
        LogicalTableScan(table=[[druid, foo]])

!logicalPlan
DruidAggregate(group=[{0}], EXPR$1=[AVG($2)], druid=[logical])
  DruidSort(fetch=[10], druid=[logical])
    DruidJoin(condition=[=($1, $3)], joinType=[inner])
      DruidProject(dim2=[$2], m1=[$5], m2=[$6], druid=[logical])
        DruidTableScan(table=[[druid, foo]], druid=[logical])
      DruidProject(m1=[$5], druid=[logical])
        DruidTableScan(table=[[druid, foo]], druid=[logical])

!druidPlan
!nativePlan
