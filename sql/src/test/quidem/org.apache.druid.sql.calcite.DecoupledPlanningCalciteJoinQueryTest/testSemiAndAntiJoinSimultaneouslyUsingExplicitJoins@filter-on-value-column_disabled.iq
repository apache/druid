# testSemiAndAntiJoinSimultaneouslyUsingExplicitJoins@filter-on-value-column_disabled case-crc:f2169f67
# quidem testcase reason: SLIGHTLY_WORSE_FILTER_PUSHED_TO_JOIN_OPERAND
!set debug true
!set defaultTimeout 300000
!set enableJoinFilterRewrite true
!set enableJoinFilterRewriteValueColumnFilters false
!set enableRewriteJoinToFilter true
!set enableTimeBoundaryPlanning true
!set maxScatterGatherBytes 9223372036854775807
!set plannerStrategy DECOUPLED
!set sqlCurrentTimestamp 2000-01-01T00:00:00Z
!set sqlQueryId dummy
!set outputformat mysql
!use druidtest:///
SELECT dim1, COUNT(*) FROM
foo
INNER JOIN (SELECT MAX(__time) t FROM foo) t0 on t0.t = foo.__time
LEFT JOIN (SELECT MIN(__time) t FROM foo) t1 on t1.t = foo.__time
WHERE dim1 IN ('abc', 'def') AND t1.t is null
GROUP BY 1;
+------+--------+
| dim1 | EXPR$1 |
+------+--------+
| abc  |      1 |
+------+--------+
(1 row)

!ok
LogicalAggregate(group=[{1}], EXPR$1=[COUNT()])
  LogicalFilter(condition=[IS NULL($3)])
    LogicalJoin(condition=[=($3, $0)], joinType=[left])
      LogicalJoin(condition=[=($2, $0)], joinType=[inner])
        LogicalFilter(condition=[SEARCH($1, Sarg['abc':VARCHAR, 'def':VARCHAR]:VARCHAR)])
          LogicalProject(__time=[$0], dim1=[$1])
            LogicalTableScan(table=[[druid, foo]])
        LogicalAggregate(group=[{}], t=[MAX($0)])
          LogicalTableScan(table=[[druid, foo]])
      LogicalAggregate(group=[{}], t=[MIN($0)])
        LogicalTableScan(table=[[druid, foo]])

!logicalPlan
DruidAggregate(group=[{1}], EXPR$1=[COUNT()], druid=[logical])
  DruidFilter(condition=[IS NULL($3)])
    DruidJoin(condition=[=($0, $3)], joinType=[left])
      DruidJoin(condition=[=($0, $2)], joinType=[inner])
        DruidFilter(condition=[SEARCH($1, Sarg['abc':VARCHAR, 'def':VARCHAR]:VARCHAR)])
          DruidProject(__time=[$0], dim1=[$1], druid=[logical])
            DruidTableScan(table=[[druid, foo]], druid=[logical])
        DruidAggregate(group=[{}], t=[MAX($0)], druid=[logical])
          DruidTableScan(table=[[druid, foo]], druid=[logical])
      DruidAggregate(group=[{}], t=[MIN($0)], druid=[logical])
        DruidTableScan(table=[[druid, foo]], druid=[logical])

!druidPlan
!nativePlan
