# testLeftJoinOnTwoInlineDataSourcesWithTimeFilter_withLeftDirectAccess@filter-rewrites-disabled@NullHandling=sql case-crc:18bc3b01
# quidem testcase reason: JOIN_LEFT_DIRECT_ACCESS
!set debug true
!set defaultTimeout 300000
!set enableJoinFilterRewrite false
!set enableJoinFilterRewriteValueColumnFilters true
!set enableJoinLeftTableScanDirect true
!set enableRewriteJoinToFilter true
!set maxScatterGatherBytes 9223372036854775807
!set plannerStrategy DECOUPLED
!set sqlCurrentTimestamp 2000-01-01T00:00:00Z
!set sqlQueryId dummy
!set outputformat mysql
!use druidtest:///
with abc as
(
  SELECT dim1, "__time", m1 from foo WHERE "dim1" = '10.1' AND "__time" >= '1999'
)
SELECT t1.dim1, t1."__time" from abc as t1 LEFT JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'
;
+------+-------------------------+
| dim1 | __time                  |
+------+-------------------------+
| 10.1 | 2000-01-02 00:00:00.000 |
+------+-------------------------+
(1 row)

!ok
LogicalProject(dim1=[CAST('10.1':VARCHAR):VARCHAR], __time=[$1])
  LogicalJoin(condition=[=($0, $2)], joinType=[left])
    LogicalProject(dim1=[CAST('10.1':VARCHAR):VARCHAR], __time=[$0])
      LogicalFilter(condition=[AND(=($1, '10.1'), >=($0, 1999-01-01 00:00:00))])
        LogicalTableScan(table=[[druid, foo]])
    LogicalProject(dim1=[CAST('10.1':VARCHAR):VARCHAR])
      LogicalFilter(condition=[AND(=($1, '10.1'), >=($0, 1999-01-01 00:00:00))])
        LogicalTableScan(table=[[druid, foo]])

!logicalPlan
DruidProject(dim1=[CAST('10.1':VARCHAR):VARCHAR], __time=[$1], druid=[logical])
  DruidJoin(condition=[=($0, $2)], joinType=[left])
    DruidProject(dim1=[CAST('10.1':VARCHAR):VARCHAR], __time=[$0], druid=[logical])
      DruidFilter(condition=[AND(=($1, '10.1'), >=($0, 1999-01-01 00:00:00))])
        DruidTableScan(table=[[druid, foo]], druid=[logical])
    DruidProject(dim1=[CAST('10.1':VARCHAR):VARCHAR], druid=[logical])
      DruidFilter(condition=[AND(=($1, '10.1'), >=($0, 1999-01-01 00:00:00))])
        DruidTableScan(table=[[druid, foo]], druid=[logical])

!druidPlan
!nativePlan
