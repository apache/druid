# testInnerJoinTableLookupLookupWithFilterWithoutLimit@filter-rewrites case-crc:4616fcc4
# quidem testcase reason: SLIGHTLY_WORSE_FILTER_PUSHED_TO_JOIN_OPERAND
!set debug true
!set defaultTimeout 300000
!set enableJoinFilterRewrite true
!set enableJoinFilterRewriteValueColumnFilters true
!set enableRewriteJoinToFilter false
!set maxScatterGatherBytes 9223372036854775807
!set plannerStrategy DECOUPLED
!set sqlCurrentTimestamp 2000-01-01T00:00:00Z
!set sqlQueryId dummy
!set outputformat mysql
!use druidtest:///
SELECT dim1
FROM foo
INNER JOIN lookup.lookyloo l ON foo.dim2 = l.k
INNER JOIN lookup.lookyloo l2 ON foo.dim2 = l2.k
WHERE l.v = 'xa'
;
+------+
| dim1 |
+------+
|      |
| 1    |
+------+
(2 rows)

!ok
LogicalProject(dim1=[$0])
  LogicalJoin(condition=[=($1, $4)], joinType=[inner])
    LogicalJoin(condition=[=($1, $2)], joinType=[inner])
      LogicalProject(dim1=[$1], dim2=[$2])
        LogicalTableScan(table=[[druid, foo]])
      LogicalFilter(condition=[=($1, 'xa')])
        LogicalTableScan(table=[[lookup, lookyloo]])
    LogicalProject(k=[$0])
      LogicalTableScan(table=[[lookup, lookyloo]])

!logicalPlan
DruidProject(dim1=[$0], druid=[logical])
  DruidJoin(condition=[=($1, $4)], joinType=[inner])
    DruidJoin(condition=[=($1, $2)], joinType=[inner])
      DruidProject(dim1=[$1], dim2=[$2], druid=[logical])
        DruidTableScan(table=[[druid, foo]], druid=[logical])
      DruidFilter(condition=[=($1, 'xa')])
        DruidTableScan(table=[[lookup, lookyloo]], druid=[logical])
    DruidProject(k=[$0], druid=[logical])
      DruidTableScan(table=[[lookup, lookyloo]], druid=[logical])

!druidPlan
!nativePlan
