# testInnerJoinTwoLookupsToTableUsingNumericColumn case-crc:ac4fadf1
!set sqlQueryId dummy
!set defaultTimeout 300000
!set debug true
!set maxScatterGatherBytes 9223372036854775807
!set enableJoinFilterRewriteValueColumnFilters false
!set enableRewriteJoinToFilter false
!set sqlCurrentTimestamp 2000-01-01T00:00:00Z
!set plannerStrategy DECOUPLED
!set enableJoinFilterRewrite false
!set outputformat mysql
!use druidtest:///
SELECT COUNT(*)
FROM foo
INNER JOIN lookup.lookyloo l1 ON l1.k = foo.m1
INNER JOIN lookup.lookyloo l2 ON l2.k = l1.k;
+--------+
| EXPR$0 |
+--------+
|      1 |
+--------+
(1 row)

!ok
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalJoin(condition=[=($1, $0)], joinType=[inner])
    LogicalProject(k=[$1])
      LogicalJoin(condition=[=($2, $0)], joinType=[inner])
        LogicalProject(m1=[$5])
          LogicalTableScan(table=[[druid, foo]])
        LogicalProject(k=[$0], k0=[CAST($0):FLOAT])
          LogicalTableScan(table=[[lookup, lookyloo]])
    LogicalProject(k=[$0])
      LogicalTableScan(table=[[lookup, lookyloo]])

!logicalPlan
DruidAggregate(group=[{}], EXPR$0=[COUNT()], druid=[logical])
  DruidJoin(condition=[=($1, $0)], joinType=[inner])
    DruidProject(k=[$1], druid=[logical])
      DruidJoin(condition=[=($2, $0)], joinType=[inner])
        DruidProject(m1=[$5], druid=[logical])
          DruidTableScan(table=[[druid, foo]], druid=[logical])
        DruidProject(k=[$0], k0=[CAST($0):FLOAT], druid=[logical])
          DruidTableScan(table=[[lookup, lookyloo]], druid=[logical])
    DruidProject(k=[$0], druid=[logical])
      DruidTableScan(table=[[lookup, lookyloo]], druid=[logical])

!druidPlan
{
  "queryType" : "timeseries",
  "dataSource" : {
    "type" : "join",
    "left" : {
      "type" : "join",
      "left" : {
        "type" : "table",
        "name" : "foo"
      },
      "right" : {
        "type" : "query",
        "query" : {
          "queryType" : "scan",
          "dataSource" : {
            "type" : "lookup",
            "lookup" : "lookyloo"
          },
          "intervals" : {
            "type" : "intervals",
            "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
          },
          "virtualColumns" : [ {
            "type" : "expression",
            "name" : "v0",
            "expression" : "CAST(\"k\", 'DOUBLE')",
            "outputType" : "FLOAT"
          } ],
          "resultFormat" : "compactedList",
          "columns" : [ "k", "v0" ],
          "legacy" : false,
          "columnTypes" : [ "STRING", "FLOAT" ],
          "granularity" : {
            "type" : "all"
          }
        }
      },
      "rightPrefix" : "j0.",
      "condition" : "(\"j0.v0\" == \"m1\")",
      "joinType" : "INNER"
    },
    "right" : {
      "type" : "lookup",
      "lookup" : "lookyloo"
    },
    "rightPrefix" : "_j0.",
    "condition" : "(\"_j0.k\" == \"j0.k\")",
    "joinType" : "INNER"
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "granularity" : {
    "type" : "all"
  },
  "aggregations" : [ {
    "type" : "count",
    "name" : "a0"
  } ]
}
!nativePlan
