# testJoinWithInputRefCondition@NullHandling=sql case-crc:9a6c217b
# quidem testcase reason: JOIN_FILTER_LOCATIONS
!set debug true
!set defaultTimeout 300000
!set maxScatterGatherBytes 9223372036854775807
!set plannerStrategy DECOUPLED
!set sqlCurrentTimestamp 2000-01-01T00:00:00Z
!set sqlQueryId dummy
!set outputformat mysql
!use druidtest:///
SELECT COUNT(*) FILTER (WHERE FLOOR(100) NOT IN (SELECT m1 FROM foo)) FROM foo;
+--------+
| EXPR$0 |
+--------+
|      6 |
+--------+
(1 row)

!ok
LogicalAggregate(group=[{}], EXPR$0=[COUNT() FILTER $0])
  LogicalProject($f0=[OR(=($1, 0), AND(IS NULL($4), >=($2, $1)))])
    LogicalJoin(condition=[=(CAST(FLOOR(100)):FLOAT NOT NULL, $3)], joinType=[left])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalProject(DUMMY=[0])
          LogicalTableScan(table=[[druid, foo]])
        LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($5)])
          LogicalTableScan(table=[[druid, foo]])
      LogicalAggregate(group=[{5}], i=[LITERAL_AGG(true)])
        LogicalTableScan(table=[[druid, foo]])

!logicalPlan
DruidAggregate(group=[{}], EXPR$0=[COUNT() FILTER $0], druid=[logical])
  DruidProject($f0=[OR(=($1, 0), AND(IS NULL($4), >=($2, $1)))], druid=[logical])
    DruidJoin(condition=[=(CAST(FLOOR(100)):FLOAT NOT NULL, $3)], joinType=[left])
      DruidJoin(condition=[true], joinType=[inner])
        DruidProject(DUMMY=[0], druid=[logical])
          DruidTableScan(table=[[druid, foo]], druid=[logical])
        DruidAggregate(group=[{}], c=[COUNT()], ck=[COUNT($5)], druid=[logical])
          DruidTableScan(table=[[druid, foo]], druid=[logical])
      DruidAggregate(group=[{5}], i=[LITERAL_AGG(true)], druid=[logical])
        DruidTableScan(table=[[druid, foo]], druid=[logical])

!druidPlan
!nativePlan
