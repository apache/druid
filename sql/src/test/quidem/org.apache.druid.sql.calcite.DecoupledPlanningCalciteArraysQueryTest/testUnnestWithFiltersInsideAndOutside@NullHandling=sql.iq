# testUnnestWithFiltersInsideAndOutside@NullHandling=sql case-crc:10c26262
# quidem testcase reason: UNNEST_EXTRA_SCAN
!set debug true
!set defaultTimeout 300000
!set maxScatterGatherBytes 9223372036854775807
!set plannerStrategy DECOUPLED
!set sqlCurrentTimestamp 2000-01-01T00:00:00Z
!set sqlQueryId dummy
!set sqlStringifyArrays false
!set outputformat mysql
!use druidtest:///
SELECT d3 FROM
  (select * from druid.numfoo where dim2='a') as t,
  UNNEST(MV_TO_ARRAY(dim3)) as unnested (d3)
WHERE t.dim1 <> 'foo'
AND unnested.d3 <> 'b';
+----+
| d3 |
+----+
|    |
| a  |
+----+
(2 rows)

!ok
LogicalProject(d3=[$18])
  LogicalUnnest(unnestExpr=[MV_TO_ARRAY($3)], filter=[<>($0, 'b')])
    LogicalProject(__time=[$0], dim1=[$1], $f2=[CAST('a':VARCHAR):VARCHAR], dim3=[$3], dim4=[$4], dim5=[$5], dim6=[$6], d1=[$7], d2=[$8], f1=[$9], f2=[$10], l1=[$11], l2=[$12], cnt=[$13], m1=[$14], m2=[$15], unique_dim1=[$16], __time0=[$0])
      LogicalFilter(condition=[AND(=($2, 'a'), <>($1, 'foo'))])
        LogicalTableScan(table=[[druid, numfoo]])

!logicalPlan
DruidProject(d3=[$18], druid=[logical])
  DruidUnnest(unnestExpr=[MV_TO_ARRAY($3)], filter=[<>($0, 'b')])
    DruidProject(__time=[$0], dim1=[$1], $f2=[CAST('a':VARCHAR):VARCHAR], dim3=[$3], dim4=[$4], dim5=[$5], dim6=[$6], d1=[$7], d2=[$8], f1=[$9], f2=[$10], l1=[$11], l2=[$12], cnt=[$13], m1=[$14], m2=[$15], unique_dim1=[$16], __time0=[$0], druid=[logical])
      DruidFilter(condition=[AND(=($2, 'a'), <>($1, 'foo'))])
        DruidTableScan(table=[[druid, numfoo]], druid=[logical])

!druidPlan
{
  "queryType" : "scan",
  "dataSource" : {
    "type" : "unnest",
    "base" : {
      "type" : "query",
      "query" : {
        "queryType" : "scan",
        "dataSource" : {
          "type" : "table",
          "name" : "numfoo"
        },
        "intervals" : {
          "type" : "intervals",
          "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
        },
        "virtualColumns" : [ {
          "type" : "expression",
          "name" : "v0",
          "expression" : "'a'",
          "outputType" : "STRING"
        } ],
        "resultFormat" : "compactedList",
        "filter" : {
          "type" : "and",
          "fields" : [ {
            "type" : "equals",
            "column" : "dim2",
            "matchValueType" : "STRING",
            "matchValue" : "a"
          }, {
            "type" : "not",
            "field" : {
              "type" : "equals",
              "column" : "dim1",
              "matchValueType" : "STRING",
              "matchValue" : "foo"
            }
          } ]
        },
        "columns" : [ "__time", "cnt", "d1", "d2", "dim1", "dim3", "dim4", "dim5", "dim6", "f1", "f2", "l1", "l2", "m1", "m2", "unique_dim1", "v0" ],
        "columnTypes" : [ "LONG", "LONG", "DOUBLE", "DOUBLE", "STRING", "STRING", "STRING", "STRING", "STRING", "FLOAT", "FLOAT", "LONG", "LONG", "FLOAT", "DOUBLE", "COMPLEX<hyperUnique>", "STRING" ],
        "granularity" : {
          "type" : "all"
        },
        "legacy" : false
      }
    },
    "virtualColumn" : {
      "type" : "expression",
      "name" : "j0.unnest",
      "expression" : "mv_to_array(\"dim3\")",
      "outputType" : "ARRAY<STRING>"
    },
    "unnestFilter" : {
      "type" : "not",
      "field" : {
        "type" : "equals",
        "column" : "j0.unnest",
        "matchValueType" : "STRING",
        "matchValue" : "b"
      }
    }
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "resultFormat" : "compactedList",
  "columns" : [ "j0.unnest" ],
  "columnTypes" : [ "STRING" ],
  "granularity" : {
    "type" : "all"
  },
  "legacy" : false
}
!nativePlan
