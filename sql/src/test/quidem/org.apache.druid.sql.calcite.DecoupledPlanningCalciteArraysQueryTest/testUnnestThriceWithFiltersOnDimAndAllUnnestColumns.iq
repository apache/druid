# testUnnestThriceWithFiltersOnDimAndAllUnnestColumns case-crc:d1566ac4
# quidem testcase reason: IMPROVED_PLAN
!set debug true
!set defaultTimeout 300000
!set maxScatterGatherBytes 9223372036854775807
!set plannerStrategy DECOUPLED
!set sqlCurrentTimestamp 2000-01-01T00:00:00Z
!set sqlQueryId dummy
!set sqlStringifyArrays false
!set outputformat mysql
!use druidtest:///
    SELECT dimZipf, dim3_unnest1, dim3_unnest2, dim3_unnest3 FROM 
      ( SELECT * FROM 
           ( SELECT * FROM lotsocolumns, UNNEST(MV_TO_ARRAY(dimMultivalEnumerated)) as ut(dim3_unnest1) )           ,UNNEST(MV_TO_ARRAY(dimMultivalEnumerated)) as ut(dim3_unnest2) 
      ), UNNEST(MV_TO_ARRAY(dimMultivalEnumerated)) as ut(dim3_unnest3)  WHERE dimZipf=27 AND dim3_unnest1='Baz' AND dim3_unnest2='Hello' AND dim3_unnest3='World';
+---------+--------------+--------------+--------------+
| dimZipf | dim3_unnest1 | dim3_unnest2 | dim3_unnest3 |
+---------+--------------+--------------+--------------+
+---------+--------------+--------------+--------------+
(0 rows)

!ok
LogicalProject(dimZipf=[$0], dim3_unnest1=[CAST('Baz':VARCHAR):VARCHAR], dim3_unnest2=[$1], dim3_unnest3=[$3])
  LogicalUnnest(unnestExpr=[MV_TO_ARRAY($2)], filter=[=($0, 'World')])
    LogicalProject(dimZipf=[$1], EXPR$0=[$2], dimMultivalEnumerated0=[$0])
      LogicalUnnest(unnestExpr=[MV_TO_ARRAY($0)], filter=[=($0, 'Hello')])
        LogicalProject(dimMultivalEnumerated=[$0], dimZipf=[$1])
          LogicalUnnest(unnestExpr=[MV_TO_ARRAY($0)], filter=[=($0, 'Baz')])
            LogicalProject(dimMultivalEnumerated=[$2], dimZipf=[$8])
              LogicalFilter(condition=[=(CAST($8):INTEGER, 27)])
                LogicalTableScan(table=[[druid, lotsocolumns]])

!logicalPlan
DruidProject(dimZipf=[$0], dim3_unnest1=[CAST('Baz':VARCHAR):VARCHAR], dim3_unnest2=[$1], dim3_unnest3=[$3], druid=[logical])
  DruidUnnest(unnestExpr=[MV_TO_ARRAY($2)], filter=[=($0, 'World')])
    DruidProject(dimZipf=[$1], EXPR$0=[$2], dimMultivalEnumerated0=[$0], druid=[logical])
      DruidUnnest(unnestExpr=[MV_TO_ARRAY($0)], filter=[=($0, 'Hello')])
        DruidProject(dimMultivalEnumerated=[$0], dimZipf=[$1], druid=[logical])
          DruidUnnest(unnestExpr=[MV_TO_ARRAY($0)], filter=[=($0, 'Baz')])
            DruidProject(dimMultivalEnumerated=[$2], dimZipf=[$8], druid=[logical])
              DruidFilter(condition=[=(CAST($8):INTEGER, 27)])
                DruidTableScan(table=[[druid, lotsocolumns]], druid=[logical])

!druidPlan
{
  "queryType" : "scan",
  "dataSource" : {
    "type" : "unnest",
    "base" : {
      "type" : "unnest",
      "base" : {
        "type" : "unnest",
        "base" : {
          "type" : "filter",
          "base" : {
            "type" : "table",
            "name" : "lotsocolumns"
          },
          "filter" : {
            "type" : "equals",
            "column" : "dimZipf",
            "matchValueType" : "LONG",
            "matchValue" : 27
          }
        },
        "virtualColumn" : {
          "type" : "expression",
          "name" : "j0.unnest",
          "expression" : "mv_to_array(\"dimMultivalEnumerated\")",
          "outputType" : "ARRAY<STRING>"
        },
        "unnestFilter" : {
          "type" : "equals",
          "column" : "j0.unnest",
          "matchValueType" : "STRING",
          "matchValue" : "Baz"
        }
      },
      "virtualColumn" : {
        "type" : "expression",
        "name" : "j0.unnest",
        "expression" : "mv_to_array(\"dimMultivalEnumerated\")",
        "outputType" : "ARRAY<STRING>"
      },
      "unnestFilter" : {
        "type" : "equals",
        "column" : "j0.unnest",
        "matchValueType" : "STRING",
        "matchValue" : "Hello"
      }
    },
    "virtualColumn" : {
      "type" : "expression",
      "name" : "_j0.unnest",
      "expression" : "mv_to_array(\"dimMultivalEnumerated\")",
      "outputType" : "ARRAY<STRING>"
    },
    "unnestFilter" : {
      "type" : "equals",
      "column" : "_j0.unnest",
      "matchValueType" : "STRING",
      "matchValue" : "World"
    }
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "virtualColumns" : [ {
    "type" : "expression",
    "name" : "v0",
    "expression" : "'Baz'",
    "outputType" : "STRING"
  } ],
  "resultFormat" : "compactedList",
  "columns" : [ "dimZipf", "v0", "j0.unnest", "_j0.unnest" ],
  "columnTypes" : [ "STRING", "STRING", "STRING", "STRING" ],
  "granularity" : {
    "type" : "all"
  },
  "legacy" : false
}
!nativePlan
