!use druidtest://?numMergeBuffers=3
!set outputformat mysql

with v as (
  select cityName, count(1) as cnt from wikipedia
  where cityName = 'New York'
  group by 1
  order by 1 asc
),
e as (
  select cityName, count(1) as cnt from wikipedia
  group by 1
  order by 1 asc
)
select v.*,e.* from v inner join e on (e.cityName = v.cityName);
+------+------+--------+--------+--------+
| dim1 | dim2 | EXPR$2 | EXPR$3 | EXPR$4 |
+------+------+--------+--------+--------+
|      | a    | x      |    3.0 |      3 |
| 1    | a    | x      |   12.0 |      3 |
+------+------+--------+--------+--------+
(2 rows)

!ok
{
  "queryType" : "groupBy",
  "dataSource" : {
    "type" : "union",
    "dataSources" : [ {
      "type" : "table",
      "name" : "foo"
    }, {
      "type" : "table",
      "name" : "foo"
    }, {
      "type" : "table",
      "name" : "foo"
    } ]
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "filter" : {
    "type" : "inType",
    "column" : "dim2",
    "matchValueType" : "STRING",
    "sortedValues" : [ "a", "def" ]
  },
  "granularity" : {
    "type" : "all"
  },
  "dimensions" : [ {
    "type" : "default",
    "dimension" : "dim1",
    "outputName" : "d0",
    "outputType" : "STRING"
  }, {
    "type" : "default",
    "dimension" : "dim2",
    "outputName" : "d1",
    "outputType" : "STRING"
  } ],
  "aggregations" : [ {
    "type" : "doubleSum",
    "name" : "a0",
    "fieldName" : "m1"
  }, {
    "type" : "count",
    "name" : "a1"
  } ],
  "postAggregations" : [ {
    "type" : "expression",
    "name" : "p0",
    "expression" : "'x'",
    "outputType" : "STRING"
  } ],
  "limitSpec" : {
    "type" : "NoopLimitSpec"
  }
}
!nativePlan
LogicalProject(dim1=[$0], dim2=[$1], EXPR$2=['x'], EXPR$3=[$2], EXPR$4=[$3])
  LogicalAggregate(group=[{0, 1}], EXPR$3=[SUM($2)], EXPR$4=[COUNT()])
    LogicalProject(dim1=[$1], dim2=[$2], m1=[$5])
      LogicalFilter(condition=[OR(=($2, 'a'), =($2, 'def'))])
        LogicalUnion(all=[true])
          LogicalUnion(all=[true])
            LogicalProject(__time=[$0], dim1=[$1], dim2=[$2], dim3=[$3], cnt=[$4], m1=[$5], m2=[$6], unique_dim1=[$7])
              LogicalTableScan(table=[[druid, foo]])
            LogicalProject(__time=[$0], dim1=[$1], dim2=[$2], dim3=[$3], cnt=[$4], m1=[$5], m2=[$6], unique_dim1=[$7])
              LogicalTableScan(table=[[druid, foo]])
          LogicalProject(__time=[$0], dim1=[$1], dim2=[$2], dim3=[$3], cnt=[$4], m1=[$5], m2=[$6], unique_dim1=[$7])
            LogicalTableScan(table=[[druid, foo]])

!convertedPlan
