!set useApproximateCountDistinct false
!set useGroupingSetForExactDistinct true
!use druidtest://?numMergeBuffers=3
!set outputformat mysql

SELECT
  TIME_FLOOR(__time, 'PT1H') as t,
  COUNT(DISTINCT CASE WHEN channel = '#it.wikipedia' THEN user END) as cnt_case,
  COUNT(DISTINCT user) FILTER (WHERE channel = '#it.wikipedia') as cnt_filter,
  COUNT(DISTINCT user) as cnt
FROM "wikipedia"
GROUP BY 1;
+---------------------+----------+------------+-----+
| t                   | cnt_case | cnt_filter | cnt |
+---------------------+----------+------------+-----+
| 2015-09-12 00:00:00 |        5 |          5 | 149 |
| 2015-09-12 01:00:00 |       14 |         14 | 506 |
| 2015-09-12 02:00:00 |       10 |         10 | 459 |
| 2015-09-12 03:00:00 |       10 |         10 | 427 |
| 2015-09-12 04:00:00 |        6 |          6 | 427 |
| 2015-09-12 05:00:00 |       10 |         10 | 448 |
| 2015-09-12 06:00:00 |       13 |         13 | 498 |
| 2015-09-12 07:00:00 |       21 |         21 | 574 |
| 2015-09-12 08:00:00 |       36 |         36 | 707 |
| 2015-09-12 09:00:00 |       44 |         44 | 770 |
| 2015-09-12 10:00:00 |       37 |         37 | 785 |
| 2015-09-12 11:00:00 |       40 |         40 | 799 |
| 2015-09-12 12:00:00 |       45 |         45 | 855 |
| 2015-09-12 13:00:00 |       44 |         44 | 905 |
| 2015-09-12 14:00:00 |       48 |         48 | 886 |
| 2015-09-12 15:00:00 |       37 |         37 | 949 |
| 2015-09-12 16:00:00 |       50 |         50 | 969 |
| 2015-09-12 17:00:00 |       38 |         38 | 941 |
| 2015-09-12 18:00:00 |       40 |         40 | 925 |
| 2015-09-12 19:00:00 |       32 |         32 | 930 |
| 2015-09-12 20:00:00 |       31 |         31 | 882 |
| 2015-09-12 21:00:00 |       40 |         40 | 861 |
| 2015-09-12 22:00:00 |       28 |         28 | 716 |
| 2015-09-12 23:00:00 |       20 |         20 | 631 |
+---------------------+----------+------------+-----+
(24 rows)

!ok

LogicalAggregate(group=[{0}], cnt_case=[COUNT(DISTINCT $1)], cnt_filter=[COUNT(DISTINCT $2) FILTER $3], cnt=[COUNT(DISTINCT $2)])
  LogicalProject(t=[TIME_FLOOR($0, 'PT1H')], $f1=[CASE(=($1, '#it.wikipedia'), $16, null:VARCHAR)], user=[$16], $f3=[IS TRUE(=($1, '#it.wikipedia'))])
    LogicalTableScan(table=[[druid, wikipedia]])

!convertedPlan

LogicalAggregate(group=[{0}], cnt_case=[COUNT(DISTINCT $1)], cnt_filter=[COUNT(DISTINCT $2) FILTER $3], cnt=[COUNT(DISTINCT $2)])
  LogicalProject(t=[TIME_FLOOR($0, 'PT1H')], $f1=[CASE(=($1, '#it.wikipedia'), $16, null:VARCHAR)], user=[$16], $f3=[IS TRUE(=($1, '#it.wikipedia'))])
    LogicalTableScan(table=[[druid, wikipedia]])

!logicalPlan

{
  "queryType" : "groupBy",
  "dataSource" : {
    "type" : "query",
    "query" : {
      "queryType" : "groupBy",
      "dataSource" : {
        "type" : "table",
        "name" : "wikipedia"
      },
      "intervals" : {
        "type" : "intervals",
        "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
      },
      "virtualColumns" : [ {
        "type" : "expression",
        "name" : "v0",
        "expression" : "timestamp_floor(\"__time\",'PT1H',null,'UTC')",
        "outputType" : "LONG"
      }, {
        "type" : "expression",
        "name" : "v1",
        "expression" : "istrue((\"channel\" == '#it.wikipedia'))",
        "outputType" : "LONG"
      } ],
      "granularity" : {
        "type" : "all"
      },
      "dimensions" : [ {
        "type" : "default",
        "dimension" : "v0",
        "outputName" : "d0",
        "outputType" : "LONG"
      }, {
        "type" : "default",
        "dimension" : "user",
        "outputName" : "d1",
        "outputType" : "STRING"
      }, {
        "type" : "default",
        "dimension" : "v1",
        "outputName" : "d2",
        "outputType" : "LONG"
      } ],
      "aggregations" : [ {
        "type" : "grouping",
        "name" : "a0",
        "groupings" : [ "v0", "user", "v1" ]
      } ],
      "limitSpec" : {
        "type" : "NoopLimitSpec"
      },
      "subtotalsSpec" : [ [ "d0", "d1", "d2" ], [ "d0", "d1" ] ]
    }
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "granularity" : {
    "type" : "all"
  },
  "dimensions" : [ {
    "type" : "default",
    "dimension" : "d0",
    "outputName" : "_d0",
    "outputType" : "LONG"
  } ],
  "aggregations" : [ {
    "type" : "filtered",
    "aggregator" : {
      "type" : "count",
      "name" : "_a0"
    },
    "filter" : {
      "type" : "and",
      "fields" : [ {
        "type" : "not",
        "field" : {
          "type" : "null",
          "column" : "d1"
        }
      }, {
        "type" : "equals",
        "column" : "a0",
        "matchValueType" : "LONG",
        "matchValue" : 0
      }, {
        "type" : "expression",
        "expression" : "\"d2\""
      } ]
    },
    "name" : "_a0"
  }, {
    "type" : "filtered",
    "aggregator" : {
      "type" : "count",
      "name" : "_a1"
    },
    "filter" : {
      "type" : "and",
      "fields" : [ {
        "type" : "not",
        "field" : {
          "type" : "null",
          "column" : "d1"
        }
      }, {
        "type" : "equals",
        "column" : "a0",
        "matchValueType" : "LONG",
        "matchValue" : 1
      } ]
    },
    "name" : "_a1"
  } ],
  "limitSpec" : {
    "type" : "NoopLimitSpec"
  }
}
!nativePlan
