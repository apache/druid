!set plannerStrategy DECOUPLED
!use druidtest://?numMergeBuffers=3
!set outputformat mysql

SELECT
  (TIME_FLOOR("__time", 'P1D', NULL, 'Asia/Calcutta')) AS "__time",
  SUM(CASE WHEN "countryIsoCode" IN ('US') THEN added  ELSE 0 END) AS "CASE_LONG",
  SUM(CASE WHEN "countryIsoCode" IN ('US') THEN CAST(added as double)  ELSE 0.0 END) AS "CASE_DOUBLE",
  CAST(SUM(CASE WHEN "countryIsoCode" IN ('US') THEN added ELSE 0 END) as double) AS "CASE_DOUBLE2",
  SUM(CAST(added as double)) AS "CASE_DOUBLE3"
FROM "wikipedia"
WHERE ("__time" >= '2024-10-23T09:00:00.000Z' AND "__time" < '2024-10-30T11:00:00.000Z')
GROUP BY 1
ORDER BY "__time"
LIMIT 10001;
+--------+-----------+-------------+--------------+--------------+
| __time | CASE_LONG | CASE_DOUBLE | CASE_DOUBLE2 | CASE_DOUBLE3 |
+--------+-----------+-------------+--------------+--------------+
+--------+-----------+-------------+--------------+--------------+
(0 rows)

!ok
LogicalSort(sort0=[$0], dir0=[ASC], fetch=[10001])
  LogicalProject(__time=[$0], CASE_LONG=[$1], CASE_DOUBLE=[$2], CASE_DOUBLE2=[CAST($1):DOUBLE], CASE_DOUBLE3=[$3])
    LogicalAggregate(group=[{0}], CASE_LONG=[SUM($1)], CASE_DOUBLE=[SUM($2)], CASE_DOUBLE3=[SUM($3)])
      LogicalProject(__time=[TIME_FLOOR($0, 'P1D', null:TIMESTAMP(3), 'Asia/Calcutta')], $f1=[CASE(=($4, 'US'), $18, 0:BIGINT)], $f2=[CASE(=($4, 'US'), CAST($18):DOUBLE, 0.0:DOUBLE)], $f3=[CAST($18):DOUBLE])
        LogicalFilter(condition=[AND(>=($0, CAST('2024-10-23T09:00:00.000Z'):TIMESTAMP(3) NOT NULL), <($0, CAST('2024-10-30T11:00:00.000Z'):TIMESTAMP(3) NOT NULL))])
          LogicalTableScan(table=[[druid, wikipedia]])

!convertedPlan
LogicalProject(__time=[$0], CASE_LONG=[$1], CASE_DOUBLE=[$2], CASE_DOUBLE2=[CAST($1):DOUBLE], CASE_DOUBLE3=[$3])
  LogicalSort(sort0=[$0], dir0=[ASC], fetch=[10001])
    LogicalAggregate(group=[{0}], CASE_LONG=[SUM($1)], CASE_DOUBLE=[SUM($2)], CASE_DOUBLE3=[SUM($3)])
      LogicalProject(__time=[TIME_FLOOR($0, 'P1D', null:TIMESTAMP(3), 'Asia/Calcutta')], $f1=[CASE(=($4, 'US'), $18, 0:BIGINT)], $f2=[CASE(=($4, 'US'), CAST($18):DOUBLE, 0.0:DOUBLE)], $f3=[CAST($18):DOUBLE])
        LogicalFilter(condition=[SEARCH($0, Sarg[[2024-10-23 09:00:00:TIMESTAMP(3)..2024-10-30 11:00:00:TIMESTAMP(3))]:TIMESTAMP(3))])
          LogicalTableScan(table=[[druid, wikipedia]])

!logicalPlan
DruidProject(__time=[$0], CASE_LONG=[$1], CASE_DOUBLE=[$2], CASE_DOUBLE2=[CAST($1):DOUBLE], CASE_DOUBLE3=[$3], druid=[logical])
  DruidSort(sort0=[$0], dir0=[ASC], fetch=[10001], druid=[logical])
    DruidAggregate(group=[{0}], CASE_LONG=[SUM($1)], CASE_DOUBLE=[SUM($2)], CASE_DOUBLE3=[SUM($3)], druid=[logical])
      DruidProject(__time=[TIME_FLOOR($0, 'P1D', null:TIMESTAMP(3), 'Asia/Calcutta')], $f1=[CASE(=($4, 'US'), $18, 0:BIGINT)], $f2=[CASE(=($4, 'US'), CAST($18):DOUBLE, 0.0:DOUBLE)], $f3=[CAST($18):DOUBLE], druid=[logical])
        DruidFilter(condition=[SEARCH($0, Sarg[[2024-10-23 09:00:00:TIMESTAMP(3)..2024-10-30 11:00:00:TIMESTAMP(3))]:TIMESTAMP(3))])
          DruidTableScan(table=[[druid, wikipedia]], druid=[logical])

!druidPlan
{
  "queryType" : "timeseries",
  "dataSource" : {
    "type" : "table",
    "name" : "wikipedia"
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "2024-10-23T09:00:00.000Z/2024-10-30T11:00:00.000Z" ]
  },
  "virtualColumns" : [ {
    "type" : "expression",
    "name" : "v1",
    "expression" : "case_searched((\"countryIsoCode\" == 'US'),\"added\",0)",
    "outputType" : "LONG"
  }, {
    "type" : "expression",
    "name" : "v2",
    "expression" : "case_searched((\"countryIsoCode\" == 'US'),CAST(\"added\", 'DOUBLE'),0.0)",
    "outputType" : "DOUBLE"
  } ],
  "granularity" : {
    "type" : "period",
    "period" : "P1D",
    "timeZone" : "Asia/Kolkata",
    "origin" : null
  },
  "aggregations" : [ {
    "type" : "longSum",
    "name" : "a0",
    "fieldName" : "v1"
  }, {
    "type" : "doubleSum",
    "name" : "a1",
    "fieldName" : "v2"
  }, {
    "type" : "doubleSum",
    "name" : "a2",
    "fieldName" : "added"
  } ],
  "postAggregations" : [ {
    "type" : "expression",
    "name" : "s0",
    "expression" : "CAST(\"a0\", 'DOUBLE')",
    "outputType" : "DOUBLE"
  } ],
  "limit" : 10001
}
!nativePlan

