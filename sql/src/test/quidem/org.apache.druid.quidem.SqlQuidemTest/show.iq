!set enableWindowing true
!set debug true
!use druidtest://?numMergeBuffers=3
!set outputformat mysql

with
 main as (select dim1 as pickup,count(*) as cnt from foo group by 1 order by 2 desc limit 200),
 compare0 as (select dim1 as pickup,count(*) as cnt from numfoo group by 1 order by 2 desc limit 200)
SELECT  main.pickup, main.cnt, compare0.cnt, SUM(main.cnt) OVER (ORDER BY main.pickup) 
from main left join compare0 on main.pickup is not distinct from compare0.pickup;
LogicalWindow(window#0=[window(order by [0] aggs [SUM($1)])])
  LogicalProject(pickup=[$0], cnt=[$1], cnt0=[$3])
    LogicalJoin(condition=[IS NOT DISTINCT FROM($0, $2)], joinType=[left])
      LogicalSort(sort0=[$1], dir0=[DESC], fetch=[200])
        LogicalAggregate(group=[{0}], cnt=[COUNT()])
          LogicalProject(pickup=[$1])
            LogicalTableScan(table=[[druid, foo]])
      LogicalSort(sort0=[$1], dir0=[DESC], fetch=[200])
        LogicalAggregate(group=[{0}], cnt=[COUNT()])
          LogicalProject(pickup=[$1])
            LogicalTableScan(table=[[druid, numfoo]])

!druidPlan
{
  "queryType" : "windowOperator",
  "dataSource" : {
    "type" : "query",
    "query" : {
      "queryType" : "scan",
      "dataSource" : {
        "type" : "join",
        "left" : {
          "type" : "query",
          "query" : {
            "queryType" : "topN",
            "dataSource" : {
              "type" : "table",
              "name" : "foo"
            },
            "dimension" : {
              "type" : "default",
              "dimension" : "dim1",
              "outputName" : "d0",
              "outputType" : "STRING"
            },
            "metric" : {
              "type" : "numeric",
              "metric" : "a0"
            },
            "threshold" : 200,
            "intervals" : {
              "type" : "intervals",
              "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
            },
            "granularity" : {
              "type" : "all"
            },
            "aggregations" : [ {
              "type" : "count",
              "name" : "a0"
            } ],
            "context" : {
              "debug" : "true",
              "enableWindowing" : "true",
              "sqlQueryId" : "f2dea824-b9b1-423e-8f01-2ed8bdc6c46d",
              "sqlStringifyArrays" : false
            }
          }
        },
        "right" : {
          "type" : "query",
          "query" : {
            "queryType" : "topN",
            "dataSource" : {
              "type" : "table",
              "name" : "numfoo"
            },
            "dimension" : {
              "type" : "default",
              "dimension" : "dim1",
              "outputName" : "_d0",
              "outputType" : "STRING"
            },
            "metric" : {
              "type" : "numeric",
              "metric" : "a0"
            },
            "threshold" : 200,
            "intervals" : {
              "type" : "intervals",
              "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
            },
            "granularity" : {
              "type" : "all"
            },
            "aggregations" : [ {
              "type" : "count",
              "name" : "a0"
            } ],
            "context" : {
              "debug" : "true",
              "enableWindowing" : "true",
              "sqlQueryId" : "f2dea824-b9b1-423e-8f01-2ed8bdc6c46d",
              "sqlStringifyArrays" : false
            }
          }
        },
        "rightPrefix" : "j0.",
        "condition" : "notdistinctfrom(\"d0\",\"j0._d0\")",
        "joinType" : "LEFT"
      },
      "intervals" : {
        "type" : "intervals",
        "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
      },
      "resultFormat" : "compactedList",
      "columns" : [ "a0", "d0", "j0.a0" ],
      "context" : {
        "debug" : "true",
        "enableWindowing" : "true",
        "sqlQueryId" : "f2dea824-b9b1-423e-8f01-2ed8bdc6c46d",
        "sqlStringifyArrays" : false
      },
      "columnTypes" : [ "LONG", "STRING", "LONG" ],
      "granularity" : {
        "type" : "all"
      },
      "legacy" : false
    }
  },
  "intervals" : {
    "type" : "LegacySegmentSpec",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "context" : {
    "debug" : "true",
    "enableWindowing" : "true",
    "sqlQueryId" : "f2dea824-b9b1-423e-8f01-2ed8bdc6c46d",
    "sqlStringifyArrays" : false
  },
  "outputSignature" : [ {
    "name" : "d0",
    "type" : "STRING"
  }, {
    "name" : "a0",
    "type" : "LONG"
  }, {
    "name" : "j0.a0",
    "type" : "LONG"
  }, {
    "name" : "w0",
    "type" : "LONG"
  } ],
  "operatorDefinition" : [ {
    "type" : "naiveSort",
    "columns" : [ {
      "column" : "d0",
      "direction" : "ASC"
    } ]
  }, {
    "type" : "naivePartition",
    "partitionColumns" : [ ]
  }, {
    "type" : "window",
    "processor" : {
      "type" : "framedAgg",
      "frame" : {
        "type" : "groups",
        "lowerOffset" : null,
        "upperOffset" : 0,
        "orderByColumns" : [ "d0" ]
      },
      "aggregations" : [ {
        "type" : "longSum",
        "name" : "w0",
        "fieldName" : "a0"
      } ]
    }
  } ],
  "leafOperators" : [ ],
  "granularity" : {
    "type" : "all"
  }
}
!nativePlan
+--------+-----+-----+--------+
| pickup | cnt | cnt | EXPR$2 |
+--------+-----+-----+--------+
|        |   1 |   1 |      1 |
| 1      |   1 |   1 |      2 |
| 10.1   |   1 |   1 |      3 |
| 2      |   1 |   1 |      4 |
| abc    |   1 |   1 |      5 |
| def    |   1 |   1 |      6 |
+--------+-----+-----+--------+
(6 rows)

!ok
!set plannerStrategy DECOUPLED
!use druidtest://?numMergeBuffers=3

with
 main as (select dim1 as pickup,count(*) as cnt from foo group by 1 order by 2 desc limit 200),
 compare0 as (select dim1 as pickup,count(*) as cnt from numfoo group by 1 order by 2 desc limit 200)
SELECT  main.pickup, main.cnt, compare0.cnt, SUM(main.cnt) OVER (ORDER BY main.pickup) 
from main left join compare0 on main.pickup is not distinct from compare0.pickup;
DruidWindow(window#0=[window(order by [0] aggs [SUM($1)])])
  DruidProject(pickup=[$0], cnt=[$1], cnt0=[$3], druid=[logical])
    DruidJoin(condition=[IS NOT DISTINCT FROM($0, $2)], joinType=[left])
      DruidSort(sort0=[$1], dir0=[DESC], fetch=[200], druid=[logical])
        DruidAggregate(group=[{1}], cnt=[COUNT()], druid=[logical])
          DruidTableScan(table=[[druid, foo]], druid=[logical])
      DruidSort(sort0=[$1], dir0=[DESC], fetch=[200], druid=[logical])
        DruidAggregate(group=[{1}], cnt=[COUNT()], druid=[logical])
          DruidTableScan(table=[[druid, numfoo]], druid=[logical])

!druidPlan
{
  "queryType" : "windowOperator",
  "dataSource" : {
    "type" : "join",
    "left" : {
      "type" : "query",
      "query" : {
        "queryType" : "topN",
        "dataSource" : {
          "type" : "table",
          "name" : "foo"
        },
        "dimension" : {
          "type" : "default",
          "dimension" : "dim1",
          "outputName" : "d0",
          "outputType" : "STRING"
        },
        "metric" : {
          "type" : "numeric",
          "metric" : "a0"
        },
        "threshold" : 200,
        "intervals" : {
          "type" : "intervals",
          "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
        },
        "granularity" : {
          "type" : "all"
        },
        "aggregations" : [ {
          "type" : "count",
          "name" : "a0"
        } ],
        "context" : {
          "debug" : "true",
          "enableWindowing" : "true",
          "outputformat" : "MYSQL",
          "plannerStrategy" : "DECOUPLED",
          "sqlQueryId" : "82ec0abd-1c78-40c3-8510-96850b00a5a7",
          "sqlStringifyArrays" : false
        }
      }
    },
    "right" : {
      "type" : "query",
      "query" : {
        "queryType" : "topN",
        "dataSource" : {
          "type" : "table",
          "name" : "numfoo"
        },
        "dimension" : {
          "type" : "default",
          "dimension" : "dim1",
          "outputName" : "_d0",
          "outputType" : "STRING"
        },
        "metric" : {
          "type" : "numeric",
          "metric" : "a0"
        },
        "threshold" : 200,
        "intervals" : {
          "type" : "intervals",
          "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
        },
        "granularity" : {
          "type" : "all"
        },
        "aggregations" : [ {
          "type" : "count",
          "name" : "a0"
        } ],
        "context" : {
          "debug" : "true",
          "enableWindowing" : "true",
          "outputformat" : "MYSQL",
          "plannerStrategy" : "DECOUPLED",
          "sqlQueryId" : "82ec0abd-1c78-40c3-8510-96850b00a5a7",
          "sqlStringifyArrays" : false
        }
      }
    },
    "rightPrefix" : "j0.",
    "condition" : "notdistinctfrom(\"d0\",\"j0._d0\")",
    "joinType" : "LEFT"
  },
  "intervals" : {
    "type" : "LegacySegmentSpec",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "context" : {
    "debug" : "true",
    "enableWindowing" : "true",
    "outputformat" : "MYSQL",
    "plannerStrategy" : "DECOUPLED",
    "sqlQueryId" : "82ec0abd-1c78-40c3-8510-96850b00a5a7",
    "sqlStringifyArrays" : false
  },
  "outputSignature" : [ {
    "name" : "d0",
    "type" : "STRING"
  }, {
    "name" : "a0",
    "type" : "LONG"
  }, {
    "name" : "j0.a0",
    "type" : "LONG"
  }, {
    "name" : "w0",
    "type" : "LONG"
  } ],
  "operatorDefinition" : [ {
    "type" : "naiveSort",
    "columns" : [ {
      "column" : "d0",
      "direction" : "ASC"
    } ]
  }, {
    "type" : "naivePartition",
    "partitionColumns" : [ ]
  }, {
    "type" : "window",
    "processor" : {
      "type" : "framedAgg",
      "frame" : {
        "type" : "groups",
        "lowerOffset" : null,
        "upperOffset" : 0,
        "orderByColumns" : [ "d0" ]
      },
      "aggregations" : [ {
        "type" : "longSum",
        "name" : "w0",
        "fieldName" : "a0"
      } ]
    }
  } ],
  "leafOperators" : [ ],
  "granularity" : {
    "type" : "all"
  }
}
!nativePlan
# !ok
