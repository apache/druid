!set enableWindowing true
!set debug true
!use druidtest://?numMergeBuffers=3
!set outputformat mysql

with
 main as (select dim1 as pickup,count(*) as cnt from foo group by 1 order by 2 desc limit 200),
 compare0 as (select dim1 as pickup,count(*) as cnt from numfoo group by 1 order by 2 desc limit 200)
SELECT  main.pickup, main.cnt, compare0.cnt, SUM(main.cnt) OVER (ORDER BY main.pickup) 
from main left join compare0 on main.pickup is not distinct from compare0.pickup;
LogicalWindow(window#0=[window(order by [0] aggs [SUM($1)])])
  LogicalProject(pickup=[$0], cnt=[$1], cnt0=[$3])
    LogicalJoin(condition=[IS NOT DISTINCT FROM($0, $2)], joinType=[left])
      LogicalSort(sort0=[$1], dir0=[DESC], fetch=[200])
        LogicalAggregate(group=[{0}], cnt=[COUNT()])
          LogicalProject(pickup=[$1])
            LogicalTableScan(table=[[druid, foo]])
      LogicalSort(sort0=[$1], dir0=[DESC], fetch=[200])
        LogicalAggregate(group=[{0}], cnt=[COUNT()])
          LogicalProject(pickup=[$1])
            LogicalTableScan(table=[[druid, numfoo]])

!druidPlan
!nativePlan
+--------+-----+-----+--------+
| pickup | cnt | cnt | EXPR$2 |
+--------+-----+-----+--------+
|        |   1 |   1 |      1 |
| 1      |   1 |   1 |      2 |
| 10.1   |   1 |   1 |      3 |
| 2      |   1 |   1 |      4 |
| abc    |   1 |   1 |      5 |
| def    |   1 |   1 |      6 |
+--------+-----+-----+--------+
(6 rows)

!ok
!set plannerStrategy DECOUPLED
!use druidtest://?numMergeBuffers=3


with
 main as (select dim1 as pickup,count(*) as cnt from foo group by 1 order by 2 desc limit 200),
 compare0 as (select dim1 as pickup,count(*) as cnt from numfoo group by 1 order by 2 desc limit 200)
SELECT  main.pickup, main.cnt, compare0.cnt, SUM(main.cnt) OVER (ORDER BY main.pickup) 
from main left join compare0 on main.pickup is not distinct from compare0.pickup;
DruidWindow(window#0=[window(order by [0] aggs [SUM($1)])])
  DruidProject(pickup=[$0], cnt=[$1], cnt0=[$3], druid=[logical])
    DruidJoin(condition=[IS NOT DISTINCT FROM($0, $2)], joinType=[left])
      DruidSort(sort0=[$1], dir0=[DESC], fetch=[200], druid=[logical])
        DruidAggregate(group=[{1}], cnt=[COUNT()], druid=[logical])
          DruidTableScan(table=[[druid, foo]], druid=[logical])
      DruidSort(sort0=[$1], dir0=[DESC], fetch=[200], druid=[logical])
        DruidAggregate(group=[{1}], cnt=[COUNT()], druid=[logical])
          DruidTableScan(table=[[druid, numfoo]], druid=[logical])

!druidPlan
# !nativePlan
# !ok
