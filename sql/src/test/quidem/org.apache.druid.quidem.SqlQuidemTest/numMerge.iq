!use druidtest://?numMergeBuffers=3
!set outputformat mysql

SELECT
dim1, dim2, SUM(m1), COUNT(*)
FROM (SELECT * FROM foo UNION ALL SELECT * FROM foo UNION ALL SELECT * FROM foo)
WHERE dim2 = 'a' OR dim2 = 'def'
GROUP BY 1, 2;
+------+------+--------+--------+
| dim1 | dim2 | EXPR$2 | EXPR$3 |
+------+------+--------+--------+
|      | a    |    3.0 |      3 |
| 1    | a    |   12.0 |      3 |
+------+------+--------+--------+
(2 rows)

!ok
{
  "queryType" : "groupBy",
  "dataSource" : {
    "type" : "union",
    "dataSources" : [ {
      "type" : "table",
      "name" : "foo"
    }, {
      "type" : "table",
      "name" : "foo"
    }, {
      "type" : "table",
      "name" : "foo"
    } ]
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "filter" : {
    "type" : "inType",
    "column" : "dim2",
    "matchValueType" : "STRING",
    "sortedValues" : [ "a", "def" ]
  },
  "granularity" : {
    "type" : "all"
  },
  "dimensions" : [ {
    "type" : "default",
    "dimension" : "dim1",
    "outputName" : "d0",
    "outputType" : "STRING"
  }, {
    "type" : "default",
    "dimension" : "dim2",
    "outputName" : "d1",
    "outputType" : "STRING"
  } ],
  "aggregations" : [ {
    "type" : "doubleSum",
    "name" : "a0",
    "fieldName" : "m1"
  }, {
    "type" : "count",
    "name" : "a1"
  } ],
  "limitSpec" : {
    "type" : "NoopLimitSpec"
  }
}
!nativePlan
LogicalAggregate(group=[{0, 1}], EXPR$2=[SUM($2)], EXPR$3=[COUNT()])
  LogicalProject(dim1=[$1], dim2=[$2], m1=[$5])
    LogicalFilter(condition=[OR(=($2, 'a'), =($2, 'def'))])
      LogicalUnion(all=[true])
        LogicalUnion(all=[true])
          LogicalProject(__time=[$0], dim1=[$1], dim2=[$2], dim3=[$3], cnt=[$4], m1=[$5], m2=[$6], unique_dim1=[$7])
            LogicalTableScan(table=[[druid, foo]])
          LogicalProject(__time=[$0], dim1=[$1], dim2=[$2], dim3=[$3], cnt=[$4], m1=[$5], m2=[$6], unique_dim1=[$7])
            LogicalTableScan(table=[[druid, foo]])
        LogicalProject(__time=[$0], dim1=[$1], dim2=[$2], dim3=[$3], cnt=[$4], m1=[$5], m2=[$6], unique_dim1=[$7])
          LogicalTableScan(table=[[druid, foo]])

!convertedPlan
