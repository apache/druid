# testGroupByTimeFloorAndDimOnGroupByTimeFloorAndDim@NullHandling=sql case-crc:de79d440
# quidem testcase reason: IMPROVED_PLAN
!set debug true
!set defaultTimeout 300000
!set maxScatterGatherBytes 9223372036854775807
!set plannerStrategy DECOUPLED
!set sqlCurrentTimestamp 2000-01-01T00:00:00Z
!set sqlQueryId dummy
!set outputformat mysql
!use druidtest:///
SELECT dim2, time_floor(gran, 'P1M') gran, sum(s)
FROM (SELECT time_floor(__time, 'P1D') AS gran, dim2, sum(m1) as s FROM druid.foo GROUP BY 1, 2 HAVING sum(m1) > 1) AS x
GROUP BY 1, 2
ORDER BY dim2, gran desc;
+------+-------------------------+--------+
| dim2 | gran                    | EXPR$2 |
+------+-------------------------+--------+
|      | 2001-01-01 00:00:00.000 |    6.0 |
|      | 2000-01-01 00:00:00.000 |    2.0 |
|      | 2000-01-01 00:00:00.000 |    3.0 |
| a    | 2001-01-01 00:00:00.000 |    4.0 |
| abc  | 2001-01-01 00:00:00.000 |    5.0 |
+------+-------------------------+--------+
(5 rows)

!ok
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[DESC])
  LogicalAggregate(group=[{0, 1}], EXPR$2=[SUM($2)])
    LogicalProject(dim2=[$1], gran=[TIME_FLOOR($0, 'P1M')], s=[$2])
      LogicalFilter(condition=[>($2, 1)])
        LogicalAggregate(group=[{0, 1}], s=[SUM($2)])
          LogicalProject(gran=[TIME_FLOOR($0, 'P1D')], dim2=[$2], m1=[$5])
            LogicalTableScan(table=[[druid, foo]])

!logicalPlan
DruidSort(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[DESC], druid=[logical])
  DruidAggregate(group=[{0, 1}], EXPR$2=[SUM($2)], druid=[logical])
    DruidProject(dim2=[$1], gran=[TIME_FLOOR($0, 'P1M')], s=[$2], druid=[logical])
      DruidFilter(condition=[>($2, 1)])
        DruidAggregate(group=[{0, 1}], s=[SUM($2)], druid=[logical])
          DruidProject(gran=[TIME_FLOOR($0, 'P1D')], dim2=[$2], m1=[$5], druid=[logical])
            DruidTableScan(table=[[druid, foo]], druid=[logical])

!druidPlan
