# testGroupByWithLiteralInSubqueryGrouping case-crc:933d8c09
!set sqlQueryId dummy
!set sqlCurrentTimestamp 2000-01-01T00:00:00Z
!set defaultTimeout 300000
!set maxScatterGatherBytes 9223372036854775807
!set plannerStrategy DECOUPLED
!set debug true
!set outputformat mysql
!use druidtest:///
SELECT 
   t1, t2
  FROM
   ( SELECT
     'dummy' as t1,
     CASE
       WHEN 
         dim4 = 'b'
       THEN dim4
       ELSE NULL
     END AS t2
     FROM
       numfoo
     GROUP BY
       dim4
   )
 GROUP BY
   t1,t2
;
+-------+----+
| t1    | t2 |
+-------+----+
| dummy | b  |
| dummy |    |
+-------+----+
(2 rows)

!ok
LogicalAggregate(group=[{0, 1}])
  LogicalProject(t1=['dummy'], t2=[CASE(=($0, 'b'), $0, null:VARCHAR)])
    LogicalAggregate(group=[{0}])
      LogicalProject(dim4=[$4])
        LogicalTableScan(table=[[druid, numfoo]])

!logicalPlan
DruidProject(t1=['dummy'], t2=[$0], druid=[logical])
  DruidAggregate(group=[{0}], druid=[logical])
    DruidProject(t2=[CASE(=($0, 'b'), $0, null:VARCHAR)], druid=[logical])
      DruidAggregate(group=[{4}], druid=[logical])
        DruidTableScan(table=[[druid, numfoo]], druid=[logical])

!druidPlan
{
  "queryType" : "groupBy",
  "dataSource" : {
    "type" : "query",
    "query" : {
      "queryType" : "groupBy",
      "dataSource" : {
        "type" : "table",
        "name" : "numfoo"
      },
      "intervals" : {
        "type" : "intervals",
        "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
      },
      "granularity" : {
        "type" : "all"
      },
      "dimensions" : [ {
        "type" : "default",
        "dimension" : "dim4",
        "outputName" : "_d0",
        "outputType" : "STRING"
      } ],
      "limitSpec" : {
        "type" : "NoopLimitSpec"
      }
    }
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "virtualColumns" : [ {
    "type" : "expression",
    "name" : "v0",
    "expression" : "case_searched((\"_d0\" == 'b'),\"_d0\",null)",
    "outputType" : "STRING"
  } ],
  "granularity" : {
    "type" : "all"
  },
  "dimensions" : [ {
    "type" : "default",
    "dimension" : "v0",
    "outputName" : "d0",
    "outputType" : "STRING"
  } ],
  "postAggregations" : [ {
    "type" : "expression",
    "name" : "p0",
    "expression" : "'dummy'",
    "outputType" : "STRING"
  } ],
  "limitSpec" : {
    "type" : "NoopLimitSpec"
  }
}
!nativePlan
