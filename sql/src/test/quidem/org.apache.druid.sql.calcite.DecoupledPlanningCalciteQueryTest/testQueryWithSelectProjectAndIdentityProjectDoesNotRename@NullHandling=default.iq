# testQueryWithSelectProjectAndIdentityProjectDoesNotRename@NullHandling=default case-crc:5a66a3be
# quidem testcase reason: SLIGHTLY_WORSE_PLAN
!set debug true
!set defaultTimeout 300000
!set maxScatterGatherBytes 9223372036854775807
!set plannerStrategy DECOUPLED
!set sqlCurrentTimestamp 2000-01-01T00:00:00Z
!set sqlQueryId dummy
!set useApproximateCountDistinct false
!set useGroupingSetForExactDistinct true
!set outputformat mysql
!use druidtest:///?numMergeBuffers=3
SELECT
(SUM(CASE WHEN (TIMESTAMP '2000-01-04 17:00:00'<=__time AND __time<TIMESTAMP '2022-01-05 17:00:00') THEN 1 ELSE 0 END)*1.0/COUNT(DISTINCT CASE WHEN (TIMESTAMP '2000-01-04 17:00:00'<=__time AND __time<TIMESTAMP '2022-01-05 17:00:00') THEN dim1 END))
FROM druid.foo
GROUP BY ();
+--------+
| EXPR$0 |
+--------+
|    1.0 |
+--------+
(1 row)

!ok
LogicalProject(EXPR$0=[/(CAST($0):DECIMAL(19, 1), $1)])
  LogicalAggregate(group=[{}], agg#0=[MIN($1) FILTER $3], agg#1=[COUNT($0) FILTER $2])
    LogicalProject($f1=[$0], $f0=[$1], $g_0=[=($2, 0)], $g_1=[=($2, 1)])
      LogicalAggregate(group=[{1}], groups=[[{1}, {}]], $f0=[SUM($0)], $g=[GROUPING($1)])
        LogicalProject($f0=[CASE(SEARCH($0, Sarg[[2000-01-04 17:00:00..2022-01-05 17:00:00)]), 1, 0)], $f1=[CASE(SEARCH($0, Sarg[[2000-01-04 17:00:00..2022-01-05 17:00:00)]), $1, null:VARCHAR)])
          LogicalTableScan(table=[[druid, foo]])

!logicalPlan
DruidProject(EXPR$0=[/(CAST($0):DECIMAL(19, 1), $1)], druid=[logical])
  DruidAggregate(group=[{}], agg#0=[MIN($1) FILTER $3], agg#1=[COUNT($0) FILTER $2], druid=[logical])
    DruidProject($f1=[$0], $f0=[$1], $g_0=[=($2, 0)], $g_1=[=($2, 1)], druid=[logical])
      DruidAggregate(group=[{1}], groups=[[{1}, {}]], $f0=[SUM($0)], $g=[GROUPING($1)], druid=[logical])
        DruidProject($f0=[CASE(SEARCH($0, Sarg[[2000-01-04 17:00:00..2022-01-05 17:00:00)]), 1, 0)], $f1=[CASE(SEARCH($0, Sarg[[2000-01-04 17:00:00..2022-01-05 17:00:00)]), $1, null:VARCHAR)], druid=[logical])
          DruidTableScan(table=[[druid, foo]], druid=[logical])

!druidPlan
{
  "queryType" : "groupBy",
  "dataSource" : {
    "type" : "query",
    "query" : {
      "queryType" : "groupBy",
      "dataSource" : {
        "type" : "table",
        "name" : "foo"
      },
      "intervals" : {
        "type" : "intervals",
        "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
      },
      "virtualColumns" : [ {
        "type" : "expression",
        "name" : "v0",
        "expression" : "case_searched(((\"__time\" >= 947005200000) && (\"__time\" < 1641402000000)),\"dim1\",null)",
        "outputType" : "STRING"
      }, {
        "type" : "expression",
        "name" : "v1",
        "expression" : "case_searched(((\"__time\" >= 947005200000) && (\"__time\" < 1641402000000)),1,0)",
        "outputType" : "LONG"
      } ],
      "granularity" : {
        "type" : "all"
      },
      "dimensions" : [ {
        "type" : "default",
        "dimension" : "v0",
        "outputName" : "d0",
        "outputType" : "STRING"
      } ],
      "aggregations" : [ {
        "type" : "longSum",
        "name" : "a0",
        "fieldName" : "v1"
      }, {
        "type" : "grouping",
        "name" : "a1",
        "groupings" : [ "v0" ]
      } ],
      "limitSpec" : {
        "type" : "NoopLimitSpec"
      },
      "subtotalsSpec" : [ [ "d0" ], [ ] ]
    }
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "granularity" : {
    "type" : "all"
  },
  "dimensions" : [ ],
  "aggregations" : [ {
    "type" : "filtered",
    "aggregator" : {
      "type" : "longMin",
      "name" : "_a0",
      "fieldName" : "a0"
    },
    "filter" : {
      "type" : "selector",
      "dimension" : "a1",
      "value" : "1"
    },
    "name" : "_a0"
  }, {
    "type" : "filtered",
    "aggregator" : {
      "type" : "count",
      "name" : "_a1"
    },
    "filter" : {
      "type" : "and",
      "fields" : [ {
        "type" : "not",
        "field" : {
          "type" : "selector",
          "dimension" : "d0",
          "value" : null
        }
      }, {
        "type" : "selector",
        "dimension" : "a1",
        "value" : "0"
      } ]
    },
    "name" : "_a1"
  } ],
  "postAggregations" : [ {
    "type" : "expression",
    "name" : "p0",
    "expression" : "(CAST(\"_a0\", 'DOUBLE') / \"_a1\")",
    "outputType" : "DOUBLE"
  } ],
  "limitSpec" : {
    "type" : "NoopLimitSpec"
  }
}
!nativePlan
