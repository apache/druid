// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`IndexSpecDialog matches snapshot with indexSpec 1`] = `
<Blueprint4.Dialog
  canOutsideClickClose={false}
  className="index-spec-dialog"
  isOpen={true}
  onClose={[Function]}
  title="Index spec"
>
  <Memo(FormJsonSelector)
    onChange={[Function]}
    tab="form"
  />
  <div
    className="content"
  >
    <AutoForm
      fields={
        Array [
          Object {
            "defaultValue": "utf8",
            "info": <React.Fragment>
              Encoding format for STRING value dictionaries used by STRING and COMPLEX&lt;json&gt; columns.
            </React.Fragment>,
            "label": "String dictionary encoding",
            "name": "stringDictionaryEncoding.type",
            "suggestions": Array [
              "utf8",
              "frontCoded",
            ],
            "type": "string",
          },
          Object {
            "defaultValue": 4,
            "defined": [Function],
            "info": <React.Fragment>
              The number of values to place in a bucket to perform delta encoding. Must be a power of 2, maximum is 128.
            </React.Fragment>,
            "label": "String dictionary encoding bucket size",
            "max": 128,
            "min": 1,
            "name": "stringDictionaryEncoding.bucketSize",
            "type": "number",
          },
          Object {
            "defaultValue": "roaring",
            "info": <React.Fragment>
              Compression format for bitmap indexes.
            </React.Fragment>,
            "label": "Bitmap type",
            "name": "bitmap.type",
            "suggestions": Array [
              "roaring",
              "concise",
            ],
            "type": "string",
          },
          Object {
            "defaultValue": true,
            "defined": [Function],
            "info": <React.Fragment>
              Controls whether or not run-length encoding will be used when it is determined to be more space-efficient.
            </React.Fragment>,
            "label": "Bitmap compress run on serialization",
            "name": "bitmap.compressRunOnSerialization",
            "type": "boolean",
          },
          Object {
            "defaultValue": "lz4",
            "info": <React.Fragment>
              Compression format for dimension columns.
            </React.Fragment>,
            "name": "dimensionCompression",
            "suggestions": Array [
              "lz4",
              "lzf",
              "zstd",
              "uncompressed",
            ],
            "type": "string",
          },
          Object {
            "defaultValue": "longs",
            "info": <React.Fragment>
              Encoding format for long-typed columns. Applies regardless of whether they are dimensions or metrics. 
              <Unknown>
                auto
              </Unknown>
               encodes the values using offset or lookup table depending on column cardinality, and store them with variable size. 
              <Unknown>
                longs
              </Unknown>
               stores the value as-is with 8 bytes each.
            </React.Fragment>,
            "name": "longEncoding",
            "suggestions": Array [
              "longs",
              "auto",
            ],
            "type": "string",
          },
          Object {
            "defaultValue": "lz4",
            "info": <React.Fragment>
              Compression format for primitive type metric columns.
            </React.Fragment>,
            "name": "metricCompression",
            "suggestions": Array [
              "lz4",
              "lzf",
              "zstd",
              "uncompressed",
            ],
            "type": "string",
          },
          Object {
            "defaultValue": "lz4",
            "info": <React.Fragment>
              Compression format to use for nested column raw data. 
            </React.Fragment>,
            "label": "JSON compression",
            "name": "jsonCompression",
            "suggestions": Array [
              "lz4",
              "lzf",
              "zstd",
              "uncompressed",
            ],
            "type": "string",
          },
        ]
      }
      model={
        Object {
          "dimensionCompression": "lzf",
        }
      }
      onChange={[Function]}
    />
  </div>
  <div
    className="bp4-dialog-footer"
  >
    <div
      className="bp4-dialog-footer-actions"
    >
      <Blueprint4.Button
        onClick={[Function]}
        text="Close"
      />
      <Blueprint4.Button
        disabled={false}
        intent="primary"
        onClick={[Function]}
        text="Save"
      />
    </div>
  </div>
</Blueprint4.Dialog>
`;

exports[`IndexSpecDialog matches snapshot without compactionConfig 1`] = `
<Blueprint4.Dialog
  canOutsideClickClose={false}
  className="index-spec-dialog"
  isOpen={true}
  onClose={[Function]}
  title="Index spec"
>
  <Memo(FormJsonSelector)
    onChange={[Function]}
    tab="form"
  />
  <div
    className="content"
  >
    <AutoForm
      fields={
        Array [
          Object {
            "defaultValue": "utf8",
            "info": <React.Fragment>
              Encoding format for STRING value dictionaries used by STRING and COMPLEX&lt;json&gt; columns.
            </React.Fragment>,
            "label": "String dictionary encoding",
            "name": "stringDictionaryEncoding.type",
            "suggestions": Array [
              "utf8",
              "frontCoded",
            ],
            "type": "string",
          },
          Object {
            "defaultValue": 4,
            "defined": [Function],
            "info": <React.Fragment>
              The number of values to place in a bucket to perform delta encoding. Must be a power of 2, maximum is 128.
            </React.Fragment>,
            "label": "String dictionary encoding bucket size",
            "max": 128,
            "min": 1,
            "name": "stringDictionaryEncoding.bucketSize",
            "type": "number",
          },
          Object {
            "defaultValue": "roaring",
            "info": <React.Fragment>
              Compression format for bitmap indexes.
            </React.Fragment>,
            "label": "Bitmap type",
            "name": "bitmap.type",
            "suggestions": Array [
              "roaring",
              "concise",
            ],
            "type": "string",
          },
          Object {
            "defaultValue": true,
            "defined": [Function],
            "info": <React.Fragment>
              Controls whether or not run-length encoding will be used when it is determined to be more space-efficient.
            </React.Fragment>,
            "label": "Bitmap compress run on serialization",
            "name": "bitmap.compressRunOnSerialization",
            "type": "boolean",
          },
          Object {
            "defaultValue": "lz4",
            "info": <React.Fragment>
              Compression format for dimension columns.
            </React.Fragment>,
            "name": "dimensionCompression",
            "suggestions": Array [
              "lz4",
              "lzf",
              "zstd",
              "uncompressed",
            ],
            "type": "string",
          },
          Object {
            "defaultValue": "longs",
            "info": <React.Fragment>
              Encoding format for long-typed columns. Applies regardless of whether they are dimensions or metrics. 
              <Unknown>
                auto
              </Unknown>
               encodes the values using offset or lookup table depending on column cardinality, and store them with variable size. 
              <Unknown>
                longs
              </Unknown>
               stores the value as-is with 8 bytes each.
            </React.Fragment>,
            "name": "longEncoding",
            "suggestions": Array [
              "longs",
              "auto",
            ],
            "type": "string",
          },
          Object {
            "defaultValue": "lz4",
            "info": <React.Fragment>
              Compression format for primitive type metric columns.
            </React.Fragment>,
            "name": "metricCompression",
            "suggestions": Array [
              "lz4",
              "lzf",
              "zstd",
              "uncompressed",
            ],
            "type": "string",
          },
          Object {
            "defaultValue": "lz4",
            "info": <React.Fragment>
              Compression format to use for nested column raw data. 
            </React.Fragment>,
            "label": "JSON compression",
            "name": "jsonCompression",
            "suggestions": Array [
              "lz4",
              "lzf",
              "zstd",
              "uncompressed",
            ],
            "type": "string",
          },
        ]
      }
      model={Object {}}
      onChange={[Function]}
    />
  </div>
  <div
    className="bp4-dialog-footer"
  >
    <div
      className="bp4-dialog-footer-actions"
    >
      <Blueprint4.Button
        onClick={[Function]}
        text="Close"
      />
      <Blueprint4.Button
        disabled={false}
        intent="primary"
        onClick={[Function]}
        text="Save"
      />
    </div>
  </div>
</Blueprint4.Dialog>
`;
