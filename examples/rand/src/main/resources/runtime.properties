# Properties for demo of Realtime Node in standalone mode.
# To Use This:  copy this file to runtime.properties and put directory containing it in classpath.
#
comment.origin=druid/examples/rand/src/main/resources/runtime.properties

# S3 access
com.metamx.aws.accessKey=<S3 access key>
com.metamx.aws.secretKey=<S3 secret_key>

# thread pool size for servicing queries
druid.client.http.connections=10

# JDBC connection string for metadata database
druid.database.connectURI=
druid.database.user=user
druid.database.password=password
# time between polling for metadata database
druid.database.poll.duration=PT1M

# table for segment metadata coordination, no default
druid.database.segmentTable=prod_segments

#in progress 20121010 #druid.database.taskTable=

druid.emitter.period=PT60S

druid.master.host
# Poll period the master runs on
druid.master.period=PT60S
# Number of poll periods to wait for a node to come back before believing it is really gone
druid.master.removedSegmentLifetime=1
# Delay for the master to start its work, this should be sufficiently high so that the master can get all of the
# information it needs from ZK before starting.  It's a hack, but it works until we re-work our ZK integration.
druid.master.startDelay=PT600S

# Path on local FS for storage of segments; dir. will be created if needed
druid.paths.indexCache=/tmp/rand_realtime/indexCache
# Path on local FS for storage of segment metadata; dir. will be created if needed
druid.paths.segmentInfoCache=/tmp/rand_realtime/segmentInfoCache

# Path to schema definition file
druid.request.logging.dir=/tmp/rand_realtime/log

# TODO: have these moved to spec file?
# unknown # druid.realtime.dataSources=
# unknown # druid.realtime.index.maxSize=500000
# unknown # druid.realtime.persistPeriod=PT600S
# unknown # druid.realtime.scheduledExec.threads=1
# unknown # druid.realtime.uploadPeriod=PT3600S
# unknown # druid.realtime.windowPeriod=PT600S

#druid.server.maxSize=0
druid.server.maxSize=300000000000
# =realtime or =historical (default)
druid.server.type=realtime

#
#    zookeeper (zk) znode paths (zpaths)
#

# base znode which establishes a unique namespace for a Druid ensemble.
#  Default is /druid if not set
#  This can also be set via parameter baseZkPath of the DruidSetup commandline
# druid.zk.paths.base=

#  If these zpath properties like druid.zk.paths.*Path are overridden, then all must be
#  overridden together for upgrade safety reasons.
#  The commandline utility DruidSetup, which is used to set up properties on zookeeper,
#  will validate this.  Also, these zpaths must start with / because they are not relative.

# ZK znode path for service discovery within the cluster.
#  Default is value of druid.zk.paths.base + /announcements
# druid.zk.paths.announcementsPath=/druid/announcements

# Legacy znode path, must be set, but can be ignored
#druid.zk.paths.indexesPath=/druid/indexes

#  Default is value of druid.zk.paths.base + /tasks
##druid.zk.paths.indexer.tasksPath=/druid/tasks

#  Default is value of druid.zk.paths.base + /status
#druid.zk.paths.indexer.statusPath=/druid/status

# ZK path for load/drop protocol between Master/Compute
#  Default is value of druid.zk.paths.base + /loadQueue
#druid.zk.paths.loadQueuePath=/druid/loadQueue

# ZK path for Master leadership election
#  Default is value of druid.zk.paths.base + /master
#druid.zk.paths.masterPath=/druid/master

# ZK path for publishing served segments
#  Default is value of druid.zk.paths.base + /servedSegments
#druid.zk.paths.servedSegmentsPath=/druid/servedSegments

#  Default is value of druid.zk.paths.base + /leaderLatch
#druid.zk.paths.indexer.leaderLatchPath=/druid/leaderLatch

# ZK path for properties stored in zookeeper
#  Default is value of druid.zk.paths.base + /properties
#druid.zk.paths.propertiesPath=/druid/properties

druid.host=127.0.0.1
druid.port=8080

#
druid.http.numThreads=10
# default is 5 min. (300000)
#druid.http.maxIdleTimeMillis=300000

# unknown # com.metamx.service=compute
com.metamx.emitter.http=true
com.metamx.emitter.logging=true
com.metamx.emitter.logging.level=info
com.metamx.metrics.emitter.period=PT60S

# ZK quorum IPs; ZK coordinates in the form host1:port1[,host2:port2[, ...]]
#   if =none then do not contact zookeeper (only for RealtimeStandaloneMain examples)
druid.zk.service.host=none

# msec; high value means tolerate slow zk nodes, default is to wait about 3 weeks
druid.zk.service.connectionTimeout=1000000

druid.processing.formatString=processing_%s
druid.processing.numThreads=3


#
#  other properties found
#
druid.computation.buffer.size=10000000
druid.merger.threads=1
druid.merger.runner=remote
druid.merger.whitelist.enabled=false
druid.merger.whitelist.datasources=
druid.merger.rowFlushBoundary=500000
druid.indexer.retry.minWaitMillis=10000
druid.indexer.retry.maxWaitMillis=60000
druid.indexer.retry.maxRetryCount=10
#emitting, opaque marker
druid.service=foo
# S3 dest for realtime indexer
druid.pusher.s3.bucket=
druid.pusher.s3.baseKey=

druid.realtime.specFile=rand_realtime.spec

#
#     Integration-Test Related
#
# is this for RAM?  which process?
druid.bard.cache.sizeInBytes=40000000
#ignore#druid.bard.host=
