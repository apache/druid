!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/mv&numMergeBuffers=3
!set outputformat mysql
SELECT *
FROM test_unnest;
+-------------------------+-------+--------+---------+----------+------------------------------------------------+------------------------+--------------------------------------+----------------------------------+--------------------------------------+----------------------------------+-----------------------------+
| __time                  | c_str | c_long | c_float | c_double | c_mv_complex                                   | c_mv_num               | c_mv_complex_with_null_and_empty_val | c_mv_num_with_null_and_empty_val | c_mv_complex_with_null_and_empty_row | c_mv_num_with_null_and_empty_row | c_mv_all_null_and_empty_val |
+-------------------------+-------+--------+---------+----------+------------------------------------------------+------------------------+--------------------------------------+----------------------------------+--------------------------------------+----------------------------------+-----------------------------+
| 2022-01-01 00:00:00.000 |       |      1 |     0.1 |      0.1 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            |                                      |                                  | [null,"",null,"",null]      |
| 2022-01-01 00:00:00.000 | str2  |      2 |     0.2 |      0.2 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      |
| 2022-01-01 00:00:00.000 | str3  |      3 |     0.3 |      0.3 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      |
| 2022-01-01 00:00:00.000 | str4  |      4 |     0.4 |      0.4 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      |
| 2022-01-01 00:00:00.000 |       |      0 |     0.0 |      0.0 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            |                                      |                                  | [null,"",null,"",null]      |
+-------------------------+-------+--------+---------+----------+------------------------------------------------+------------------------+--------------------------------------+----------------------------------+--------------------------------------+----------------------------------+-----------------------------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(doesnt_exist) AS u(c);
not found
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(doesnt_exist) AS u(c)
GROUP BY c;
not found
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(doesnt_exist)) AS u(c);
not found
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(doesnt_exist)) AS u(c)
GROUP BY c;
not found
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B5 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT *
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c_mv_complex);
is ambiguous
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B6 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT *
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c_mv_complex)
GROUP BY c;
is ambiguous
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B7 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c_str0
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c_str);
not found in any table
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT u.c_str
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c_str);
+-------------+
| c_str       |
+-------------+
| 1           |
| 1           |
| 1           |
| 1           |
| 1           |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| my_empty    |
| my_empty    |
| my_empty    |
| my_empty    |
| my_empty    |
| my_null     |
| my_null     |
| my_null     |
| my_null     |
| my_null     |
+-------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex)) AS u(c_str));
+--------+
| EXPR$0 |
+--------+
|     25 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str0
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex)) AS u(c_str));
+-------------+
| c_str0      |
+-------------+
| 1           |
| 1           |
| 1           |
| 1           |
| 1           |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| my_empty    |
| my_empty    |
| my_empty    |
| my_empty    |
| my_empty    |
| my_null     |
| my_null     |
| my_null     |
| my_null     |
| my_null     |
+-------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B11 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT u.c_str
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex)) AS u(c_str));
not found
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c_str0,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c_str)
GROUP BY c_str0;
not found in any table
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT u.c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c_str)
GROUP BY u.c_str;
+-------------+-----+
| c_str       | cnt |
+-------------+-----+
| 1           |   5 |
| [2]         |   5 |
| [3, [4, 5]] |   5 |
| my_empty    |   5 |
| my_null     |   5 |
+-------------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     strlen(unnest(mv_to_array(c_mv_complex))) AS u(c);
ParseException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     strlen(unnest(mv_to_array(c_mv_complex))) AS u(c)
GROUP BY c;
ParseException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex || 'STR')) AS u(c);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex || 'STR')) AS u(c)
GROUP BY c;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(mv_concat(c_mv_complex, c_mv_complex))) AS u(c);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(mv_concat(c_mv_complex, c_mv_complex))) AS u(c)
GROUP BY c;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (c || 'STR') col
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c);
+----------------+
| col            |
+----------------+
| 1STR           |
| 1STR           |
| 1STR           |
| 1STR           |
| 1STR           |
| [2]STR         |
| [2]STR         |
| [2]STR         |
| [2]STR         |
| [2]STR         |
| [3, [4, 5]]STR |
| [3, [4, 5]]STR |
| [3, [4, 5]]STR |
| [3, [4, 5]]STR |
| [3, [4, 5]]STR |
| my_emptySTR    |
| my_emptySTR    |
| my_emptySTR    |
| my_emptySTR    |
| my_emptySTR    |
| my_nullSTR     |
| my_nullSTR     |
| my_nullSTR     |
| my_nullSTR     |
| my_nullSTR     |
+----------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (c || 'STR') col
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY c;
+----------------+
| col            |
+----------------+
| 1STR           |
| [2]STR         |
| [3, [4, 5]]STR |
| my_emptySTR    |
| my_nullSTR     |
+----------------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT length(c) col
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|  11 |
|  11 |
|  11 |
|  11 |
|  11 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   7 |
|   7 |
|   7 |
|   7 |
|   7 |
|   8 |
|   8 |
|   8 |
|   8 |
|   8 |
+-----+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT length(c) col
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|  11 |
|   3 |
|   7 |
|   8 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT length(c || 'STR') col
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c);
+-----+
| col |
+-----+
|  10 |
|  10 |
|  10 |
|  10 |
|  10 |
|  11 |
|  11 |
|  11 |
|  11 |
|  11 |
|  14 |
|  14 |
|  14 |
|  14 |
|  14 |
|   4 |
|   4 |
|   4 |
|   4 |
|   4 |
|   6 |
|   6 |
|   6 |
|   6 |
|   6 |
+-----+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT length(c || 'STR') col
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY c;
+-----+
| col |
+-----+
|  10 |
|  11 |
|  14 |
|   4 |
|   6 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT length(c || c) col
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c);
+-----+
| col |
+-----+
|  14 |
|  14 |
|  14 |
|  14 |
|  14 |
|  16 |
|  16 |
|  16 |
|  16 |
|  16 |
|   2 |
|   2 |
|   2 |
|   2 |
|   2 |
|  22 |
|  22 |
|  22 |
|  22 |
|  22 |
|   6 |
|   6 |
|   6 |
|   6 |
|   6 |
+-----+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT length(c || c) col
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY c;
+-----+
| col |
+-----+
|  14 |
|  16 |
|   2 |
|  22 |
|   6 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B28 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       c_mv_complex AS new_col
FROM test_unnest,
     unnest(mv_to_array(new_col)) AS u(c);
not found in any table
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c_mv_complex AS new_col
   FROM test_unnest) t1,
     unnest(mv_to_array(new_col)) AS u(c);
+-------------+
| c           |
+-------------+
| 1           |
| 1           |
| 1           |
| 1           |
| 1           |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| my_empty    |
| my_empty    |
| my_empty    |
| my_empty    |
| my_empty    |
| my_null     |
| my_null     |
| my_null     |
| my_null     |
| my_null     |
+-------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c AS new_col
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c);
+-------------+
| new_col     |
+-------------+
| 1           |
| 1           |
| 1           |
| 1           |
| 1           |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| my_empty    |
| my_empty    |
| my_empty    |
| my_empty    |
| my_empty    |
| my_null     |
| my_null     |
| my_null     |
| my_null     |
| my_null     |
+-------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_str) AS u(c);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_str) AS u(c)
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_long) AS u(c);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_long) AS u(c)
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_float) AS u(c);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_float) AS u(c)
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_double) AS u(c);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_double) AS u(c)
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_mv_complex) AS u(c);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_mv_complex) AS u(c)
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_mv_num) AS u(c);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_mv_num) AS u(c)
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_mv_complex_with_null_and_empty_val) AS u(c);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_mv_complex_with_null_and_empty_val) AS u(c)
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_mv_num_with_null_and_empty_val) AS u(c);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_mv_num_with_null_and_empty_val) AS u(c)
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_mv_complex_with_null_and_empty_row) AS u(c);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_mv_complex_with_null_and_empty_row) AS u(c)
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_mv_num_with_null_and_empty_row) AS u(c);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_mv_num_with_null_and_empty_row) AS u(c)
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_mv_all_null_and_empty_val) AS u(c);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A1_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(c_mv_all_null_and_empty_val) AS u(c)
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A2_B1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_append(c_mv_complex, 'Z')) AS u(c);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A2_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_append(c_mv_complex, 'Z')) AS u(c)
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A3_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c);
+-------------+
| c           |
+-------------+
| 1           |
| 1           |
| 1           |
| 1           |
| 1           |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| my_empty    |
| my_empty    |
| my_empty    |
| my_empty    |
| my_empty    |
| my_null     |
| my_null     |
| my_null     |
| my_null     |
| my_null     |
+-------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A3_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY c;
+-------------+
| c           |
+-------------+
| 1           |
| [2]         |
| [3, [4, 5]] |
| my_empty    |
| my_null     |
+-------------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A4_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c);
+----+
| c  |
+----+
| -1 |
| -1 |
| -1 |
| -1 |
| -1 |
| 0  |
| 0  |
| 0  |
| 0  |
| 0  |
| 1  |
| 1  |
| 1  |
| 1  |
| 1  |
| 2  |
| 2  |
| 2  |
| 2  |
| 2  |
| 3  |
| 3  |
| 3  |
| 3  |
| 3  |
+----+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A4_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY c;
+----+
| c  |
+----+
| -1 |
| 0  |
| 1  |
| 2  |
| 3  |
+----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A5_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c);
+-------------+
| c           |
+-------------+
|             |
|             |
|             |
|             |
|             |
| 1           |
| 1           |
| 1           |
| 1           |
| 1           |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
|             |
|             |
|             |
|             |
|             |
+-------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A5_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY c;
+-------------+
| c           |
+-------------+
|             |
| 1           |
| [2]         |
| [3, [4, 5]] |
|             |
+-------------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A6_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c);
+---+
| c |
+---+
|   |
|   |
|   |
|   |
|   |
| 1 |
| 1 |
| 1 |
| 1 |
| 1 |
| 2 |
| 2 |
| 2 |
| 2 |
| 2 |
| 3 |
| 3 |
| 3 |
| 3 |
| 3 |
|   |
|   |
|   |
|   |
|   |
+---+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A6_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY c;
+---+
| c |
+---+
|   |
| 1 |
| 2 |
| 3 |
|   |
+---+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A7_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c);
+-------------+
| c           |
+-------------+
|             |
|             |
|             |
| 1           |
| 1           |
| 1           |
| [2]         |
| [2]         |
| [2]         |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
|             |
|             |
|             |
|             |
|             |
+-------------+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A7_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY c;
+-------------+
| c           |
+-------------+
|             |
| 1           |
| [2]         |
| [3, [4, 5]] |
|             |
+-------------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A8_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c);
+---+
| c |
+---+
|   |
|   |
|   |
| 1 |
| 1 |
| 1 |
| 2 |
| 2 |
| 2 |
| 3 |
| 3 |
| 3 |
|   |
|   |
|   |
|   |
|   |
+---+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A8_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY c;
+---+
| c |
+---+
|   |
| 1 |
| 2 |
| 3 |
|   |
+---+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A9_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c);
+---+
| c |
+---+
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
+---+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_mv TEST_ID: A9_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY c;
+---+
| c |
+---+
|   |
|   |
+---+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_explain TEST_ID: A1_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------

SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c);
+-------------+
| c           |
+-------------+
| 1           |
| 1           |
| 1           |
| 1           |
| 1           |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| my_empty    |
| my_empty    |
| my_empty    |
| my_empty    |
| my_empty    |
| my_null     |
| my_null     |
| my_null     |
| my_null     |
| my_null     |
+-------------+
(25 rows)

!ok

{
  "queryType" : "scan",
  "dataSource" : {
    "type" : "unnest",
    "base" : {
      "type" : "table",
      "name" : "test_unnest"
    },
    "virtualColumn" : {
      "type" : "expression",
      "name" : "j0.unnest",
      "expression" : "\"c_mv_complex\"",
      "outputType" : "STRING"
    },
    "unnestFilter" : null
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "resultFormat" : "compactedList",
  "columns" : [ "j0.unnest" ],
  "columnTypes" : [ "STRING" ],
  "granularity" : {
    "type" : "all"
  },
  "legacy" : false
}
!nativePlan

#-------------------------------------------------------------------------
# TESTCASE: test_explain TEST_ID: A1_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------

SELECT *
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex)) AS u(c));
+-------------------------+-------+--------+---------+----------+------------------------------------------------+------------------------+--------------------------------------+----------------------------------+--------------------------------------+----------------------------------+-----------------------------+-------------+
| __time                  | c_str | c_long | c_float | c_double | c_mv_complex                                   | c_mv_num               | c_mv_complex_with_null_and_empty_val | c_mv_num_with_null_and_empty_val | c_mv_complex_with_null_and_empty_row | c_mv_num_with_null_and_empty_row | c_mv_all_null_and_empty_val | c           |
+-------------------------+-------+--------+---------+----------+------------------------------------------------+------------------------+--------------------------------------+----------------------------------+--------------------------------------+----------------------------------+-----------------------------+-------------+
| 2022-01-01 00:00:00.000 |       |      1 |     0.1 |      0.1 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            |                                      |                                  | [null,"",null,"",null]      | 1           |
| 2022-01-01 00:00:00.000 |       |      1 |     0.1 |      0.1 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            |                                      |                                  | [null,"",null,"",null]      | [2]         |
| 2022-01-01 00:00:00.000 |       |      1 |     0.1 |      0.1 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            |                                      |                                  | [null,"",null,"",null]      | [3, [4, 5]] |
| 2022-01-01 00:00:00.000 |       |      1 |     0.1 |      0.1 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            |                                      |                                  | [null,"",null,"",null]      | my_empty    |
| 2022-01-01 00:00:00.000 |       |      1 |     0.1 |      0.1 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            |                                      |                                  | [null,"",null,"",null]      | my_null     |
| 2022-01-01 00:00:00.000 | str2  |      2 |     0.2 |      0.2 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      | 1           |
| 2022-01-01 00:00:00.000 | str2  |      2 |     0.2 |      0.2 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      | [2]         |
| 2022-01-01 00:00:00.000 | str2  |      2 |     0.2 |      0.2 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      | [3, [4, 5]] |
| 2022-01-01 00:00:00.000 | str2  |      2 |     0.2 |      0.2 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      | my_empty    |
| 2022-01-01 00:00:00.000 | str2  |      2 |     0.2 |      0.2 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      | my_null     |
| 2022-01-01 00:00:00.000 | str3  |      3 |     0.3 |      0.3 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      | 1           |
| 2022-01-01 00:00:00.000 | str3  |      3 |     0.3 |      0.3 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      | [2]         |
| 2022-01-01 00:00:00.000 | str3  |      3 |     0.3 |      0.3 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      | [3, [4, 5]] |
| 2022-01-01 00:00:00.000 | str3  |      3 |     0.3 |      0.3 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      | my_empty    |
| 2022-01-01 00:00:00.000 | str3  |      3 |     0.3 |      0.3 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      | my_null     |
| 2022-01-01 00:00:00.000 | str4  |      4 |     0.4 |      0.4 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      | 1           |
| 2022-01-01 00:00:00.000 | str4  |      4 |     0.4 |      0.4 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      | [2]         |
| 2022-01-01 00:00:00.000 | str4  |      4 |     0.4 |      0.4 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      | [3, [4, 5]] |
| 2022-01-01 00:00:00.000 | str4  |      4 |     0.4 |      0.4 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      | my_empty    |
| 2022-01-01 00:00:00.000 | str4  |      4 |     0.4 |      0.4 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      | my_null     |
| 2022-01-01 00:00:00.000 |       |      0 |     0.0 |      0.0 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            |                                      |                                  | [null,"",null,"",null]      | 1           |
| 2022-01-01 00:00:00.000 |       |      0 |     0.0 |      0.0 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            |                                      |                                  | [null,"",null,"",null]      | [2]         |
| 2022-01-01 00:00:00.000 |       |      0 |     0.0 |      0.0 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            |                                      |                                  | [null,"",null,"",null]      | [3, [4, 5]] |
| 2022-01-01 00:00:00.000 |       |      0 |     0.0 |      0.0 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            |                                      |                                  | [null,"",null,"",null]      | my_empty    |
| 2022-01-01 00:00:00.000 |       |      0 |     0.0 |      0.0 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            |                                      |                                  | [null,"",null,"",null]      | my_null     |
+-------------------------+-------+--------+---------+----------+------------------------------------------------+------------------------+--------------------------------------+----------------------------------+--------------------------------------+----------------------------------+-----------------------------+-------------+
(25 rows)

!ok

{
  "queryType" : "scan",
  "dataSource" : {
    "type" : "unnest",
    "base" : {
      "type" : "table",
      "name" : "test_unnest"
    },
    "virtualColumn" : {
      "type" : "expression",
      "name" : "j0.unnest",
      "expression" : "\"c_mv_complex\"",
      "outputType" : "STRING"
    },
    "unnestFilter" : null
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "resultFormat" : "compactedList",
  "columns" : [ "__time", "c_str", "c_long", "c_float", "c_double", "c_mv_complex", "c_mv_num", "c_mv_complex_with_null_and_empty_val", "c_mv_num_with_null_and_empty_val", "c_mv_complex_with_null_and_empty_row", "c_mv_num_with_null_and_empty_row", "c_mv_all_null_and_empty_val", "j0.unnest" ],
  "columnTypes" : [ "LONG", "STRING", "LONG", "FLOAT", "DOUBLE", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING" ],
  "granularity" : {
    "type" : "all"
  },
  "legacy" : false
}
!nativePlan

#-------------------------------------------------------------------------
# TESTCASE: test_explain TEST_ID: A1_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------

SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY c;
+-------------+-----+
| c           | cnt |
+-------------+-----+
| 1           |   5 |
| [2]         |   5 |
| [3, [4, 5]] |   5 |
| my_empty    |   5 |
| my_null     |   5 |
+-------------+-----+
(5 rows)

!ok

{
  "queryType" : "groupBy",
  "dataSource" : {
    "type" : "unnest",
    "base" : {
      "type" : "table",
      "name" : "test_unnest"
    },
    "virtualColumn" : {
      "type" : "expression",
      "name" : "j0.unnest",
      "expression" : "\"c_mv_complex\"",
      "outputType" : "STRING"
    },
    "unnestFilter" : null
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "granularity" : {
    "type" : "all"
  },
  "dimensions" : [ {
    "type" : "default",
    "dimension" : "j0.unnest",
    "outputName" : "d0",
    "outputType" : "STRING"
  } ],
  "aggregations" : [ {
    "type" : "count",
    "name" : "a0"
  } ],
  "limitSpec" : {
    "type" : "NoopLimitSpec"
  }
}
!nativePlan

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A1_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c);
+-----+
| cnt |
+-----+
|  25 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A1_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(c) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c);
+-----+
| cnt |
+-----+
|  25 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A1_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A2_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c);
+-----+
| cnt |
+-----+
|  25 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A2_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(c) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c);
+-----+
| cnt |
+-----+
|  25 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A2_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A3_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c);
+-----+
| cnt |
+-----+
|  25 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A3_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(c) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c);
+-----+
| cnt |
+-----+
|  20 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A3_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c);
+-----+
| cnt |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A4_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c);
+-----+
| cnt |
+-----+
|  25 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A4_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(c) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c);
+-----+
| cnt |
+-----+
|  20 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A4_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c);
+-----+
| cnt |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A5_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c);
+-----+
| cnt |
+-----+
|  25 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A5_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(c) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c);
+-----+
| cnt |
+-----+
|  10 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A5_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A1_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c);
+-------------+
| c           |
+-------------+
| 1           |
| [2]         |
| [3, [4, 5]] |
| my_empty    |
| my_null     |
+-------------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A1_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY c;
+-------------+
| c           |
+-------------+
| 1           |
| [2]         |
| [3, [4, 5]] |
| my_empty    |
| my_null     |
+-------------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A2_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c);
+----+
| c  |
+----+
| -1 |
| 0  |
| 1  |
| 2  |
| 3  |
+----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A2_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY c;
+----+
| c  |
+----+
| -1 |
| 0  |
| 1  |
| 2  |
| 3  |
+----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A3_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c);
+-------------+
| c           |
+-------------+
|             |
| 1           |
| [2]         |
| [3, [4, 5]] |
|             |
+-------------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A3_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY c;
+-------------+
| c           |
+-------------+
|             |
| 1           |
| [2]         |
| [3, [4, 5]] |
|             |
+-------------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A4_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c);
+---+
| c |
+---+
|   |
| 1 |
| 2 |
| 3 |
|   |
+---+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A4_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY c;
+---+
| c |
+---+
|   |
| 1 |
| 2 |
| 3 |
|   |
+---+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A5_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c);
+-------------+
| c           |
+-------------+
|             |
| 1           |
| [2]         |
| [3, [4, 5]] |
|             |
+-------------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A5_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY c;
+-------------+
| c           |
+-------------+
|             |
| 1           |
| [2]         |
| [3, [4, 5]] |
|             |
+-------------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A6_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c);
+---+
| c |
+---+
|   |
| 1 |
| 2 |
| 3 |
|   |
+---+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A6_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY c;
+---+
| c |
+---+
|   |
| 1 |
| 2 |
| 3 |
|   |
+---+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A7_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c);
+---+
| c |
+---+
|   |
|   |
+---+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A7_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY c;
+---+
| c |
+---+
|   |
|   |
+---+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A1_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c1,
       c2
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u1(c1),
     unnest(mv_to_array(c_mv_complex)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN ('my_null',
                 'my_empty',
                 '1',
                 '[2]',
                 '[3, [4, 5]]'))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+-------------+-------------+
| c_long | c1          | c2          |
+--------+-------------+-------------+
|      0 | 1           | 1           |
|      0 | 1           | [2]         |
|      0 | 1           | [3, [4, 5]] |
|      0 | 1           | my_empty    |
|      0 | 1           | my_null     |
|      0 | [2]         | 1           |
|      0 | [2]         | [2]         |
|      0 | [2]         | [3, [4, 5]] |
|      0 | [2]         | my_empty    |
|      0 | [2]         | my_null     |
|      0 | [3, [4, 5]] | 1           |
|      0 | [3, [4, 5]] | [2]         |
|      0 | [3, [4, 5]] | [3, [4, 5]] |
|      0 | [3, [4, 5]] | my_empty    |
|      0 | [3, [4, 5]] | my_null     |
|      0 | my_empty    | 1           |
|      0 | my_empty    | [2]         |
|      0 | my_empty    | [3, [4, 5]] |
|      0 | my_empty    | my_empty    |
|      0 | my_empty    | my_null     |
|      0 | my_null     | 1           |
|      0 | my_null     | [2]         |
|      0 | my_null     | [3, [4, 5]] |
|      0 | my_null     | my_empty    |
|      0 | my_null     | my_null     |
|      1 | 1           | 1           |
|      1 | 1           | [2]         |
|      1 | 1           | [3, [4, 5]] |
|      1 | 1           | my_empty    |
|      1 | 1           | my_null     |
|      1 | [2]         | 1           |
|      1 | [2]         | [2]         |
|      1 | [2]         | [3, [4, 5]] |
|      1 | [2]         | my_empty    |
|      1 | [2]         | my_null     |
|      1 | [3, [4, 5]] | 1           |
|      1 | [3, [4, 5]] | [2]         |
|      1 | [3, [4, 5]] | [3, [4, 5]] |
|      1 | [3, [4, 5]] | my_empty    |
|      1 | [3, [4, 5]] | my_null     |
|      1 | my_empty    | 1           |
|      1 | my_empty    | [2]         |
|      1 | my_empty    | [3, [4, 5]] |
|      1 | my_empty    | my_empty    |
|      1 | my_empty    | my_null     |
|      1 | my_null     | 1           |
|      1 | my_null     | [2]         |
|      1 | my_null     | [3, [4, 5]] |
|      1 | my_null     | my_empty    |
|      1 | my_null     | my_null     |
|      2 | 1           | 1           |
|      2 | 1           | [2]         |
|      2 | 1           | [3, [4, 5]] |
|      2 | 1           | my_empty    |
|      2 | 1           | my_null     |
|      2 | [2]         | 1           |
|      2 | [2]         | [2]         |
|      2 | [2]         | [3, [4, 5]] |
|      2 | [2]         | my_empty    |
|      2 | [2]         | my_null     |
|      2 | [3, [4, 5]] | 1           |
|      2 | [3, [4, 5]] | [2]         |
|      2 | [3, [4, 5]] | [3, [4, 5]] |
|      2 | [3, [4, 5]] | my_empty    |
|      2 | [3, [4, 5]] | my_null     |
|      2 | my_empty    | 1           |
|      2 | my_empty    | [2]         |
|      2 | my_empty    | [3, [4, 5]] |
|      2 | my_empty    | my_empty    |
|      2 | my_empty    | my_null     |
|      2 | my_null     | 1           |
|      2 | my_null     | [2]         |
|      2 | my_null     | [3, [4, 5]] |
|      2 | my_null     | my_empty    |
|      2 | my_null     | my_null     |
|      3 | 1           | 1           |
|      3 | 1           | [2]         |
|      3 | 1           | [3, [4, 5]] |
|      3 | 1           | my_empty    |
|      3 | 1           | my_null     |
|      3 | [2]         | 1           |
|      3 | [2]         | [2]         |
|      3 | [2]         | [3, [4, 5]] |
|      3 | [2]         | my_empty    |
|      3 | [2]         | my_null     |
|      3 | [3, [4, 5]] | 1           |
|      3 | [3, [4, 5]] | [2]         |
|      3 | [3, [4, 5]] | [3, [4, 5]] |
|      3 | [3, [4, 5]] | my_empty    |
|      3 | [3, [4, 5]] | my_null     |
|      3 | my_empty    | 1           |
|      3 | my_empty    | [2]         |
|      3 | my_empty    | [3, [4, 5]] |
|      3 | my_empty    | my_empty    |
|      3 | my_empty    | my_null     |
|      3 | my_null     | 1           |
|      3 | my_null     | [2]         |
|      3 | my_null     | [3, [4, 5]] |
|      3 | my_null     | my_empty    |
|      3 | my_null     | my_null     |
|      4 | 1           | 1           |
|      4 | 1           | [2]         |
|      4 | 1           | [3, [4, 5]] |
|      4 | 1           | my_empty    |
|      4 | 1           | my_null     |
|      4 | [2]         | 1           |
|      4 | [2]         | [2]         |
|      4 | [2]         | [3, [4, 5]] |
|      4 | [2]         | my_empty    |
|      4 | [2]         | my_null     |
|      4 | [3, [4, 5]] | 1           |
|      4 | [3, [4, 5]] | [2]         |
|      4 | [3, [4, 5]] | [3, [4, 5]] |
|      4 | [3, [4, 5]] | my_empty    |
|      4 | [3, [4, 5]] | my_null     |
|      4 | my_empty    | 1           |
|      4 | my_empty    | [2]         |
|      4 | my_empty    | [3, [4, 5]] |
|      4 | my_empty    | my_empty    |
|      4 | my_empty    | my_null     |
|      4 | my_null     | 1           |
|      4 | my_null     | [2]         |
|      4 | my_null     | [3, [4, 5]] |
|      4 | my_null     | my_empty    |
|      4 | my_null     | my_null     |
+--------+-------------+-------------+
(125 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A1_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c1,
       c2
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex)) AS u1(c1)), unnest(mv_to_array(c_mv_complex)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN ('my_null',
                 'my_empty',
                 '1',
                 '[2]',
                 '[3, [4, 5]]'))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+-------------+-------------+
| c_long | c1          | c2          |
+--------+-------------+-------------+
|      0 | 1           | 1           |
|      0 | 1           | [2]         |
|      0 | 1           | [3, [4, 5]] |
|      0 | 1           | my_empty    |
|      0 | 1           | my_null     |
|      0 | [2]         | 1           |
|      0 | [2]         | [2]         |
|      0 | [2]         | [3, [4, 5]] |
|      0 | [2]         | my_empty    |
|      0 | [2]         | my_null     |
|      0 | [3, [4, 5]] | 1           |
|      0 | [3, [4, 5]] | [2]         |
|      0 | [3, [4, 5]] | [3, [4, 5]] |
|      0 | [3, [4, 5]] | my_empty    |
|      0 | [3, [4, 5]] | my_null     |
|      0 | my_empty    | 1           |
|      0 | my_empty    | [2]         |
|      0 | my_empty    | [3, [4, 5]] |
|      0 | my_empty    | my_empty    |
|      0 | my_empty    | my_null     |
|      0 | my_null     | 1           |
|      0 | my_null     | [2]         |
|      0 | my_null     | [3, [4, 5]] |
|      0 | my_null     | my_empty    |
|      0 | my_null     | my_null     |
|      1 | 1           | 1           |
|      1 | 1           | [2]         |
|      1 | 1           | [3, [4, 5]] |
|      1 | 1           | my_empty    |
|      1 | 1           | my_null     |
|      1 | [2]         | 1           |
|      1 | [2]         | [2]         |
|      1 | [2]         | [3, [4, 5]] |
|      1 | [2]         | my_empty    |
|      1 | [2]         | my_null     |
|      1 | [3, [4, 5]] | 1           |
|      1 | [3, [4, 5]] | [2]         |
|      1 | [3, [4, 5]] | [3, [4, 5]] |
|      1 | [3, [4, 5]] | my_empty    |
|      1 | [3, [4, 5]] | my_null     |
|      1 | my_empty    | 1           |
|      1 | my_empty    | [2]         |
|      1 | my_empty    | [3, [4, 5]] |
|      1 | my_empty    | my_empty    |
|      1 | my_empty    | my_null     |
|      1 | my_null     | 1           |
|      1 | my_null     | [2]         |
|      1 | my_null     | [3, [4, 5]] |
|      1 | my_null     | my_empty    |
|      1 | my_null     | my_null     |
|      2 | 1           | 1           |
|      2 | 1           | [2]         |
|      2 | 1           | [3, [4, 5]] |
|      2 | 1           | my_empty    |
|      2 | 1           | my_null     |
|      2 | [2]         | 1           |
|      2 | [2]         | [2]         |
|      2 | [2]         | [3, [4, 5]] |
|      2 | [2]         | my_empty    |
|      2 | [2]         | my_null     |
|      2 | [3, [4, 5]] | 1           |
|      2 | [3, [4, 5]] | [2]         |
|      2 | [3, [4, 5]] | [3, [4, 5]] |
|      2 | [3, [4, 5]] | my_empty    |
|      2 | [3, [4, 5]] | my_null     |
|      2 | my_empty    | 1           |
|      2 | my_empty    | [2]         |
|      2 | my_empty    | [3, [4, 5]] |
|      2 | my_empty    | my_empty    |
|      2 | my_empty    | my_null     |
|      2 | my_null     | 1           |
|      2 | my_null     | [2]         |
|      2 | my_null     | [3, [4, 5]] |
|      2 | my_null     | my_empty    |
|      2 | my_null     | my_null     |
|      3 | 1           | 1           |
|      3 | 1           | [2]         |
|      3 | 1           | [3, [4, 5]] |
|      3 | 1           | my_empty    |
|      3 | 1           | my_null     |
|      3 | [2]         | 1           |
|      3 | [2]         | [2]         |
|      3 | [2]         | [3, [4, 5]] |
|      3 | [2]         | my_empty    |
|      3 | [2]         | my_null     |
|      3 | [3, [4, 5]] | 1           |
|      3 | [3, [4, 5]] | [2]         |
|      3 | [3, [4, 5]] | [3, [4, 5]] |
|      3 | [3, [4, 5]] | my_empty    |
|      3 | [3, [4, 5]] | my_null     |
|      3 | my_empty    | 1           |
|      3 | my_empty    | [2]         |
|      3 | my_empty    | [3, [4, 5]] |
|      3 | my_empty    | my_empty    |
|      3 | my_empty    | my_null     |
|      3 | my_null     | 1           |
|      3 | my_null     | [2]         |
|      3 | my_null     | [3, [4, 5]] |
|      3 | my_null     | my_empty    |
|      3 | my_null     | my_null     |
|      4 | 1           | 1           |
|      4 | 1           | [2]         |
|      4 | 1           | [3, [4, 5]] |
|      4 | 1           | my_empty    |
|      4 | 1           | my_null     |
|      4 | [2]         | 1           |
|      4 | [2]         | [2]         |
|      4 | [2]         | [3, [4, 5]] |
|      4 | [2]         | my_empty    |
|      4 | [2]         | my_null     |
|      4 | [3, [4, 5]] | 1           |
|      4 | [3, [4, 5]] | [2]         |
|      4 | [3, [4, 5]] | [3, [4, 5]] |
|      4 | [3, [4, 5]] | my_empty    |
|      4 | [3, [4, 5]] | my_null     |
|      4 | my_empty    | 1           |
|      4 | my_empty    | [2]         |
|      4 | my_empty    | [3, [4, 5]] |
|      4 | my_empty    | my_empty    |
|      4 | my_empty    | my_null     |
|      4 | my_null     | 1           |
|      4 | my_null     | [2]         |
|      4 | my_null     | [3, [4, 5]] |
|      4 | my_null     | my_empty    |
|      4 | my_null     | my_null     |
+--------+-------------+-------------+
(125 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A1_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex)) AS u1(c1))
SELECT c_long,
       c1,
       c2
FROM t1,
     unnest(mv_to_array(c_mv_complex)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN ('my_null',
                 'my_empty',
                 '1',
                 '[2]',
                 '[3, [4, 5]]'))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+-------------+-------------+
| c_long | c1          | c2          |
+--------+-------------+-------------+
|      0 | 1           | 1           |
|      0 | 1           | [2]         |
|      0 | 1           | [3, [4, 5]] |
|      0 | 1           | my_empty    |
|      0 | 1           | my_null     |
|      0 | [2]         | 1           |
|      0 | [2]         | [2]         |
|      0 | [2]         | [3, [4, 5]] |
|      0 | [2]         | my_empty    |
|      0 | [2]         | my_null     |
|      0 | [3, [4, 5]] | 1           |
|      0 | [3, [4, 5]] | [2]         |
|      0 | [3, [4, 5]] | [3, [4, 5]] |
|      0 | [3, [4, 5]] | my_empty    |
|      0 | [3, [4, 5]] | my_null     |
|      0 | my_empty    | 1           |
|      0 | my_empty    | [2]         |
|      0 | my_empty    | [3, [4, 5]] |
|      0 | my_empty    | my_empty    |
|      0 | my_empty    | my_null     |
|      0 | my_null     | 1           |
|      0 | my_null     | [2]         |
|      0 | my_null     | [3, [4, 5]] |
|      0 | my_null     | my_empty    |
|      0 | my_null     | my_null     |
|      1 | 1           | 1           |
|      1 | 1           | [2]         |
|      1 | 1           | [3, [4, 5]] |
|      1 | 1           | my_empty    |
|      1 | 1           | my_null     |
|      1 | [2]         | 1           |
|      1 | [2]         | [2]         |
|      1 | [2]         | [3, [4, 5]] |
|      1 | [2]         | my_empty    |
|      1 | [2]         | my_null     |
|      1 | [3, [4, 5]] | 1           |
|      1 | [3, [4, 5]] | [2]         |
|      1 | [3, [4, 5]] | [3, [4, 5]] |
|      1 | [3, [4, 5]] | my_empty    |
|      1 | [3, [4, 5]] | my_null     |
|      1 | my_empty    | 1           |
|      1 | my_empty    | [2]         |
|      1 | my_empty    | [3, [4, 5]] |
|      1 | my_empty    | my_empty    |
|      1 | my_empty    | my_null     |
|      1 | my_null     | 1           |
|      1 | my_null     | [2]         |
|      1 | my_null     | [3, [4, 5]] |
|      1 | my_null     | my_empty    |
|      1 | my_null     | my_null     |
|      2 | 1           | 1           |
|      2 | 1           | [2]         |
|      2 | 1           | [3, [4, 5]] |
|      2 | 1           | my_empty    |
|      2 | 1           | my_null     |
|      2 | [2]         | 1           |
|      2 | [2]         | [2]         |
|      2 | [2]         | [3, [4, 5]] |
|      2 | [2]         | my_empty    |
|      2 | [2]         | my_null     |
|      2 | [3, [4, 5]] | 1           |
|      2 | [3, [4, 5]] | [2]         |
|      2 | [3, [4, 5]] | [3, [4, 5]] |
|      2 | [3, [4, 5]] | my_empty    |
|      2 | [3, [4, 5]] | my_null     |
|      2 | my_empty    | 1           |
|      2 | my_empty    | [2]         |
|      2 | my_empty    | [3, [4, 5]] |
|      2 | my_empty    | my_empty    |
|      2 | my_empty    | my_null     |
|      2 | my_null     | 1           |
|      2 | my_null     | [2]         |
|      2 | my_null     | [3, [4, 5]] |
|      2 | my_null     | my_empty    |
|      2 | my_null     | my_null     |
|      3 | 1           | 1           |
|      3 | 1           | [2]         |
|      3 | 1           | [3, [4, 5]] |
|      3 | 1           | my_empty    |
|      3 | 1           | my_null     |
|      3 | [2]         | 1           |
|      3 | [2]         | [2]         |
|      3 | [2]         | [3, [4, 5]] |
|      3 | [2]         | my_empty    |
|      3 | [2]         | my_null     |
|      3 | [3, [4, 5]] | 1           |
|      3 | [3, [4, 5]] | [2]         |
|      3 | [3, [4, 5]] | [3, [4, 5]] |
|      3 | [3, [4, 5]] | my_empty    |
|      3 | [3, [4, 5]] | my_null     |
|      3 | my_empty    | 1           |
|      3 | my_empty    | [2]         |
|      3 | my_empty    | [3, [4, 5]] |
|      3 | my_empty    | my_empty    |
|      3 | my_empty    | my_null     |
|      3 | my_null     | 1           |
|      3 | my_null     | [2]         |
|      3 | my_null     | [3, [4, 5]] |
|      3 | my_null     | my_empty    |
|      3 | my_null     | my_null     |
|      4 | 1           | 1           |
|      4 | 1           | [2]         |
|      4 | 1           | [3, [4, 5]] |
|      4 | 1           | my_empty    |
|      4 | 1           | my_null     |
|      4 | [2]         | 1           |
|      4 | [2]         | [2]         |
|      4 | [2]         | [3, [4, 5]] |
|      4 | [2]         | my_empty    |
|      4 | [2]         | my_null     |
|      4 | [3, [4, 5]] | 1           |
|      4 | [3, [4, 5]] | [2]         |
|      4 | [3, [4, 5]] | [3, [4, 5]] |
|      4 | [3, [4, 5]] | my_empty    |
|      4 | [3, [4, 5]] | my_null     |
|      4 | my_empty    | 1           |
|      4 | my_empty    | [2]         |
|      4 | my_empty    | [3, [4, 5]] |
|      4 | my_empty    | my_empty    |
|      4 | my_empty    | my_null     |
|      4 | my_null     | 1           |
|      4 | my_null     | [2]         |
|      4 | my_null     | [3, [4, 5]] |
|      4 | my_null     | my_empty    |
|      4 | my_null     | my_null     |
+--------+-------------+-------------+
(125 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A2_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c1,
       c2
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u1(c1),
     unnest(mv_to_array(c_mv_num)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN ('-1',
                 '0',
                 '1',
                 '2',
                 '3'))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+----+----+
| c_long | c1 | c2 |
+--------+----+----+
|      0 | -1 | -1 |
|      0 | -1 | 0  |
|      0 | -1 | 1  |
|      0 | -1 | 2  |
|      0 | -1 | 3  |
|      0 | 0  | -1 |
|      0 | 0  | 0  |
|      0 | 0  | 1  |
|      0 | 0  | 2  |
|      0 | 0  | 3  |
|      0 | 1  | -1 |
|      0 | 1  | 0  |
|      0 | 1  | 1  |
|      0 | 1  | 2  |
|      0 | 1  | 3  |
|      0 | 2  | -1 |
|      0 | 2  | 0  |
|      0 | 2  | 1  |
|      0 | 2  | 2  |
|      0 | 2  | 3  |
|      0 | 3  | -1 |
|      0 | 3  | 0  |
|      0 | 3  | 1  |
|      0 | 3  | 2  |
|      0 | 3  | 3  |
|      1 | -1 | -1 |
|      1 | -1 | 0  |
|      1 | -1 | 1  |
|      1 | -1 | 2  |
|      1 | -1 | 3  |
|      1 | 0  | -1 |
|      1 | 0  | 0  |
|      1 | 0  | 1  |
|      1 | 0  | 2  |
|      1 | 0  | 3  |
|      1 | 1  | -1 |
|      1 | 1  | 0  |
|      1 | 1  | 1  |
|      1 | 1  | 2  |
|      1 | 1  | 3  |
|      1 | 2  | -1 |
|      1 | 2  | 0  |
|      1 | 2  | 1  |
|      1 | 2  | 2  |
|      1 | 2  | 3  |
|      1 | 3  | -1 |
|      1 | 3  | 0  |
|      1 | 3  | 1  |
|      1 | 3  | 2  |
|      1 | 3  | 3  |
|      2 | -1 | -1 |
|      2 | -1 | 0  |
|      2 | -1 | 1  |
|      2 | -1 | 2  |
|      2 | -1 | 3  |
|      2 | 0  | -1 |
|      2 | 0  | 0  |
|      2 | 0  | 1  |
|      2 | 0  | 2  |
|      2 | 0  | 3  |
|      2 | 1  | -1 |
|      2 | 1  | 0  |
|      2 | 1  | 1  |
|      2 | 1  | 2  |
|      2 | 1  | 3  |
|      2 | 2  | -1 |
|      2 | 2  | 0  |
|      2 | 2  | 1  |
|      2 | 2  | 2  |
|      2 | 2  | 3  |
|      2 | 3  | -1 |
|      2 | 3  | 0  |
|      2 | 3  | 1  |
|      2 | 3  | 2  |
|      2 | 3  | 3  |
|      3 | -1 | -1 |
|      3 | -1 | 0  |
|      3 | -1 | 1  |
|      3 | -1 | 2  |
|      3 | -1 | 3  |
|      3 | 0  | -1 |
|      3 | 0  | 0  |
|      3 | 0  | 1  |
|      3 | 0  | 2  |
|      3 | 0  | 3  |
|      3 | 1  | -1 |
|      3 | 1  | 0  |
|      3 | 1  | 1  |
|      3 | 1  | 2  |
|      3 | 1  | 3  |
|      3 | 2  | -1 |
|      3 | 2  | 0  |
|      3 | 2  | 1  |
|      3 | 2  | 2  |
|      3 | 2  | 3  |
|      3 | 3  | -1 |
|      3 | 3  | 0  |
|      3 | 3  | 1  |
|      3 | 3  | 2  |
|      3 | 3  | 3  |
|      4 | -1 | -1 |
|      4 | -1 | 0  |
|      4 | -1 | 1  |
|      4 | -1 | 2  |
|      4 | -1 | 3  |
|      4 | 0  | -1 |
|      4 | 0  | 0  |
|      4 | 0  | 1  |
|      4 | 0  | 2  |
|      4 | 0  | 3  |
|      4 | 1  | -1 |
|      4 | 1  | 0  |
|      4 | 1  | 1  |
|      4 | 1  | 2  |
|      4 | 1  | 3  |
|      4 | 2  | -1 |
|      4 | 2  | 0  |
|      4 | 2  | 1  |
|      4 | 2  | 2  |
|      4 | 2  | 3  |
|      4 | 3  | -1 |
|      4 | 3  | 0  |
|      4 | 3  | 1  |
|      4 | 3  | 2  |
|      4 | 3  | 3  |
+--------+----+----+
(125 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A2_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c1,
       c2
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num)) AS u1(c1)), unnest(mv_to_array(c_mv_num)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN ('-1',
                 '0',
                 '1',
                 '2',
                 '3'))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+----+----+
| c_long | c1 | c2 |
+--------+----+----+
|      0 | -1 | -1 |
|      0 | -1 | 0  |
|      0 | -1 | 1  |
|      0 | -1 | 2  |
|      0 | -1 | 3  |
|      0 | 0  | -1 |
|      0 | 0  | 0  |
|      0 | 0  | 1  |
|      0 | 0  | 2  |
|      0 | 0  | 3  |
|      0 | 1  | -1 |
|      0 | 1  | 0  |
|      0 | 1  | 1  |
|      0 | 1  | 2  |
|      0 | 1  | 3  |
|      0 | 2  | -1 |
|      0 | 2  | 0  |
|      0 | 2  | 1  |
|      0 | 2  | 2  |
|      0 | 2  | 3  |
|      0 | 3  | -1 |
|      0 | 3  | 0  |
|      0 | 3  | 1  |
|      0 | 3  | 2  |
|      0 | 3  | 3  |
|      1 | -1 | -1 |
|      1 | -1 | 0  |
|      1 | -1 | 1  |
|      1 | -1 | 2  |
|      1 | -1 | 3  |
|      1 | 0  | -1 |
|      1 | 0  | 0  |
|      1 | 0  | 1  |
|      1 | 0  | 2  |
|      1 | 0  | 3  |
|      1 | 1  | -1 |
|      1 | 1  | 0  |
|      1 | 1  | 1  |
|      1 | 1  | 2  |
|      1 | 1  | 3  |
|      1 | 2  | -1 |
|      1 | 2  | 0  |
|      1 | 2  | 1  |
|      1 | 2  | 2  |
|      1 | 2  | 3  |
|      1 | 3  | -1 |
|      1 | 3  | 0  |
|      1 | 3  | 1  |
|      1 | 3  | 2  |
|      1 | 3  | 3  |
|      2 | -1 | -1 |
|      2 | -1 | 0  |
|      2 | -1 | 1  |
|      2 | -1 | 2  |
|      2 | -1 | 3  |
|      2 | 0  | -1 |
|      2 | 0  | 0  |
|      2 | 0  | 1  |
|      2 | 0  | 2  |
|      2 | 0  | 3  |
|      2 | 1  | -1 |
|      2 | 1  | 0  |
|      2 | 1  | 1  |
|      2 | 1  | 2  |
|      2 | 1  | 3  |
|      2 | 2  | -1 |
|      2 | 2  | 0  |
|      2 | 2  | 1  |
|      2 | 2  | 2  |
|      2 | 2  | 3  |
|      2 | 3  | -1 |
|      2 | 3  | 0  |
|      2 | 3  | 1  |
|      2 | 3  | 2  |
|      2 | 3  | 3  |
|      3 | -1 | -1 |
|      3 | -1 | 0  |
|      3 | -1 | 1  |
|      3 | -1 | 2  |
|      3 | -1 | 3  |
|      3 | 0  | -1 |
|      3 | 0  | 0  |
|      3 | 0  | 1  |
|      3 | 0  | 2  |
|      3 | 0  | 3  |
|      3 | 1  | -1 |
|      3 | 1  | 0  |
|      3 | 1  | 1  |
|      3 | 1  | 2  |
|      3 | 1  | 3  |
|      3 | 2  | -1 |
|      3 | 2  | 0  |
|      3 | 2  | 1  |
|      3 | 2  | 2  |
|      3 | 2  | 3  |
|      3 | 3  | -1 |
|      3 | 3  | 0  |
|      3 | 3  | 1  |
|      3 | 3  | 2  |
|      3 | 3  | 3  |
|      4 | -1 | -1 |
|      4 | -1 | 0  |
|      4 | -1 | 1  |
|      4 | -1 | 2  |
|      4 | -1 | 3  |
|      4 | 0  | -1 |
|      4 | 0  | 0  |
|      4 | 0  | 1  |
|      4 | 0  | 2  |
|      4 | 0  | 3  |
|      4 | 1  | -1 |
|      4 | 1  | 0  |
|      4 | 1  | 1  |
|      4 | 1  | 2  |
|      4 | 1  | 3  |
|      4 | 2  | -1 |
|      4 | 2  | 0  |
|      4 | 2  | 1  |
|      4 | 2  | 2  |
|      4 | 2  | 3  |
|      4 | 3  | -1 |
|      4 | 3  | 0  |
|      4 | 3  | 1  |
|      4 | 3  | 2  |
|      4 | 3  | 3  |
+--------+----+----+
(125 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A2_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num)) AS u1(c1))
SELECT c_long,
       c1,
       c2
FROM t1,
     unnest(mv_to_array(c_mv_num)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN ('-1',
                 '0',
                 '1',
                 '2',
                 '3'))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+----+----+
| c_long | c1 | c2 |
+--------+----+----+
|      0 | -1 | -1 |
|      0 | -1 | 0  |
|      0 | -1 | 1  |
|      0 | -1 | 2  |
|      0 | -1 | 3  |
|      0 | 0  | -1 |
|      0 | 0  | 0  |
|      0 | 0  | 1  |
|      0 | 0  | 2  |
|      0 | 0  | 3  |
|      0 | 1  | -1 |
|      0 | 1  | 0  |
|      0 | 1  | 1  |
|      0 | 1  | 2  |
|      0 | 1  | 3  |
|      0 | 2  | -1 |
|      0 | 2  | 0  |
|      0 | 2  | 1  |
|      0 | 2  | 2  |
|      0 | 2  | 3  |
|      0 | 3  | -1 |
|      0 | 3  | 0  |
|      0 | 3  | 1  |
|      0 | 3  | 2  |
|      0 | 3  | 3  |
|      1 | -1 | -1 |
|      1 | -1 | 0  |
|      1 | -1 | 1  |
|      1 | -1 | 2  |
|      1 | -1 | 3  |
|      1 | 0  | -1 |
|      1 | 0  | 0  |
|      1 | 0  | 1  |
|      1 | 0  | 2  |
|      1 | 0  | 3  |
|      1 | 1  | -1 |
|      1 | 1  | 0  |
|      1 | 1  | 1  |
|      1 | 1  | 2  |
|      1 | 1  | 3  |
|      1 | 2  | -1 |
|      1 | 2  | 0  |
|      1 | 2  | 1  |
|      1 | 2  | 2  |
|      1 | 2  | 3  |
|      1 | 3  | -1 |
|      1 | 3  | 0  |
|      1 | 3  | 1  |
|      1 | 3  | 2  |
|      1 | 3  | 3  |
|      2 | -1 | -1 |
|      2 | -1 | 0  |
|      2 | -1 | 1  |
|      2 | -1 | 2  |
|      2 | -1 | 3  |
|      2 | 0  | -1 |
|      2 | 0  | 0  |
|      2 | 0  | 1  |
|      2 | 0  | 2  |
|      2 | 0  | 3  |
|      2 | 1  | -1 |
|      2 | 1  | 0  |
|      2 | 1  | 1  |
|      2 | 1  | 2  |
|      2 | 1  | 3  |
|      2 | 2  | -1 |
|      2 | 2  | 0  |
|      2 | 2  | 1  |
|      2 | 2  | 2  |
|      2 | 2  | 3  |
|      2 | 3  | -1 |
|      2 | 3  | 0  |
|      2 | 3  | 1  |
|      2 | 3  | 2  |
|      2 | 3  | 3  |
|      3 | -1 | -1 |
|      3 | -1 | 0  |
|      3 | -1 | 1  |
|      3 | -1 | 2  |
|      3 | -1 | 3  |
|      3 | 0  | -1 |
|      3 | 0  | 0  |
|      3 | 0  | 1  |
|      3 | 0  | 2  |
|      3 | 0  | 3  |
|      3 | 1  | -1 |
|      3 | 1  | 0  |
|      3 | 1  | 1  |
|      3 | 1  | 2  |
|      3 | 1  | 3  |
|      3 | 2  | -1 |
|      3 | 2  | 0  |
|      3 | 2  | 1  |
|      3 | 2  | 2  |
|      3 | 2  | 3  |
|      3 | 3  | -1 |
|      3 | 3  | 0  |
|      3 | 3  | 1  |
|      3 | 3  | 2  |
|      3 | 3  | 3  |
|      4 | -1 | -1 |
|      4 | -1 | 0  |
|      4 | -1 | 1  |
|      4 | -1 | 2  |
|      4 | -1 | 3  |
|      4 | 0  | -1 |
|      4 | 0  | 0  |
|      4 | 0  | 1  |
|      4 | 0  | 2  |
|      4 | 0  | 3  |
|      4 | 1  | -1 |
|      4 | 1  | 0  |
|      4 | 1  | 1  |
|      4 | 1  | 2  |
|      4 | 1  | 3  |
|      4 | 2  | -1 |
|      4 | 2  | 0  |
|      4 | 2  | 1  |
|      4 | 2  | 2  |
|      4 | 2  | 3  |
|      4 | 3  | -1 |
|      4 | 3  | 0  |
|      4 | 3  | 1  |
|      4 | 3  | 2  |
|      4 | 3  | 3  |
+--------+----+----+
(125 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A3_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c1,
       c2
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u1(c1),
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN ('',
                 '1',
                 '[2]',
                 '[3, [4, 5]]'))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+-------------+-------------+
| c_long | c1          | c2          |
+--------+-------------+-------------+
|      0 |             |             |
|      0 |             | 1           |
|      0 |             | [2]         |
|      0 |             | [3, [4, 5]] |
|      0 |             |             |
|      0 | 1           |             |
|      0 | 1           | 1           |
|      0 | 1           | [2]         |
|      0 | 1           | [3, [4, 5]] |
|      0 | 1           |             |
|      0 | [2]         |             |
|      0 | [2]         | 1           |
|      0 | [2]         | [2]         |
|      0 | [2]         | [3, [4, 5]] |
|      0 | [2]         |             |
|      0 | [3, [4, 5]] |             |
|      0 | [3, [4, 5]] | 1           |
|      0 | [3, [4, 5]] | [2]         |
|      0 | [3, [4, 5]] | [3, [4, 5]] |
|      0 | [3, [4, 5]] |             |
|      0 |             |             |
|      0 |             | 1           |
|      0 |             | [2]         |
|      0 |             | [3, [4, 5]] |
|      0 |             |             |
|      1 |             |             |
|      1 |             | 1           |
|      1 |             | [2]         |
|      1 |             | [3, [4, 5]] |
|      1 |             |             |
|      1 | 1           |             |
|      1 | 1           | 1           |
|      1 | 1           | [2]         |
|      1 | 1           | [3, [4, 5]] |
|      1 | 1           |             |
|      1 | [2]         |             |
|      1 | [2]         | 1           |
|      1 | [2]         | [2]         |
|      1 | [2]         | [3, [4, 5]] |
|      1 | [2]         |             |
|      1 | [3, [4, 5]] |             |
|      1 | [3, [4, 5]] | 1           |
|      1 | [3, [4, 5]] | [2]         |
|      1 | [3, [4, 5]] | [3, [4, 5]] |
|      1 | [3, [4, 5]] |             |
|      1 |             |             |
|      1 |             | 1           |
|      1 |             | [2]         |
|      1 |             | [3, [4, 5]] |
|      1 |             |             |
|      2 |             |             |
|      2 |             | 1           |
|      2 |             | [2]         |
|      2 |             | [3, [4, 5]] |
|      2 |             |             |
|      2 | 1           |             |
|      2 | 1           | 1           |
|      2 | 1           | [2]         |
|      2 | 1           | [3, [4, 5]] |
|      2 | 1           |             |
|      2 | [2]         |             |
|      2 | [2]         | 1           |
|      2 | [2]         | [2]         |
|      2 | [2]         | [3, [4, 5]] |
|      2 | [2]         |             |
|      2 | [3, [4, 5]] |             |
|      2 | [3, [4, 5]] | 1           |
|      2 | [3, [4, 5]] | [2]         |
|      2 | [3, [4, 5]] | [3, [4, 5]] |
|      2 | [3, [4, 5]] |             |
|      2 |             |             |
|      2 |             | 1           |
|      2 |             | [2]         |
|      2 |             | [3, [4, 5]] |
|      2 |             |             |
|      3 |             |             |
|      3 |             | 1           |
|      3 |             | [2]         |
|      3 |             | [3, [4, 5]] |
|      3 |             |             |
|      3 | 1           |             |
|      3 | 1           | 1           |
|      3 | 1           | [2]         |
|      3 | 1           | [3, [4, 5]] |
|      3 | 1           |             |
|      3 | [2]         |             |
|      3 | [2]         | 1           |
|      3 | [2]         | [2]         |
|      3 | [2]         | [3, [4, 5]] |
|      3 | [2]         |             |
|      3 | [3, [4, 5]] |             |
|      3 | [3, [4, 5]] | 1           |
|      3 | [3, [4, 5]] | [2]         |
|      3 | [3, [4, 5]] | [3, [4, 5]] |
|      3 | [3, [4, 5]] |             |
|      3 |             |             |
|      3 |             | 1           |
|      3 |             | [2]         |
|      3 |             | [3, [4, 5]] |
|      3 |             |             |
|      4 |             |             |
|      4 |             | 1           |
|      4 |             | [2]         |
|      4 |             | [3, [4, 5]] |
|      4 |             |             |
|      4 | 1           |             |
|      4 | 1           | 1           |
|      4 | 1           | [2]         |
|      4 | 1           | [3, [4, 5]] |
|      4 | 1           |             |
|      4 | [2]         |             |
|      4 | [2]         | 1           |
|      4 | [2]         | [2]         |
|      4 | [2]         | [3, [4, 5]] |
|      4 | [2]         |             |
|      4 | [3, [4, 5]] |             |
|      4 | [3, [4, 5]] | 1           |
|      4 | [3, [4, 5]] | [2]         |
|      4 | [3, [4, 5]] | [3, [4, 5]] |
|      4 | [3, [4, 5]] |             |
|      4 |             |             |
|      4 |             | 1           |
|      4 |             | [2]         |
|      4 |             | [3, [4, 5]] |
|      4 |             |             |
+--------+-------------+-------------+
(125 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A3_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c1,
       c2
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u1(c1)), unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN ('',
                 '1',
                 '[2]',
                 '[3, [4, 5]]'))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+-------------+-------------+
| c_long | c1          | c2          |
+--------+-------------+-------------+
|      0 |             |             |
|      0 |             | 1           |
|      0 |             | [2]         |
|      0 |             | [3, [4, 5]] |
|      0 |             |             |
|      0 | 1           |             |
|      0 | 1           | 1           |
|      0 | 1           | [2]         |
|      0 | 1           | [3, [4, 5]] |
|      0 | 1           |             |
|      0 | [2]         |             |
|      0 | [2]         | 1           |
|      0 | [2]         | [2]         |
|      0 | [2]         | [3, [4, 5]] |
|      0 | [2]         |             |
|      0 | [3, [4, 5]] |             |
|      0 | [3, [4, 5]] | 1           |
|      0 | [3, [4, 5]] | [2]         |
|      0 | [3, [4, 5]] | [3, [4, 5]] |
|      0 | [3, [4, 5]] |             |
|      0 |             |             |
|      0 |             | 1           |
|      0 |             | [2]         |
|      0 |             | [3, [4, 5]] |
|      0 |             |             |
|      1 |             |             |
|      1 |             | 1           |
|      1 |             | [2]         |
|      1 |             | [3, [4, 5]] |
|      1 |             |             |
|      1 | 1           |             |
|      1 | 1           | 1           |
|      1 | 1           | [2]         |
|      1 | 1           | [3, [4, 5]] |
|      1 | 1           |             |
|      1 | [2]         |             |
|      1 | [2]         | 1           |
|      1 | [2]         | [2]         |
|      1 | [2]         | [3, [4, 5]] |
|      1 | [2]         |             |
|      1 | [3, [4, 5]] |             |
|      1 | [3, [4, 5]] | 1           |
|      1 | [3, [4, 5]] | [2]         |
|      1 | [3, [4, 5]] | [3, [4, 5]] |
|      1 | [3, [4, 5]] |             |
|      1 |             |             |
|      1 |             | 1           |
|      1 |             | [2]         |
|      1 |             | [3, [4, 5]] |
|      1 |             |             |
|      2 |             |             |
|      2 |             | 1           |
|      2 |             | [2]         |
|      2 |             | [3, [4, 5]] |
|      2 |             |             |
|      2 | 1           |             |
|      2 | 1           | 1           |
|      2 | 1           | [2]         |
|      2 | 1           | [3, [4, 5]] |
|      2 | 1           |             |
|      2 | [2]         |             |
|      2 | [2]         | 1           |
|      2 | [2]         | [2]         |
|      2 | [2]         | [3, [4, 5]] |
|      2 | [2]         |             |
|      2 | [3, [4, 5]] |             |
|      2 | [3, [4, 5]] | 1           |
|      2 | [3, [4, 5]] | [2]         |
|      2 | [3, [4, 5]] | [3, [4, 5]] |
|      2 | [3, [4, 5]] |             |
|      2 |             |             |
|      2 |             | 1           |
|      2 |             | [2]         |
|      2 |             | [3, [4, 5]] |
|      2 |             |             |
|      3 |             |             |
|      3 |             | 1           |
|      3 |             | [2]         |
|      3 |             | [3, [4, 5]] |
|      3 |             |             |
|      3 | 1           |             |
|      3 | 1           | 1           |
|      3 | 1           | [2]         |
|      3 | 1           | [3, [4, 5]] |
|      3 | 1           |             |
|      3 | [2]         |             |
|      3 | [2]         | 1           |
|      3 | [2]         | [2]         |
|      3 | [2]         | [3, [4, 5]] |
|      3 | [2]         |             |
|      3 | [3, [4, 5]] |             |
|      3 | [3, [4, 5]] | 1           |
|      3 | [3, [4, 5]] | [2]         |
|      3 | [3, [4, 5]] | [3, [4, 5]] |
|      3 | [3, [4, 5]] |             |
|      3 |             |             |
|      3 |             | 1           |
|      3 |             | [2]         |
|      3 |             | [3, [4, 5]] |
|      3 |             |             |
|      4 |             |             |
|      4 |             | 1           |
|      4 |             | [2]         |
|      4 |             | [3, [4, 5]] |
|      4 |             |             |
|      4 | 1           |             |
|      4 | 1           | 1           |
|      4 | 1           | [2]         |
|      4 | 1           | [3, [4, 5]] |
|      4 | 1           |             |
|      4 | [2]         |             |
|      4 | [2]         | 1           |
|      4 | [2]         | [2]         |
|      4 | [2]         | [3, [4, 5]] |
|      4 | [2]         |             |
|      4 | [3, [4, 5]] |             |
|      4 | [3, [4, 5]] | 1           |
|      4 | [3, [4, 5]] | [2]         |
|      4 | [3, [4, 5]] | [3, [4, 5]] |
|      4 | [3, [4, 5]] |             |
|      4 |             |             |
|      4 |             | 1           |
|      4 |             | [2]         |
|      4 |             | [3, [4, 5]] |
|      4 |             |             |
+--------+-------------+-------------+
(125 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A3_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u1(c1))
SELECT c_long,
       c1,
       c2
FROM t1,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN ('',
                 '1',
                 '[2]',
                 '[3, [4, 5]]'))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+-------------+-------------+
| c_long | c1          | c2          |
+--------+-------------+-------------+
|      0 |             |             |
|      0 |             | 1           |
|      0 |             | [2]         |
|      0 |             | [3, [4, 5]] |
|      0 |             |             |
|      0 | 1           |             |
|      0 | 1           | 1           |
|      0 | 1           | [2]         |
|      0 | 1           | [3, [4, 5]] |
|      0 | 1           |             |
|      0 | [2]         |             |
|      0 | [2]         | 1           |
|      0 | [2]         | [2]         |
|      0 | [2]         | [3, [4, 5]] |
|      0 | [2]         |             |
|      0 | [3, [4, 5]] |             |
|      0 | [3, [4, 5]] | 1           |
|      0 | [3, [4, 5]] | [2]         |
|      0 | [3, [4, 5]] | [3, [4, 5]] |
|      0 | [3, [4, 5]] |             |
|      0 |             |             |
|      0 |             | 1           |
|      0 |             | [2]         |
|      0 |             | [3, [4, 5]] |
|      0 |             |             |
|      1 |             |             |
|      1 |             | 1           |
|      1 |             | [2]         |
|      1 |             | [3, [4, 5]] |
|      1 |             |             |
|      1 | 1           |             |
|      1 | 1           | 1           |
|      1 | 1           | [2]         |
|      1 | 1           | [3, [4, 5]] |
|      1 | 1           |             |
|      1 | [2]         |             |
|      1 | [2]         | 1           |
|      1 | [2]         | [2]         |
|      1 | [2]         | [3, [4, 5]] |
|      1 | [2]         |             |
|      1 | [3, [4, 5]] |             |
|      1 | [3, [4, 5]] | 1           |
|      1 | [3, [4, 5]] | [2]         |
|      1 | [3, [4, 5]] | [3, [4, 5]] |
|      1 | [3, [4, 5]] |             |
|      1 |             |             |
|      1 |             | 1           |
|      1 |             | [2]         |
|      1 |             | [3, [4, 5]] |
|      1 |             |             |
|      2 |             |             |
|      2 |             | 1           |
|      2 |             | [2]         |
|      2 |             | [3, [4, 5]] |
|      2 |             |             |
|      2 | 1           |             |
|      2 | 1           | 1           |
|      2 | 1           | [2]         |
|      2 | 1           | [3, [4, 5]] |
|      2 | 1           |             |
|      2 | [2]         |             |
|      2 | [2]         | 1           |
|      2 | [2]         | [2]         |
|      2 | [2]         | [3, [4, 5]] |
|      2 | [2]         |             |
|      2 | [3, [4, 5]] |             |
|      2 | [3, [4, 5]] | 1           |
|      2 | [3, [4, 5]] | [2]         |
|      2 | [3, [4, 5]] | [3, [4, 5]] |
|      2 | [3, [4, 5]] |             |
|      2 |             |             |
|      2 |             | 1           |
|      2 |             | [2]         |
|      2 |             | [3, [4, 5]] |
|      2 |             |             |
|      3 |             |             |
|      3 |             | 1           |
|      3 |             | [2]         |
|      3 |             | [3, [4, 5]] |
|      3 |             |             |
|      3 | 1           |             |
|      3 | 1           | 1           |
|      3 | 1           | [2]         |
|      3 | 1           | [3, [4, 5]] |
|      3 | 1           |             |
|      3 | [2]         |             |
|      3 | [2]         | 1           |
|      3 | [2]         | [2]         |
|      3 | [2]         | [3, [4, 5]] |
|      3 | [2]         |             |
|      3 | [3, [4, 5]] |             |
|      3 | [3, [4, 5]] | 1           |
|      3 | [3, [4, 5]] | [2]         |
|      3 | [3, [4, 5]] | [3, [4, 5]] |
|      3 | [3, [4, 5]] |             |
|      3 |             |             |
|      3 |             | 1           |
|      3 |             | [2]         |
|      3 |             | [3, [4, 5]] |
|      3 |             |             |
|      4 |             |             |
|      4 |             | 1           |
|      4 |             | [2]         |
|      4 |             | [3, [4, 5]] |
|      4 |             |             |
|      4 | 1           |             |
|      4 | 1           | 1           |
|      4 | 1           | [2]         |
|      4 | 1           | [3, [4, 5]] |
|      4 | 1           |             |
|      4 | [2]         |             |
|      4 | [2]         | 1           |
|      4 | [2]         | [2]         |
|      4 | [2]         | [3, [4, 5]] |
|      4 | [2]         |             |
|      4 | [3, [4, 5]] |             |
|      4 | [3, [4, 5]] | 1           |
|      4 | [3, [4, 5]] | [2]         |
|      4 | [3, [4, 5]] | [3, [4, 5]] |
|      4 | [3, [4, 5]] |             |
|      4 |             |             |
|      4 |             | 1           |
|      4 |             | [2]         |
|      4 |             | [3, [4, 5]] |
|      4 |             |             |
+--------+-------------+-------------+
(125 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A4_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c1,
       c2
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u1(c1),
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN ('',
                 '1',
                 '2',
                 '3'))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+----+----+
| c_long | c1 | c2 |
+--------+----+----+
|      0 |    |    |
|      0 |    | 1  |
|      0 |    | 2  |
|      0 |    | 3  |
|      0 |    |    |
|      0 | 1  |    |
|      0 | 1  | 1  |
|      0 | 1  | 2  |
|      0 | 1  | 3  |
|      0 | 1  |    |
|      0 | 2  |    |
|      0 | 2  | 1  |
|      0 | 2  | 2  |
|      0 | 2  | 3  |
|      0 | 2  |    |
|      0 | 3  |    |
|      0 | 3  | 1  |
|      0 | 3  | 2  |
|      0 | 3  | 3  |
|      0 | 3  |    |
|      0 |    |    |
|      0 |    | 1  |
|      0 |    | 2  |
|      0 |    | 3  |
|      0 |    |    |
|      1 |    |    |
|      1 |    | 1  |
|      1 |    | 2  |
|      1 |    | 3  |
|      1 |    |    |
|      1 | 1  |    |
|      1 | 1  | 1  |
|      1 | 1  | 2  |
|      1 | 1  | 3  |
|      1 | 1  |    |
|      1 | 2  |    |
|      1 | 2  | 1  |
|      1 | 2  | 2  |
|      1 | 2  | 3  |
|      1 | 2  |    |
|      1 | 3  |    |
|      1 | 3  | 1  |
|      1 | 3  | 2  |
|      1 | 3  | 3  |
|      1 | 3  |    |
|      1 |    |    |
|      1 |    | 1  |
|      1 |    | 2  |
|      1 |    | 3  |
|      1 |    |    |
|      2 |    |    |
|      2 |    | 1  |
|      2 |    | 2  |
|      2 |    | 3  |
|      2 |    |    |
|      2 | 1  |    |
|      2 | 1  | 1  |
|      2 | 1  | 2  |
|      2 | 1  | 3  |
|      2 | 1  |    |
|      2 | 2  |    |
|      2 | 2  | 1  |
|      2 | 2  | 2  |
|      2 | 2  | 3  |
|      2 | 2  |    |
|      2 | 3  |    |
|      2 | 3  | 1  |
|      2 | 3  | 2  |
|      2 | 3  | 3  |
|      2 | 3  |    |
|      2 |    |    |
|      2 |    | 1  |
|      2 |    | 2  |
|      2 |    | 3  |
|      2 |    |    |
|      3 |    |    |
|      3 |    | 1  |
|      3 |    | 2  |
|      3 |    | 3  |
|      3 |    |    |
|      3 | 1  |    |
|      3 | 1  | 1  |
|      3 | 1  | 2  |
|      3 | 1  | 3  |
|      3 | 1  |    |
|      3 | 2  |    |
|      3 | 2  | 1  |
|      3 | 2  | 2  |
|      3 | 2  | 3  |
|      3 | 2  |    |
|      3 | 3  |    |
|      3 | 3  | 1  |
|      3 | 3  | 2  |
|      3 | 3  | 3  |
|      3 | 3  |    |
|      3 |    |    |
|      3 |    | 1  |
|      3 |    | 2  |
|      3 |    | 3  |
|      3 |    |    |
|      4 |    |    |
|      4 |    | 1  |
|      4 |    | 2  |
|      4 |    | 3  |
|      4 |    |    |
|      4 | 1  |    |
|      4 | 1  | 1  |
|      4 | 1  | 2  |
|      4 | 1  | 3  |
|      4 | 1  |    |
|      4 | 2  |    |
|      4 | 2  | 1  |
|      4 | 2  | 2  |
|      4 | 2  | 3  |
|      4 | 2  |    |
|      4 | 3  |    |
|      4 | 3  | 1  |
|      4 | 3  | 2  |
|      4 | 3  | 3  |
|      4 | 3  |    |
|      4 |    |    |
|      4 |    | 1  |
|      4 |    | 2  |
|      4 |    | 3  |
|      4 |    |    |
+--------+----+----+
(125 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A4_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c1,
       c2
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u1(c1)), unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN ('',
                 '1',
                 '2',
                 '3'))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+----+----+
| c_long | c1 | c2 |
+--------+----+----+
|      0 |    |    |
|      0 |    | 1  |
|      0 |    | 2  |
|      0 |    | 3  |
|      0 |    |    |
|      0 | 1  |    |
|      0 | 1  | 1  |
|      0 | 1  | 2  |
|      0 | 1  | 3  |
|      0 | 1  |    |
|      0 | 2  |    |
|      0 | 2  | 1  |
|      0 | 2  | 2  |
|      0 | 2  | 3  |
|      0 | 2  |    |
|      0 | 3  |    |
|      0 | 3  | 1  |
|      0 | 3  | 2  |
|      0 | 3  | 3  |
|      0 | 3  |    |
|      0 |    |    |
|      0 |    | 1  |
|      0 |    | 2  |
|      0 |    | 3  |
|      0 |    |    |
|      1 |    |    |
|      1 |    | 1  |
|      1 |    | 2  |
|      1 |    | 3  |
|      1 |    |    |
|      1 | 1  |    |
|      1 | 1  | 1  |
|      1 | 1  | 2  |
|      1 | 1  | 3  |
|      1 | 1  |    |
|      1 | 2  |    |
|      1 | 2  | 1  |
|      1 | 2  | 2  |
|      1 | 2  | 3  |
|      1 | 2  |    |
|      1 | 3  |    |
|      1 | 3  | 1  |
|      1 | 3  | 2  |
|      1 | 3  | 3  |
|      1 | 3  |    |
|      1 |    |    |
|      1 |    | 1  |
|      1 |    | 2  |
|      1 |    | 3  |
|      1 |    |    |
|      2 |    |    |
|      2 |    | 1  |
|      2 |    | 2  |
|      2 |    | 3  |
|      2 |    |    |
|      2 | 1  |    |
|      2 | 1  | 1  |
|      2 | 1  | 2  |
|      2 | 1  | 3  |
|      2 | 1  |    |
|      2 | 2  |    |
|      2 | 2  | 1  |
|      2 | 2  | 2  |
|      2 | 2  | 3  |
|      2 | 2  |    |
|      2 | 3  |    |
|      2 | 3  | 1  |
|      2 | 3  | 2  |
|      2 | 3  | 3  |
|      2 | 3  |    |
|      2 |    |    |
|      2 |    | 1  |
|      2 |    | 2  |
|      2 |    | 3  |
|      2 |    |    |
|      3 |    |    |
|      3 |    | 1  |
|      3 |    | 2  |
|      3 |    | 3  |
|      3 |    |    |
|      3 | 1  |    |
|      3 | 1  | 1  |
|      3 | 1  | 2  |
|      3 | 1  | 3  |
|      3 | 1  |    |
|      3 | 2  |    |
|      3 | 2  | 1  |
|      3 | 2  | 2  |
|      3 | 2  | 3  |
|      3 | 2  |    |
|      3 | 3  |    |
|      3 | 3  | 1  |
|      3 | 3  | 2  |
|      3 | 3  | 3  |
|      3 | 3  |    |
|      3 |    |    |
|      3 |    | 1  |
|      3 |    | 2  |
|      3 |    | 3  |
|      3 |    |    |
|      4 |    |    |
|      4 |    | 1  |
|      4 |    | 2  |
|      4 |    | 3  |
|      4 |    |    |
|      4 | 1  |    |
|      4 | 1  | 1  |
|      4 | 1  | 2  |
|      4 | 1  | 3  |
|      4 | 1  |    |
|      4 | 2  |    |
|      4 | 2  | 1  |
|      4 | 2  | 2  |
|      4 | 2  | 3  |
|      4 | 2  |    |
|      4 | 3  |    |
|      4 | 3  | 1  |
|      4 | 3  | 2  |
|      4 | 3  | 3  |
|      4 | 3  |    |
|      4 |    |    |
|      4 |    | 1  |
|      4 |    | 2  |
|      4 |    | 3  |
|      4 |    |    |
+--------+----+----+
(125 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A4_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u1(c1))
SELECT c_long,
       c1,
       c2
FROM t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN ('',
                 '1',
                 '2',
                 '3'))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+----+----+
| c_long | c1 | c2 |
+--------+----+----+
|      0 |    |    |
|      0 |    | 1  |
|      0 |    | 2  |
|      0 |    | 3  |
|      0 |    |    |
|      0 | 1  |    |
|      0 | 1  | 1  |
|      0 | 1  | 2  |
|      0 | 1  | 3  |
|      0 | 1  |    |
|      0 | 2  |    |
|      0 | 2  | 1  |
|      0 | 2  | 2  |
|      0 | 2  | 3  |
|      0 | 2  |    |
|      0 | 3  |    |
|      0 | 3  | 1  |
|      0 | 3  | 2  |
|      0 | 3  | 3  |
|      0 | 3  |    |
|      0 |    |    |
|      0 |    | 1  |
|      0 |    | 2  |
|      0 |    | 3  |
|      0 |    |    |
|      1 |    |    |
|      1 |    | 1  |
|      1 |    | 2  |
|      1 |    | 3  |
|      1 |    |    |
|      1 | 1  |    |
|      1 | 1  | 1  |
|      1 | 1  | 2  |
|      1 | 1  | 3  |
|      1 | 1  |    |
|      1 | 2  |    |
|      1 | 2  | 1  |
|      1 | 2  | 2  |
|      1 | 2  | 3  |
|      1 | 2  |    |
|      1 | 3  |    |
|      1 | 3  | 1  |
|      1 | 3  | 2  |
|      1 | 3  | 3  |
|      1 | 3  |    |
|      1 |    |    |
|      1 |    | 1  |
|      1 |    | 2  |
|      1 |    | 3  |
|      1 |    |    |
|      2 |    |    |
|      2 |    | 1  |
|      2 |    | 2  |
|      2 |    | 3  |
|      2 |    |    |
|      2 | 1  |    |
|      2 | 1  | 1  |
|      2 | 1  | 2  |
|      2 | 1  | 3  |
|      2 | 1  |    |
|      2 | 2  |    |
|      2 | 2  | 1  |
|      2 | 2  | 2  |
|      2 | 2  | 3  |
|      2 | 2  |    |
|      2 | 3  |    |
|      2 | 3  | 1  |
|      2 | 3  | 2  |
|      2 | 3  | 3  |
|      2 | 3  |    |
|      2 |    |    |
|      2 |    | 1  |
|      2 |    | 2  |
|      2 |    | 3  |
|      2 |    |    |
|      3 |    |    |
|      3 |    | 1  |
|      3 |    | 2  |
|      3 |    | 3  |
|      3 |    |    |
|      3 | 1  |    |
|      3 | 1  | 1  |
|      3 | 1  | 2  |
|      3 | 1  | 3  |
|      3 | 1  |    |
|      3 | 2  |    |
|      3 | 2  | 1  |
|      3 | 2  | 2  |
|      3 | 2  | 3  |
|      3 | 2  |    |
|      3 | 3  |    |
|      3 | 3  | 1  |
|      3 | 3  | 2  |
|      3 | 3  | 3  |
|      3 | 3  |    |
|      3 |    |    |
|      3 |    | 1  |
|      3 |    | 2  |
|      3 |    | 3  |
|      3 |    |    |
|      4 |    |    |
|      4 |    | 1  |
|      4 |    | 2  |
|      4 |    | 3  |
|      4 |    |    |
|      4 | 1  |    |
|      4 | 1  | 1  |
|      4 | 1  | 2  |
|      4 | 1  | 3  |
|      4 | 1  |    |
|      4 | 2  |    |
|      4 | 2  | 1  |
|      4 | 2  | 2  |
|      4 | 2  | 3  |
|      4 | 2  |    |
|      4 | 3  |    |
|      4 | 3  | 1  |
|      4 | 3  | 2  |
|      4 | 3  | 3  |
|      4 | 3  |    |
|      4 |    |    |
|      4 |    | 1  |
|      4 |    | 2  |
|      4 |    | 3  |
|      4 |    |    |
+--------+----+----+
(125 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A5_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c1,
       c2
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u1(c1),
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN ('',
                 '1',
                 '[2]',
                 '[3, [4, 5]]'))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+-------------+-------------+
| c_long | c1          | c2          |
+--------+-------------+-------------+
|      0 |             |             |
|      1 |             |             |
|      2 |             |             |
|      2 |             | 1           |
|      2 |             | [2]         |
|      2 |             | [3, [4, 5]] |
|      2 |             |             |
|      2 | 1           |             |
|      2 | 1           | 1           |
|      2 | 1           | [2]         |
|      2 | 1           | [3, [4, 5]] |
|      2 | 1           |             |
|      2 | [2]         |             |
|      2 | [2]         | 1           |
|      2 | [2]         | [2]         |
|      2 | [2]         | [3, [4, 5]] |
|      2 | [2]         |             |
|      2 | [3, [4, 5]] |             |
|      2 | [3, [4, 5]] | 1           |
|      2 | [3, [4, 5]] | [2]         |
|      2 | [3, [4, 5]] | [3, [4, 5]] |
|      2 | [3, [4, 5]] |             |
|      2 |             |             |
|      2 |             | 1           |
|      2 |             | [2]         |
|      2 |             | [3, [4, 5]] |
|      2 |             |             |
|      3 |             |             |
|      3 |             | 1           |
|      3 |             | [2]         |
|      3 |             | [3, [4, 5]] |
|      3 |             |             |
|      3 | 1           |             |
|      3 | 1           | 1           |
|      3 | 1           | [2]         |
|      3 | 1           | [3, [4, 5]] |
|      3 | 1           |             |
|      3 | [2]         |             |
|      3 | [2]         | 1           |
|      3 | [2]         | [2]         |
|      3 | [2]         | [3, [4, 5]] |
|      3 | [2]         |             |
|      3 | [3, [4, 5]] |             |
|      3 | [3, [4, 5]] | 1           |
|      3 | [3, [4, 5]] | [2]         |
|      3 | [3, [4, 5]] | [3, [4, 5]] |
|      3 | [3, [4, 5]] |             |
|      3 |             |             |
|      3 |             | 1           |
|      3 |             | [2]         |
|      3 |             | [3, [4, 5]] |
|      3 |             |             |
|      4 |             |             |
|      4 |             | 1           |
|      4 |             | [2]         |
|      4 |             | [3, [4, 5]] |
|      4 |             |             |
|      4 | 1           |             |
|      4 | 1           | 1           |
|      4 | 1           | [2]         |
|      4 | 1           | [3, [4, 5]] |
|      4 | 1           |             |
|      4 | [2]         |             |
|      4 | [2]         | 1           |
|      4 | [2]         | [2]         |
|      4 | [2]         | [3, [4, 5]] |
|      4 | [2]         |             |
|      4 | [3, [4, 5]] |             |
|      4 | [3, [4, 5]] | 1           |
|      4 | [3, [4, 5]] | [2]         |
|      4 | [3, [4, 5]] | [3, [4, 5]] |
|      4 | [3, [4, 5]] |             |
|      4 |             |             |
|      4 |             | 1           |
|      4 |             | [2]         |
|      4 |             | [3, [4, 5]] |
|      4 |             |             |
+--------+-------------+-------------+
(77 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A5_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c1,
       c2
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u1(c1)), unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN ('',
                 '1',
                 '[2]',
                 '[3, [4, 5]]'))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+-------------+-------------+
| c_long | c1          | c2          |
+--------+-------------+-------------+
|      0 |             |             |
|      1 |             |             |
|      2 |             |             |
|      2 |             | 1           |
|      2 |             | [2]         |
|      2 |             | [3, [4, 5]] |
|      2 |             |             |
|      2 | 1           |             |
|      2 | 1           | 1           |
|      2 | 1           | [2]         |
|      2 | 1           | [3, [4, 5]] |
|      2 | 1           |             |
|      2 | [2]         |             |
|      2 | [2]         | 1           |
|      2 | [2]         | [2]         |
|      2 | [2]         | [3, [4, 5]] |
|      2 | [2]         |             |
|      2 | [3, [4, 5]] |             |
|      2 | [3, [4, 5]] | 1           |
|      2 | [3, [4, 5]] | [2]         |
|      2 | [3, [4, 5]] | [3, [4, 5]] |
|      2 | [3, [4, 5]] |             |
|      2 |             |             |
|      2 |             | 1           |
|      2 |             | [2]         |
|      2 |             | [3, [4, 5]] |
|      2 |             |             |
|      3 |             |             |
|      3 |             | 1           |
|      3 |             | [2]         |
|      3 |             | [3, [4, 5]] |
|      3 |             |             |
|      3 | 1           |             |
|      3 | 1           | 1           |
|      3 | 1           | [2]         |
|      3 | 1           | [3, [4, 5]] |
|      3 | 1           |             |
|      3 | [2]         |             |
|      3 | [2]         | 1           |
|      3 | [2]         | [2]         |
|      3 | [2]         | [3, [4, 5]] |
|      3 | [2]         |             |
|      3 | [3, [4, 5]] |             |
|      3 | [3, [4, 5]] | 1           |
|      3 | [3, [4, 5]] | [2]         |
|      3 | [3, [4, 5]] | [3, [4, 5]] |
|      3 | [3, [4, 5]] |             |
|      3 |             |             |
|      3 |             | 1           |
|      3 |             | [2]         |
|      3 |             | [3, [4, 5]] |
|      3 |             |             |
|      4 |             |             |
|      4 |             | 1           |
|      4 |             | [2]         |
|      4 |             | [3, [4, 5]] |
|      4 |             |             |
|      4 | 1           |             |
|      4 | 1           | 1           |
|      4 | 1           | [2]         |
|      4 | 1           | [3, [4, 5]] |
|      4 | 1           |             |
|      4 | [2]         |             |
|      4 | [2]         | 1           |
|      4 | [2]         | [2]         |
|      4 | [2]         | [3, [4, 5]] |
|      4 | [2]         |             |
|      4 | [3, [4, 5]] |             |
|      4 | [3, [4, 5]] | 1           |
|      4 | [3, [4, 5]] | [2]         |
|      4 | [3, [4, 5]] | [3, [4, 5]] |
|      4 | [3, [4, 5]] |             |
|      4 |             |             |
|      4 |             | 1           |
|      4 |             | [2]         |
|      4 |             | [3, [4, 5]] |
|      4 |             |             |
+--------+-------------+-------------+
(77 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A5_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u1(c1))
SELECT c_long,
       c1,
       c2
FROM t1,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN ('',
                 '1',
                 '[2]',
                 '[3, [4, 5]]'))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+-------------+-------------+
| c_long | c1          | c2          |
+--------+-------------+-------------+
|      0 |             |             |
|      1 |             |             |
|      2 |             |             |
|      2 |             | 1           |
|      2 |             | [2]         |
|      2 |             | [3, [4, 5]] |
|      2 |             |             |
|      2 | 1           |             |
|      2 | 1           | 1           |
|      2 | 1           | [2]         |
|      2 | 1           | [3, [4, 5]] |
|      2 | 1           |             |
|      2 | [2]         |             |
|      2 | [2]         | 1           |
|      2 | [2]         | [2]         |
|      2 | [2]         | [3, [4, 5]] |
|      2 | [2]         |             |
|      2 | [3, [4, 5]] |             |
|      2 | [3, [4, 5]] | 1           |
|      2 | [3, [4, 5]] | [2]         |
|      2 | [3, [4, 5]] | [3, [4, 5]] |
|      2 | [3, [4, 5]] |             |
|      2 |             |             |
|      2 |             | 1           |
|      2 |             | [2]         |
|      2 |             | [3, [4, 5]] |
|      2 |             |             |
|      3 |             |             |
|      3 |             | 1           |
|      3 |             | [2]         |
|      3 |             | [3, [4, 5]] |
|      3 |             |             |
|      3 | 1           |             |
|      3 | 1           | 1           |
|      3 | 1           | [2]         |
|      3 | 1           | [3, [4, 5]] |
|      3 | 1           |             |
|      3 | [2]         |             |
|      3 | [2]         | 1           |
|      3 | [2]         | [2]         |
|      3 | [2]         | [3, [4, 5]] |
|      3 | [2]         |             |
|      3 | [3, [4, 5]] |             |
|      3 | [3, [4, 5]] | 1           |
|      3 | [3, [4, 5]] | [2]         |
|      3 | [3, [4, 5]] | [3, [4, 5]] |
|      3 | [3, [4, 5]] |             |
|      3 |             |             |
|      3 |             | 1           |
|      3 |             | [2]         |
|      3 |             | [3, [4, 5]] |
|      3 |             |             |
|      4 |             |             |
|      4 |             | 1           |
|      4 |             | [2]         |
|      4 |             | [3, [4, 5]] |
|      4 |             |             |
|      4 | 1           |             |
|      4 | 1           | 1           |
|      4 | 1           | [2]         |
|      4 | 1           | [3, [4, 5]] |
|      4 | 1           |             |
|      4 | [2]         |             |
|      4 | [2]         | 1           |
|      4 | [2]         | [2]         |
|      4 | [2]         | [3, [4, 5]] |
|      4 | [2]         |             |
|      4 | [3, [4, 5]] |             |
|      4 | [3, [4, 5]] | 1           |
|      4 | [3, [4, 5]] | [2]         |
|      4 | [3, [4, 5]] | [3, [4, 5]] |
|      4 | [3, [4, 5]] |             |
|      4 |             |             |
|      4 |             | 1           |
|      4 |             | [2]         |
|      4 |             | [3, [4, 5]] |
|      4 |             |             |
+--------+-------------+-------------+
(77 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A6_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c1,
       c2
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u1(c1),
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN ('',
                 '1',
                 '2',
                 '3'))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+----+----+
| c_long | c1 | c2 |
+--------+----+----+
|      0 |    |    |
|      1 |    |    |
|      2 |    |    |
|      2 |    | 1  |
|      2 |    | 2  |
|      2 |    | 3  |
|      2 |    |    |
|      2 | 1  |    |
|      2 | 1  | 1  |
|      2 | 1  | 2  |
|      2 | 1  | 3  |
|      2 | 1  |    |
|      2 | 2  |    |
|      2 | 2  | 1  |
|      2 | 2  | 2  |
|      2 | 2  | 3  |
|      2 | 2  |    |
|      2 | 3  |    |
|      2 | 3  | 1  |
|      2 | 3  | 2  |
|      2 | 3  | 3  |
|      2 | 3  |    |
|      2 |    |    |
|      2 |    | 1  |
|      2 |    | 2  |
|      2 |    | 3  |
|      2 |    |    |
|      3 |    |    |
|      3 |    | 1  |
|      3 |    | 2  |
|      3 |    | 3  |
|      3 |    |    |
|      3 | 1  |    |
|      3 | 1  | 1  |
|      3 | 1  | 2  |
|      3 | 1  | 3  |
|      3 | 1  |    |
|      3 | 2  |    |
|      3 | 2  | 1  |
|      3 | 2  | 2  |
|      3 | 2  | 3  |
|      3 | 2  |    |
|      3 | 3  |    |
|      3 | 3  | 1  |
|      3 | 3  | 2  |
|      3 | 3  | 3  |
|      3 | 3  |    |
|      3 |    |    |
|      3 |    | 1  |
|      3 |    | 2  |
|      3 |    | 3  |
|      3 |    |    |
|      4 |    |    |
|      4 |    | 1  |
|      4 |    | 2  |
|      4 |    | 3  |
|      4 |    |    |
|      4 | 1  |    |
|      4 | 1  | 1  |
|      4 | 1  | 2  |
|      4 | 1  | 3  |
|      4 | 1  |    |
|      4 | 2  |    |
|      4 | 2  | 1  |
|      4 | 2  | 2  |
|      4 | 2  | 3  |
|      4 | 2  |    |
|      4 | 3  |    |
|      4 | 3  | 1  |
|      4 | 3  | 2  |
|      4 | 3  | 3  |
|      4 | 3  |    |
|      4 |    |    |
|      4 |    | 1  |
|      4 |    | 2  |
|      4 |    | 3  |
|      4 |    |    |
+--------+----+----+
(77 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A6_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c1,
       c2
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u1(c1)), unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN ('',
                 '1',
                 '2',
                 '3'))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+----+----+
| c_long | c1 | c2 |
+--------+----+----+
|      0 |    |    |
|      1 |    |    |
|      2 |    |    |
|      2 |    | 1  |
|      2 |    | 2  |
|      2 |    | 3  |
|      2 |    |    |
|      2 | 1  |    |
|      2 | 1  | 1  |
|      2 | 1  | 2  |
|      2 | 1  | 3  |
|      2 | 1  |    |
|      2 | 2  |    |
|      2 | 2  | 1  |
|      2 | 2  | 2  |
|      2 | 2  | 3  |
|      2 | 2  |    |
|      2 | 3  |    |
|      2 | 3  | 1  |
|      2 | 3  | 2  |
|      2 | 3  | 3  |
|      2 | 3  |    |
|      2 |    |    |
|      2 |    | 1  |
|      2 |    | 2  |
|      2 |    | 3  |
|      2 |    |    |
|      3 |    |    |
|      3 |    | 1  |
|      3 |    | 2  |
|      3 |    | 3  |
|      3 |    |    |
|      3 | 1  |    |
|      3 | 1  | 1  |
|      3 | 1  | 2  |
|      3 | 1  | 3  |
|      3 | 1  |    |
|      3 | 2  |    |
|      3 | 2  | 1  |
|      3 | 2  | 2  |
|      3 | 2  | 3  |
|      3 | 2  |    |
|      3 | 3  |    |
|      3 | 3  | 1  |
|      3 | 3  | 2  |
|      3 | 3  | 3  |
|      3 | 3  |    |
|      3 |    |    |
|      3 |    | 1  |
|      3 |    | 2  |
|      3 |    | 3  |
|      3 |    |    |
|      4 |    |    |
|      4 |    | 1  |
|      4 |    | 2  |
|      4 |    | 3  |
|      4 |    |    |
|      4 | 1  |    |
|      4 | 1  | 1  |
|      4 | 1  | 2  |
|      4 | 1  | 3  |
|      4 | 1  |    |
|      4 | 2  |    |
|      4 | 2  | 1  |
|      4 | 2  | 2  |
|      4 | 2  | 3  |
|      4 | 2  |    |
|      4 | 3  |    |
|      4 | 3  | 1  |
|      4 | 3  | 2  |
|      4 | 3  | 3  |
|      4 | 3  |    |
|      4 |    |    |
|      4 |    | 1  |
|      4 |    | 2  |
|      4 |    | 3  |
|      4 |    |    |
+--------+----+----+
(77 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A6_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u1(c1))
SELECT c_long,
       c1,
       c2
FROM t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN ('',
                 '1',
                 '2',
                 '3'))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+----+----+
| c_long | c1 | c2 |
+--------+----+----+
|      0 |    |    |
|      1 |    |    |
|      2 |    |    |
|      2 |    | 1  |
|      2 |    | 2  |
|      2 |    | 3  |
|      2 |    |    |
|      2 | 1  |    |
|      2 | 1  | 1  |
|      2 | 1  | 2  |
|      2 | 1  | 3  |
|      2 | 1  |    |
|      2 | 2  |    |
|      2 | 2  | 1  |
|      2 | 2  | 2  |
|      2 | 2  | 3  |
|      2 | 2  |    |
|      2 | 3  |    |
|      2 | 3  | 1  |
|      2 | 3  | 2  |
|      2 | 3  | 3  |
|      2 | 3  |    |
|      2 |    |    |
|      2 |    | 1  |
|      2 |    | 2  |
|      2 |    | 3  |
|      2 |    |    |
|      3 |    |    |
|      3 |    | 1  |
|      3 |    | 2  |
|      3 |    | 3  |
|      3 |    |    |
|      3 | 1  |    |
|      3 | 1  | 1  |
|      3 | 1  | 2  |
|      3 | 1  | 3  |
|      3 | 1  |    |
|      3 | 2  |    |
|      3 | 2  | 1  |
|      3 | 2  | 2  |
|      3 | 2  | 3  |
|      3 | 2  |    |
|      3 | 3  |    |
|      3 | 3  | 1  |
|      3 | 3  | 2  |
|      3 | 3  | 3  |
|      3 | 3  |    |
|      3 |    |    |
|      3 |    | 1  |
|      3 |    | 2  |
|      3 |    | 3  |
|      3 |    |    |
|      4 |    |    |
|      4 |    | 1  |
|      4 |    | 2  |
|      4 |    | 3  |
|      4 |    |    |
|      4 | 1  |    |
|      4 | 1  | 1  |
|      4 | 1  | 2  |
|      4 | 1  | 3  |
|      4 | 1  |    |
|      4 | 2  |    |
|      4 | 2  | 1  |
|      4 | 2  | 2  |
|      4 | 2  | 3  |
|      4 | 2  |    |
|      4 | 3  |    |
|      4 | 3  | 1  |
|      4 | 3  | 2  |
|      4 | 3  | 3  |
|      4 | 3  |    |
|      4 |    |    |
|      4 |    | 1  |
|      4 |    | 2  |
|      4 |    | 3  |
|      4 |    |    |
+--------+----+----+
(77 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A7_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c1,
       c2
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u1(c1),
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN (''))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+----+----+
| c_long | c1 | c2 |
+--------+----+----+
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
+--------+----+----+
(125 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A7_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c1,
       c2
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u1(c1)), unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN (''))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+----+----+
| c_long | c1 | c2 |
+--------+----+----+
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
+--------+----+----+
(125 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A7_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u1(c1))
SELECT c_long,
       c1,
       c2
FROM t1,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u2(c2)
WHERE (c1 IS NULL
       OR c1 IN (''))
  AND (c2 IS NULL
       OR c2 NOT IN ('doesntexist1',
                     'doesntexist2'))
  AND c_long>=0;
+--------+----+----+
| c_long | c1 | c2 |
+--------+----+----+
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      0 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      1 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      2 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      3 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
|      4 |    |    |
+--------+----+----+
(125 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_mv_complex,
       count(*) cnt
FROM test_unnest
GROUP BY c_mv_complex;
+--------------+-----+
| c_mv_complex | cnt |
+--------------+-----+
| 1            |   5 |
| [2]          |   5 |
| [3, [4, 5]]  |   5 |
| my_empty     |   5 |
| my_null      |   5 |
+--------------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY c;
+-------------+-----+
| c           | cnt |
+-------------+-----+
| 1           |   5 |
| [2]         |   5 |
| [3, [4, 5]] |   5 |
| my_empty    |   5 |
| my_null     |   5 |
+-------------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY c_str,
         c;
+-------+-------------+-----+
| c_str | c           | cnt |
+-------+-------------+-----+
|       | 1           |   1 |
|       | [2]         |   1 |
|       | [3, [4, 5]] |   1 |
|       | my_empty    |   1 |
|       | my_null     |   1 |
| str2  | 1           |   1 |
| str2  | [2]         |   1 |
| str2  | [3, [4, 5]] |   1 |
| str2  | my_empty    |   1 |
| str2  | my_null     |   1 |
| str3  | 1           |   1 |
| str3  | [2]         |   1 |
| str3  | [3, [4, 5]] |   1 |
| str3  | my_empty    |   1 |
| str3  | my_null     |   1 |
| str4  | 1           |   1 |
| str4  | [2]         |   1 |
| str4  | [3, [4, 5]] |   1 |
| str4  | my_empty    |   1 |
| str4  | my_null     |   1 |
|       | 1           |   1 |
|       | [2]         |   1 |
|       | [3, [4, 5]] |   1 |
|       | my_empty    |   1 |
|       | my_null     |   1 |
+-------+-------------+-----+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY c_str;
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY GROUPING
SETS (c);
+-------------+-----+
| c           | cnt |
+-------------+-----+
| 1           |   5 |
| [2]         |   5 |
| [3, [4, 5]] |   5 |
| my_empty    |   5 |
| my_null     |   5 |
+-------------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY GROUPING
SETS (c_str,
      c);
+-------+-------------+-----+
| c_str | c           | cnt |
+-------+-------------+-----+
|       |             |   5 |
| str2  |             |   5 |
| str3  |             |   5 |
| str4  |             |   5 |
|       | 1           |   5 |
|       | [2]         |   5 |
|       | [3, [4, 5]] |   5 |
|       | my_empty    |   5 |
|       | my_null     |   5 |
|       |             |   5 |
+-------+-------------+-----+
(10 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY GROUPING
SETS (c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY rollup(c);
+-------------+-----+
| c           | cnt |
+-------------+-----+
| 1           |   5 |
| [2]         |   5 |
| [3, [4, 5]] |   5 |
| my_empty    |   5 |
| my_null     |   5 |
|             |  25 |
+-------------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY rollup(c_str, c);
+-------+-------------+-----+
| c_str | c           | cnt |
+-------+-------------+-----+
|       | 1           |   1 |
|       | [2]         |   1 |
|       | [3, [4, 5]] |   1 |
|       | my_empty    |   1 |
|       | my_null     |   1 |
|       |             |   5 |
| str2  | 1           |   1 |
| str2  | [2]         |   1 |
| str2  | [3, [4, 5]] |   1 |
| str2  | my_empty    |   1 |
| str2  | my_null     |   1 |
| str2  |             |   5 |
| str3  | 1           |   1 |
| str3  | [2]         |   1 |
| str3  | [3, [4, 5]] |   1 |
| str3  | my_empty    |   1 |
| str3  | my_null     |   1 |
| str3  |             |   5 |
| str4  | 1           |   1 |
| str4  | [2]         |   1 |
| str4  | [3, [4, 5]] |   1 |
| str4  | my_empty    |   1 |
| str4  | my_null     |   1 |
| str4  |             |   5 |
|       | 1           |   1 |
|       | [2]         |   1 |
|       | [3, [4, 5]] |   1 |
|       | my_empty    |   1 |
|       | my_null     |   1 |
|       |             |  25 |
|       |             |   5 |
+-------+-------------+-----+
(31 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY rollup(c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |  25 |
|       |   5 |
+-------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY cube(c);
+-------------+-----+
| c           | cnt |
+-------------+-----+
| 1           |   5 |
| [2]         |   5 |
| [3, [4, 5]] |   5 |
| my_empty    |   5 |
| my_null     |   5 |
|             |  25 |
+-------------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY cube(c_str, c);
+-------+-------------+-----+
| c_str | c           | cnt |
+-------+-------------+-----+
|       | 1           |   1 |
|       | [2]         |   1 |
|       | [3, [4, 5]] |   1 |
|       | my_empty    |   1 |
|       | my_null     |   1 |
|       |             |   5 |
| str2  | 1           |   1 |
| str2  | [2]         |   1 |
| str2  | [3, [4, 5]] |   1 |
| str2  | my_empty    |   1 |
| str2  | my_null     |   1 |
| str2  |             |   5 |
| str3  | 1           |   1 |
| str3  | [2]         |   1 |
| str3  | [3, [4, 5]] |   1 |
| str3  | my_empty    |   1 |
| str3  | my_null     |   1 |
| str3  |             |   5 |
| str4  | 1           |   1 |
| str4  | [2]         |   1 |
| str4  | [3, [4, 5]] |   1 |
| str4  | my_empty    |   1 |
| str4  | my_null     |   1 |
| str4  |             |   5 |
|       | 1           |   1 |
|       | 1           |   5 |
|       | [2]         |   1 |
|       | [2]         |   5 |
|       | [3, [4, 5]] |   1 |
|       | [3, [4, 5]] |   5 |
|       | my_empty    |   1 |
|       | my_empty    |   5 |
|       | my_null     |   1 |
|       | my_null     |   5 |
|       |             |  25 |
|       |             |   5 |
+-------+-------------+-----+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY cube(c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |  25 |
|       |   5 |
+-------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY c
HAVING c='1';
+---+-----+
| c | cnt |
+---+-----+
| 1 |   5 |
+---+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B15 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY c_str
HAVING c_str='str2';
+-------+-----+
| c_str | cnt |
+-------+-----+
| str2  |   5 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_mv_num,
       count(*) cnt
FROM test_unnest
GROUP BY c_mv_num;
+----------+-----+
| c_mv_num | cnt |
+----------+-----+
| -1       |   5 |
| 0        |   5 |
| 1        |   5 |
| 2        |   5 |
| 3        |   5 |
+----------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY c;
+----+-----+
| c  | cnt |
+----+-----+
| -1 |   5 |
| 0  |   5 |
| 1  |   5 |
| 2  |   5 |
| 3  |   5 |
+----+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY c_str,
         c;
+-------+----+-----+
| c_str | c  | cnt |
+-------+----+-----+
|       | -1 |   1 |
|       | 0  |   1 |
|       | 1  |   1 |
|       | 2  |   1 |
|       | 3  |   1 |
| str2  | -1 |   1 |
| str2  | 0  |   1 |
| str2  | 1  |   1 |
| str2  | 2  |   1 |
| str2  | 3  |   1 |
| str3  | -1 |   1 |
| str3  | 0  |   1 |
| str3  | 1  |   1 |
| str3  | 2  |   1 |
| str3  | 3  |   1 |
| str4  | -1 |   1 |
| str4  | 0  |   1 |
| str4  | 1  |   1 |
| str4  | 2  |   1 |
| str4  | 3  |   1 |
|       | -1 |   1 |
|       | 0  |   1 |
|       | 1  |   1 |
|       | 2  |   1 |
|       | 3  |   1 |
+-------+----+-----+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY c_str;
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY GROUPING
SETS (c);
+----+-----+
| c  | cnt |
+----+-----+
| -1 |   5 |
| 0  |   5 |
| 1  |   5 |
| 2  |   5 |
| 3  |   5 |
+----+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY GROUPING
SETS (c_str,
      c);
+-------+----+-----+
| c_str | c  | cnt |
+-------+----+-----+
|       |    |   5 |
| str2  |    |   5 |
| str3  |    |   5 |
| str4  |    |   5 |
|       | -1 |   5 |
|       | 0  |   5 |
|       | 1  |   5 |
|       | 2  |   5 |
|       | 3  |   5 |
|       |    |   5 |
+-------+----+-----+
(10 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY GROUPING
SETS (c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY rollup(c);
+----+-----+
| c  | cnt |
+----+-----+
| -1 |   5 |
| 0  |   5 |
| 1  |   5 |
| 2  |   5 |
| 3  |   5 |
|    |  25 |
+----+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY rollup(c_str, c);
+-------+----+-----+
| c_str | c  | cnt |
+-------+----+-----+
|       | -1 |   1 |
|       | 0  |   1 |
|       | 1  |   1 |
|       | 2  |   1 |
|       | 3  |   1 |
|       |    |   5 |
| str2  | -1 |   1 |
| str2  | 0  |   1 |
| str2  | 1  |   1 |
| str2  | 2  |   1 |
| str2  | 3  |   1 |
| str2  |    |   5 |
| str3  | -1 |   1 |
| str3  | 0  |   1 |
| str3  | 1  |   1 |
| str3  | 2  |   1 |
| str3  | 3  |   1 |
| str3  |    |   5 |
| str4  | -1 |   1 |
| str4  | 0  |   1 |
| str4  | 1  |   1 |
| str4  | 2  |   1 |
| str4  | 3  |   1 |
| str4  |    |   5 |
|       | -1 |   1 |
|       | 0  |   1 |
|       | 1  |   1 |
|       | 2  |   1 |
|       | 3  |   1 |
|       |    |  25 |
|       |    |   5 |
+-------+----+-----+
(31 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY rollup(c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |  25 |
|       |   5 |
+-------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY cube(c);
+----+-----+
| c  | cnt |
+----+-----+
| -1 |   5 |
| 0  |   5 |
| 1  |   5 |
| 2  |   5 |
| 3  |   5 |
|    |  25 |
+----+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY cube(c_str, c);
+-------+----+-----+
| c_str | c  | cnt |
+-------+----+-----+
|       | -1 |   1 |
|       | 0  |   1 |
|       | 1  |   1 |
|       | 2  |   1 |
|       | 3  |   1 |
|       |    |   5 |
| str2  | -1 |   1 |
| str2  | 0  |   1 |
| str2  | 1  |   1 |
| str2  | 2  |   1 |
| str2  | 3  |   1 |
| str2  |    |   5 |
| str3  | -1 |   1 |
| str3  | 0  |   1 |
| str3  | 1  |   1 |
| str3  | 2  |   1 |
| str3  | 3  |   1 |
| str3  |    |   5 |
| str4  | -1 |   1 |
| str4  | 0  |   1 |
| str4  | 1  |   1 |
| str4  | 2  |   1 |
| str4  | 3  |   1 |
| str4  |    |   5 |
|       | -1 |   1 |
|       | -1 |   5 |
|       | 0  |   1 |
|       | 0  |   5 |
|       | 1  |   1 |
|       | 1  |   5 |
|       | 2  |   1 |
|       | 2  |   5 |
|       | 3  |   1 |
|       | 3  |   5 |
|       |    |  25 |
|       |    |   5 |
+-------+----+-----+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY cube(c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |  25 |
|       |   5 |
+-------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY c
HAVING c='1';
+---+-----+
| c | cnt |
+---+-----+
| 1 |   5 |
+---+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B15 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY c_str
HAVING c_str='str2';
+-------+-----+
| c_str | cnt |
+-------+-----+
| str2  |   5 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_mv_complex_with_null_and_empty_val,
       count(*) cnt
FROM test_unnest
GROUP BY c_mv_complex_with_null_and_empty_val;
+--------------------------------------+-----+
| c_mv_complex_with_null_and_empty_val | cnt |
+--------------------------------------+-----+
|                                      |   5 |
| 1                                    |   5 |
| [2]                                  |   5 |
| [3, [4, 5]]                          |   5 |
|                                      |   5 |
+--------------------------------------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY c;
+-------------+-----+
| c           | cnt |
+-------------+-----+
|             |   5 |
| 1           |   5 |
| [2]         |   5 |
| [3, [4, 5]] |   5 |
|             |   5 |
+-------------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY c_str,
         c;
+-------+-------------+-----+
| c_str | c           | cnt |
+-------+-------------+-----+
|       |             |   1 |
|       | 1           |   1 |
|       | [2]         |   1 |
|       | [3, [4, 5]] |   1 |
|       |             |   1 |
| str2  |             |   1 |
| str2  | 1           |   1 |
| str2  | [2]         |   1 |
| str2  | [3, [4, 5]] |   1 |
| str2  |             |   1 |
| str3  |             |   1 |
| str3  | 1           |   1 |
| str3  | [2]         |   1 |
| str3  | [3, [4, 5]] |   1 |
| str3  |             |   1 |
| str4  |             |   1 |
| str4  | 1           |   1 |
| str4  | [2]         |   1 |
| str4  | [3, [4, 5]] |   1 |
| str4  |             |   1 |
|       |             |   1 |
|       | 1           |   1 |
|       | [2]         |   1 |
|       | [3, [4, 5]] |   1 |
|       |             |   1 |
+-------+-------------+-----+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY c_str;
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY GROUPING
SETS (c);
+-------------+-----+
| c           | cnt |
+-------------+-----+
|             |   5 |
| 1           |   5 |
| [2]         |   5 |
| [3, [4, 5]] |   5 |
|             |   5 |
+-------------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY GROUPING
SETS (c_str,
      c);
+-------+-------------+-----+
| c_str | c           | cnt |
+-------+-------------+-----+
|       |             |   5 |
| str2  |             |   5 |
| str3  |             |   5 |
| str4  |             |   5 |
|       |             |   5 |
|       | 1           |   5 |
|       | [2]         |   5 |
|       | [3, [4, 5]] |   5 |
|       |             |   5 |
|       |             |   5 |
+-------+-------------+-----+
(10 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY GROUPING
SETS (c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY rollup(c);
+-------------+-----+
| c           | cnt |
+-------------+-----+
|             |   5 |
| 1           |   5 |
| [2]         |   5 |
| [3, [4, 5]] |   5 |
|             |  25 |
|             |   5 |
+-------------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY rollup(c_str, c);
+-------+-------------+-----+
| c_str | c           | cnt |
+-------+-------------+-----+
|       |             |   1 |
|       | 1           |   1 |
|       | [2]         |   1 |
|       | [3, [4, 5]] |   1 |
|       |             |   1 |
|       |             |   5 |
| str2  |             |   1 |
| str2  | 1           |   1 |
| str2  | [2]         |   1 |
| str2  | [3, [4, 5]] |   1 |
| str2  |             |   1 |
| str2  |             |   5 |
| str3  |             |   1 |
| str3  | 1           |   1 |
| str3  | [2]         |   1 |
| str3  | [3, [4, 5]] |   1 |
| str3  |             |   1 |
| str3  |             |   5 |
| str4  |             |   1 |
| str4  | 1           |   1 |
| str4  | [2]         |   1 |
| str4  | [3, [4, 5]] |   1 |
| str4  |             |   1 |
| str4  |             |   5 |
|       |             |   1 |
|       | 1           |   1 |
|       | [2]         |   1 |
|       | [3, [4, 5]] |   1 |
|       |             |   1 |
|       |             |  25 |
|       |             |   5 |
+-------+-------------+-----+
(31 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY rollup(c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |  25 |
|       |   5 |
+-------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY cube(c);
+-------------+-----+
| c           | cnt |
+-------------+-----+
|             |   5 |
| 1           |   5 |
| [2]         |   5 |
| [3, [4, 5]] |   5 |
|             |  25 |
|             |   5 |
+-------------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY cube(c_str, c);
+-------+-------------+-----+
| c_str | c           | cnt |
+-------+-------------+-----+
|       |             |   1 |
|       | 1           |   1 |
|       | [2]         |   1 |
|       | [3, [4, 5]] |   1 |
|       |             |   1 |
|       |             |   5 |
| str2  |             |   1 |
| str2  | 1           |   1 |
| str2  | [2]         |   1 |
| str2  | [3, [4, 5]] |   1 |
| str2  |             |   1 |
| str2  |             |   5 |
| str3  |             |   1 |
| str3  | 1           |   1 |
| str3  | [2]         |   1 |
| str3  | [3, [4, 5]] |   1 |
| str3  |             |   1 |
| str3  |             |   5 |
| str4  |             |   1 |
| str4  | 1           |   1 |
| str4  | [2]         |   1 |
| str4  | [3, [4, 5]] |   1 |
| str4  |             |   1 |
| str4  |             |   5 |
|       |             |   1 |
|       |             |   5 |
|       | 1           |   1 |
|       | 1           |   5 |
|       | [2]         |   1 |
|       | [2]         |   5 |
|       | [3, [4, 5]] |   1 |
|       | [3, [4, 5]] |   5 |
|       |             |   1 |
|       |             |  25 |
|       |             |   5 |
|       |             |   5 |
+-------+-------------+-----+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY cube(c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |  25 |
|       |   5 |
+-------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY c
HAVING c='1';
+---+-----+
| c | cnt |
+---+-----+
| 1 |   5 |
+---+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B15 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY c_str
HAVING c_str='str2';
+-------+-----+
| c_str | cnt |
+-------+-----+
| str2  |   5 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_mv_num_with_null_and_empty_val,
       count(*) cnt
FROM test_unnest
GROUP BY c_mv_num_with_null_and_empty_val;
+----------------------------------+-----+
| c_mv_num_with_null_and_empty_val | cnt |
+----------------------------------+-----+
|                                  |   5 |
| 1                                |   5 |
| 2                                |   5 |
| 3                                |   5 |
|                                  |   5 |
+----------------------------------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY c;
+---+-----+
| c | cnt |
+---+-----+
|   |   5 |
| 1 |   5 |
| 2 |   5 |
| 3 |   5 |
|   |   5 |
+---+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY c_str,
         c;
+-------+---+-----+
| c_str | c | cnt |
+-------+---+-----+
|       |   |   1 |
|       | 1 |   1 |
|       | 2 |   1 |
|       | 3 |   1 |
|       |   |   1 |
| str2  |   |   1 |
| str2  | 1 |   1 |
| str2  | 2 |   1 |
| str2  | 3 |   1 |
| str2  |   |   1 |
| str3  |   |   1 |
| str3  | 1 |   1 |
| str3  | 2 |   1 |
| str3  | 3 |   1 |
| str3  |   |   1 |
| str4  |   |   1 |
| str4  | 1 |   1 |
| str4  | 2 |   1 |
| str4  | 3 |   1 |
| str4  |   |   1 |
|       |   |   1 |
|       | 1 |   1 |
|       | 2 |   1 |
|       | 3 |   1 |
|       |   |   1 |
+-------+---+-----+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY c_str;
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY GROUPING
SETS (c);
+---+-----+
| c | cnt |
+---+-----+
|   |   5 |
| 1 |   5 |
| 2 |   5 |
| 3 |   5 |
|   |   5 |
+---+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY GROUPING
SETS (c_str,
      c);
+-------+---+-----+
| c_str | c | cnt |
+-------+---+-----+
|       |   |   5 |
| str2  |   |   5 |
| str3  |   |   5 |
| str4  |   |   5 |
|       |   |   5 |
|       | 1 |   5 |
|       | 2 |   5 |
|       | 3 |   5 |
|       |   |   5 |
|       |   |   5 |
+-------+---+-----+
(10 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY GROUPING
SETS (c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY rollup(c);
+---+-----+
| c | cnt |
+---+-----+
|   |   5 |
| 1 |   5 |
| 2 |   5 |
| 3 |   5 |
|   |  25 |
|   |   5 |
+---+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY rollup(c_str, c);
+-------+---+-----+
| c_str | c | cnt |
+-------+---+-----+
|       |   |   1 |
|       | 1 |   1 |
|       | 2 |   1 |
|       | 3 |   1 |
|       |   |   1 |
|       |   |   5 |
| str2  |   |   1 |
| str2  | 1 |   1 |
| str2  | 2 |   1 |
| str2  | 3 |   1 |
| str2  |   |   1 |
| str2  |   |   5 |
| str3  |   |   1 |
| str3  | 1 |   1 |
| str3  | 2 |   1 |
| str3  | 3 |   1 |
| str3  |   |   1 |
| str3  |   |   5 |
| str4  |   |   1 |
| str4  | 1 |   1 |
| str4  | 2 |   1 |
| str4  | 3 |   1 |
| str4  |   |   1 |
| str4  |   |   5 |
|       |   |   1 |
|       | 1 |   1 |
|       | 2 |   1 |
|       | 3 |   1 |
|       |   |   1 |
|       |   |  25 |
|       |   |   5 |
+-------+---+-----+
(31 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY rollup(c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |  25 |
|       |   5 |
+-------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY cube(c);
+---+-----+
| c | cnt |
+---+-----+
|   |   5 |
| 1 |   5 |
| 2 |   5 |
| 3 |   5 |
|   |  25 |
|   |   5 |
+---+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY cube(c_str, c);
+-------+---+-----+
| c_str | c | cnt |
+-------+---+-----+
|       |   |   1 |
|       | 1 |   1 |
|       | 2 |   1 |
|       | 3 |   1 |
|       |   |   1 |
|       |   |   5 |
| str2  |   |   1 |
| str2  | 1 |   1 |
| str2  | 2 |   1 |
| str2  | 3 |   1 |
| str2  |   |   1 |
| str2  |   |   5 |
| str3  |   |   1 |
| str3  | 1 |   1 |
| str3  | 2 |   1 |
| str3  | 3 |   1 |
| str3  |   |   1 |
| str3  |   |   5 |
| str4  |   |   1 |
| str4  | 1 |   1 |
| str4  | 2 |   1 |
| str4  | 3 |   1 |
| str4  |   |   1 |
| str4  |   |   5 |
|       |   |   1 |
|       |   |   5 |
|       | 1 |   1 |
|       | 1 |   5 |
|       | 2 |   1 |
|       | 2 |   5 |
|       | 3 |   1 |
|       | 3 |   5 |
|       |   |   1 |
|       |   |  25 |
|       |   |   5 |
|       |   |   5 |
+-------+---+-----+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY cube(c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |  25 |
|       |   5 |
+-------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY c
HAVING c='1';
+---+-----+
| c | cnt |
+---+-----+
| 1 |   5 |
+---+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B15 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY c_str
HAVING c_str='str2';
+-------+-----+
| c_str | cnt |
+-------+-----+
| str2  |   5 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_mv_complex_with_null_and_empty_row,
       count(*) cnt
FROM test_unnest
GROUP BY c_mv_complex_with_null_and_empty_row;
+--------------------------------------+-----+
| c_mv_complex_with_null_and_empty_row | cnt |
+--------------------------------------+-----+
|                                      |   3 |
| 1                                    |   3 |
| [2]                                  |   3 |
| [3, [4, 5]]                          |   3 |
|                                      |   5 |
+--------------------------------------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY c;
+-------------+-----+
| c           | cnt |
+-------------+-----+
|             |   3 |
| 1           |   3 |
| [2]         |   3 |
| [3, [4, 5]] |   3 |
|             |   5 |
+-------------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY c_str,
         c;
+-------+-------------+-----+
| c_str | c           | cnt |
+-------+-------------+-----+
|       |             |   1 |
| str2  |             |   1 |
| str2  | 1           |   1 |
| str2  | [2]         |   1 |
| str2  | [3, [4, 5]] |   1 |
| str2  |             |   1 |
| str3  |             |   1 |
| str3  | 1           |   1 |
| str3  | [2]         |   1 |
| str3  | [3, [4, 5]] |   1 |
| str3  |             |   1 |
| str4  |             |   1 |
| str4  | 1           |   1 |
| str4  | [2]         |   1 |
| str4  | [3, [4, 5]] |   1 |
| str4  |             |   1 |
|       |             |   1 |
+-------+-------------+-----+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY c_str;
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   1 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |   1 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY GROUPING
SETS (c);
+-------------+-----+
| c           | cnt |
+-------------+-----+
|             |   3 |
| 1           |   3 |
| [2]         |   3 |
| [3, [4, 5]] |   3 |
|             |   5 |
+-------------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY GROUPING
SETS (c_str,
      c);
+-------+-------------+-----+
| c_str | c           | cnt |
+-------+-------------+-----+
|       |             |   1 |
| str2  |             |   5 |
| str3  |             |   5 |
| str4  |             |   5 |
|       |             |   3 |
|       | 1           |   3 |
|       | [2]         |   3 |
|       | [3, [4, 5]] |   3 |
|       |             |   1 |
|       |             |   5 |
+-------+-------------+-----+
(10 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY GROUPING
SETS (c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   1 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |   1 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY rollup(c);
+-------------+-----+
| c           | cnt |
+-------------+-----+
|             |   3 |
| 1           |   3 |
| [2]         |   3 |
| [3, [4, 5]] |   3 |
|             |  17 |
|             |   5 |
+-------------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY rollup(c_str, c);
+-------+-------------+-----+
| c_str | c           | cnt |
+-------+-------------+-----+
|       |             |   1 |
|       |             |   1 |
| str2  |             |   1 |
| str2  | 1           |   1 |
| str2  | [2]         |   1 |
| str2  | [3, [4, 5]] |   1 |
| str2  |             |   1 |
| str2  |             |   5 |
| str3  |             |   1 |
| str3  | 1           |   1 |
| str3  | [2]         |   1 |
| str3  | [3, [4, 5]] |   1 |
| str3  |             |   1 |
| str3  |             |   5 |
| str4  |             |   1 |
| str4  | 1           |   1 |
| str4  | [2]         |   1 |
| str4  | [3, [4, 5]] |   1 |
| str4  |             |   1 |
| str4  |             |   5 |
|       |             |   1 |
|       |             |   1 |
|       |             |  17 |
+-------+-------------+-----+
(23 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY rollup(c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   1 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |   1 |
|       |  17 |
+-------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY cube(c);
+-------------+-----+
| c           | cnt |
+-------------+-----+
|             |   3 |
| 1           |   3 |
| [2]         |   3 |
| [3, [4, 5]] |   3 |
|             |  17 |
|             |   5 |
+-------------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY cube(c_str, c);
+-------+-------------+-----+
| c_str | c           | cnt |
+-------+-------------+-----+
|       |             |   1 |
|       |             |   1 |
| str2  |             |   1 |
| str2  | 1           |   1 |
| str2  | [2]         |   1 |
| str2  | [3, [4, 5]] |   1 |
| str2  |             |   1 |
| str2  |             |   5 |
| str3  |             |   1 |
| str3  | 1           |   1 |
| str3  | [2]         |   1 |
| str3  | [3, [4, 5]] |   1 |
| str3  |             |   1 |
| str3  |             |   5 |
| str4  |             |   1 |
| str4  | 1           |   1 |
| str4  | [2]         |   1 |
| str4  | [3, [4, 5]] |   1 |
| str4  |             |   1 |
| str4  |             |   5 |
|       |             |   3 |
|       | 1           |   3 |
|       | [2]         |   3 |
|       | [3, [4, 5]] |   3 |
|       |             |   1 |
|       |             |   1 |
|       |             |  17 |
|       |             |   5 |
+-------+-------------+-----+
(28 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY cube(c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   1 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |   1 |
|       |  17 |
+-------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY c
HAVING c='1';
+---+-----+
| c | cnt |
+---+-----+
| 1 |   3 |
+---+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B15 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY c_str
HAVING c_str='str2';
+-------+-----+
| c_str | cnt |
+-------+-----+
| str2  |   5 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_mv_num_with_null_and_empty_row,
       count(*) cnt
FROM test_unnest
GROUP BY c_mv_num_with_null_and_empty_row;
+----------------------------------+-----+
| c_mv_num_with_null_and_empty_row | cnt |
+----------------------------------+-----+
|                                  |   3 |
| 1                                |   3 |
| 2                                |   3 |
| 3                                |   3 |
|                                  |   5 |
+----------------------------------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY c;
+---+-----+
| c | cnt |
+---+-----+
|   |   3 |
| 1 |   3 |
| 2 |   3 |
| 3 |   3 |
|   |   5 |
+---+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY c_str,
         c;
+-------+---+-----+
| c_str | c | cnt |
+-------+---+-----+
|       |   |   1 |
| str2  |   |   1 |
| str2  | 1 |   1 |
| str2  | 2 |   1 |
| str2  | 3 |   1 |
| str2  |   |   1 |
| str3  |   |   1 |
| str3  | 1 |   1 |
| str3  | 2 |   1 |
| str3  | 3 |   1 |
| str3  |   |   1 |
| str4  |   |   1 |
| str4  | 1 |   1 |
| str4  | 2 |   1 |
| str4  | 3 |   1 |
| str4  |   |   1 |
|       |   |   1 |
+-------+---+-----+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY c_str;
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   1 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |   1 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY GROUPING
SETS (c);
+---+-----+
| c | cnt |
+---+-----+
|   |   3 |
| 1 |   3 |
| 2 |   3 |
| 3 |   3 |
|   |   5 |
+---+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY GROUPING
SETS (c_str,
      c);
+-------+---+-----+
| c_str | c | cnt |
+-------+---+-----+
|       |   |   1 |
| str2  |   |   5 |
| str3  |   |   5 |
| str4  |   |   5 |
|       |   |   3 |
|       | 1 |   3 |
|       | 2 |   3 |
|       | 3 |   3 |
|       |   |   1 |
|       |   |   5 |
+-------+---+-----+
(10 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY GROUPING
SETS (c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   1 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |   1 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY rollup(c);
+---+-----+
| c | cnt |
+---+-----+
|   |   3 |
| 1 |   3 |
| 2 |   3 |
| 3 |   3 |
|   |  17 |
|   |   5 |
+---+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY rollup(c_str, c);
+-------+---+-----+
| c_str | c | cnt |
+-------+---+-----+
|       |   |   1 |
|       |   |   1 |
| str2  |   |   1 |
| str2  | 1 |   1 |
| str2  | 2 |   1 |
| str2  | 3 |   1 |
| str2  |   |   1 |
| str2  |   |   5 |
| str3  |   |   1 |
| str3  | 1 |   1 |
| str3  | 2 |   1 |
| str3  | 3 |   1 |
| str3  |   |   1 |
| str3  |   |   5 |
| str4  |   |   1 |
| str4  | 1 |   1 |
| str4  | 2 |   1 |
| str4  | 3 |   1 |
| str4  |   |   1 |
| str4  |   |   5 |
|       |   |   1 |
|       |   |   1 |
|       |   |  17 |
+-------+---+-----+
(23 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY rollup(c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   1 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |   1 |
|       |  17 |
+-------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY cube(c);
+---+-----+
| c | cnt |
+---+-----+
|   |   3 |
| 1 |   3 |
| 2 |   3 |
| 3 |   3 |
|   |  17 |
|   |   5 |
+---+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY cube(c_str, c);
+-------+---+-----+
| c_str | c | cnt |
+-------+---+-----+
|       |   |   1 |
|       |   |   1 |
| str2  |   |   1 |
| str2  | 1 |   1 |
| str2  | 2 |   1 |
| str2  | 3 |   1 |
| str2  |   |   1 |
| str2  |   |   5 |
| str3  |   |   1 |
| str3  | 1 |   1 |
| str3  | 2 |   1 |
| str3  | 3 |   1 |
| str3  |   |   1 |
| str3  |   |   5 |
| str4  |   |   1 |
| str4  | 1 |   1 |
| str4  | 2 |   1 |
| str4  | 3 |   1 |
| str4  |   |   1 |
| str4  |   |   5 |
|       |   |   3 |
|       | 1 |   3 |
|       | 2 |   3 |
|       | 3 |   3 |
|       |   |   1 |
|       |   |   1 |
|       |   |  17 |
|       |   |   5 |
+-------+---+-----+
(28 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY cube(c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   1 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |   1 |
|       |  17 |
+-------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY c
HAVING c='1';
+---+-----+
| c | cnt |
+---+-----+
| 1 |   3 |
+---+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B15 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY c_str
HAVING c_str='str2';
+-------+-----+
| c_str | cnt |
+-------+-----+
| str2  |   5 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_mv_all_null_and_empty_val,
       count(*) cnt
FROM test_unnest
GROUP BY c_mv_all_null_and_empty_val;
+-----------------------------+-----+
| c_mv_all_null_and_empty_val | cnt |
+-----------------------------+-----+
|                             |  10 |
|                             |  15 |
+-----------------------------+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY c;
+---+-----+
| c | cnt |
+---+-----+
|   |  10 |
|   |  15 |
+---+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY c_str,
         c;
+-------+---+-----+
| c_str | c | cnt |
+-------+---+-----+
|       |   |   2 |
|       |   |   3 |
| str2  |   |   2 |
| str2  |   |   3 |
| str3  |   |   2 |
| str3  |   |   3 |
| str4  |   |   2 |
| str4  |   |   3 |
|       |   |   2 |
|       |   |   3 |
+-------+---+-----+
(10 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY c_str;
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY GROUPING
SETS (c);
+---+-----+
| c | cnt |
+---+-----+
|   |  10 |
|   |  15 |
+---+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY GROUPING
SETS (c_str,
      c);
+-------+---+-----+
| c_str | c | cnt |
+-------+---+-----+
|       |   |   5 |
| str2  |   |   5 |
| str3  |   |   5 |
| str4  |   |   5 |
|       |   |  10 |
|       |   |  15 |
|       |   |   5 |
+-------+---+-----+
(7 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY GROUPING
SETS (c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY rollup(c);
+---+-----+
| c | cnt |
+---+-----+
|   |  10 |
|   |  15 |
|   |  25 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY rollup(c_str, c);
+-------+---+-----+
| c_str | c | cnt |
+-------+---+-----+
|       |   |   2 |
|       |   |   3 |
|       |   |   5 |
| str2  |   |   2 |
| str2  |   |   3 |
| str2  |   |   5 |
| str3  |   |   2 |
| str3  |   |   3 |
| str3  |   |   5 |
| str4  |   |   2 |
| str4  |   |   3 |
| str4  |   |   5 |
|       |   |   2 |
|       |   |  25 |
|       |   |   3 |
|       |   |   5 |
+-------+---+-----+
(16 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY rollup(c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |  25 |
|       |   5 |
+-------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY cube(c);
+---+-----+
| c | cnt |
+---+-----+
|   |  10 |
|   |  15 |
|   |  25 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY cube(c_str, c);
+-------+---+-----+
| c_str | c | cnt |
+-------+---+-----+
|       |   |   2 |
|       |   |   3 |
|       |   |   5 |
| str2  |   |   2 |
| str2  |   |   3 |
| str2  |   |   5 |
| str3  |   |   2 |
| str3  |   |   3 |
| str3  |   |   5 |
| str4  |   |   2 |
| str4  |   |   3 |
| str4  |   |   5 |
|       |   |  10 |
|       |   |   2 |
|       |   |  15 |
|       |   |  25 |
|       |   |   3 |
|       |   |   5 |
+-------+---+-----+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY cube(c_str);
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
|       |  25 |
|       |   5 |
+-------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY c
HAVING c='1';
+---+-----+
| c | cnt |
+---+-----+
+---+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B15 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY c_str
HAVING c_str='str2';
+-------+-----+
| c_str | cnt |
+-------+-----+
| str2  |   5 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY c
ORDER BY c ASC;
+-------------+-----+
| c           | cnt |
+-------------+-----+
| 1           |   5 |
| [2]         |   5 |
| [3, [4, 5]] |   5 |
| my_empty    |   5 |
| my_null     |   5 |
+-------------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY c
ORDER BY 1 DESC;
+-------------+-----+
| c           | cnt |
+-------------+-----+
| my_null     |   5 |
| my_empty    |   5 |
| [3, [4, 5]] |   5 |
| [2]         |   5 |
| 1           |   5 |
+-------------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
ORDER BY c ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex)) AS u(c)
   ORDER BY c ASC);
+-------------+
| c           |
+-------------+
| 1           |
| 1           |
| 1           |
| 1           |
| 1           |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| my_empty    |
| my_empty    |
| my_empty    |
| my_empty    |
| my_empty    |
| my_null     |
| my_null     |
| my_null     |
| my_null     |
| my_null     |
+-------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex)) AS u(c)
   ORDER BY 1 DESC);
+-------------+
| c           |
+-------------+
| 1           |
| 1           |
| 1           |
| 1           |
| 1           |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| my_empty    |
| my_empty    |
| my_empty    |
| my_empty    |
| my_empty    |
| my_null     |
| my_null     |
| my_null     |
| my_null     |
| my_null     |
+-------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY __time
ORDER BY __time ASC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |  25 |
+-------------------------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY __time
ORDER BY __time DESC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |  25 |
+-------------------------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
ORDER BY __time ASC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
ORDER BY 1 DESC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex)) AS u(c)
   ORDER BY __time ASC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex)) AS u(c)
   ORDER BY 1 DESC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY c_str
ORDER BY c_str ASC;
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
GROUP BY c_str
ORDER BY 1 DESC;
+-------+-----+
| c_str | cnt |
+-------+-----+
| str4  |   5 |
| str3  |   5 |
| str2  |   5 |
|       |   5 |
|       |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
ORDER BY c_str ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM
  (SELECT c_str
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex)) AS u(c)
   ORDER BY c_str ASC);
+-------+
| c_str |
+-------+
|       |
|       |
|       |
|       |
|       |
| str2  |
| str2  |
| str2  |
| str2  |
| str2  |
| str3  |
| str3  |
| str3  |
| str3  |
| str3  |
| str4  |
| str4  |
| str4  |
| str4  |
| str4  |
|       |
|       |
|       |
|       |
|       |
+-------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM
  (SELECT c_str
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex)) AS u(c)
   ORDER BY 1 DESC);
+-------+
| c_str |
+-------+
|       |
|       |
|       |
|       |
|       |
| str2  |
| str2  |
| str2  |
| str2  |
| str2  |
| str3  |
| str3  |
| str3  |
| str3  |
| str3  |
| str4  |
| str4  |
| str4  |
| str4  |
| str4  |
|       |
|       |
|       |
|       |
|       |
+-------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY c
ORDER BY c ASC;
+----+-----+
| c  | cnt |
+----+-----+
| -1 |   5 |
| 0  |   5 |
| 1  |   5 |
| 2  |   5 |
| 3  |   5 |
+----+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY c
ORDER BY 1 DESC;
+----+-----+
| c  | cnt |
+----+-----+
| 3  |   5 |
| 2  |   5 |
| 1  |   5 |
| 0  |   5 |
| -1 |   5 |
+----+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
ORDER BY c ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num)) AS u(c)
   ORDER BY c ASC);
+----+
| c  |
+----+
| -1 |
| -1 |
| -1 |
| -1 |
| -1 |
| 0  |
| 0  |
| 0  |
| 0  |
| 0  |
| 1  |
| 1  |
| 1  |
| 1  |
| 1  |
| 2  |
| 2  |
| 2  |
| 2  |
| 2  |
| 3  |
| 3  |
| 3  |
| 3  |
| 3  |
+----+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num)) AS u(c)
   ORDER BY 1 DESC);
+----+
| c  |
+----+
| -1 |
| -1 |
| -1 |
| -1 |
| -1 |
| 0  |
| 0  |
| 0  |
| 0  |
| 0  |
| 1  |
| 1  |
| 1  |
| 1  |
| 1  |
| 2  |
| 2  |
| 2  |
| 2  |
| 2  |
| 3  |
| 3  |
| 3  |
| 3  |
| 3  |
+----+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY __time
ORDER BY __time ASC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |  25 |
+-------------------------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY __time
ORDER BY __time DESC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |  25 |
+-------------------------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
ORDER BY __time ASC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
ORDER BY 1 DESC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num)) AS u(c)
   ORDER BY __time ASC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num)) AS u(c)
   ORDER BY 1 DESC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY c_str
ORDER BY c_str ASC;
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
GROUP BY c_str
ORDER BY 1 DESC;
+-------+-----+
| c_str | cnt |
+-------+-----+
| str4  |   5 |
| str3  |   5 |
| str2  |   5 |
|       |   5 |
|       |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
ORDER BY c_str ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM test_unnest,
     unnest(mv_to_array(c_mv_num)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM
  (SELECT c_str
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num)) AS u(c)
   ORDER BY c_str ASC);
+-------+
| c_str |
+-------+
|       |
|       |
|       |
|       |
|       |
| str2  |
| str2  |
| str2  |
| str2  |
| str2  |
| str3  |
| str3  |
| str3  |
| str3  |
| str3  |
| str4  |
| str4  |
| str4  |
| str4  |
| str4  |
|       |
|       |
|       |
|       |
|       |
+-------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM
  (SELECT c_str
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num)) AS u(c)
   ORDER BY 1 DESC);
+-------+
| c_str |
+-------+
|       |
|       |
|       |
|       |
|       |
| str2  |
| str2  |
| str2  |
| str2  |
| str2  |
| str3  |
| str3  |
| str3  |
| str3  |
| str3  |
| str4  |
| str4  |
| str4  |
| str4  |
| str4  |
|       |
|       |
|       |
|       |
|       |
+-------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY c
ORDER BY c ASC;
+-------------+-----+
| c           | cnt |
+-------------+-----+
|             |   5 |
|             |   5 |
| 1           |   5 |
| [2]         |   5 |
| [3, [4, 5]] |   5 |
+-------------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY c
ORDER BY 1 DESC;
+-------------+-----+
| c           | cnt |
+-------------+-----+
| [3, [4, 5]] |   5 |
| [2]         |   5 |
| 1           |   5 |
|             |   5 |
|             |   5 |
+-------------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
ORDER BY c ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
   ORDER BY c ASC);
+-------------+
| c           |
+-------------+
|             |
|             |
|             |
|             |
|             |
| 1           |
| 1           |
| 1           |
| 1           |
| 1           |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
|             |
|             |
|             |
|             |
|             |
+-------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
   ORDER BY 1 DESC);
+-------------+
| c           |
+-------------+
|             |
|             |
|             |
|             |
|             |
| 1           |
| 1           |
| 1           |
| 1           |
| 1           |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [2]         |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
|             |
|             |
|             |
|             |
|             |
+-------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY __time
ORDER BY __time ASC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |  25 |
+-------------------------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY __time
ORDER BY __time DESC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |  25 |
+-------------------------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
ORDER BY __time ASC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
ORDER BY 1 DESC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
   ORDER BY __time ASC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
   ORDER BY 1 DESC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY c_str
ORDER BY c_str ASC;
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
GROUP BY c_str
ORDER BY 1 DESC;
+-------+-----+
| c_str | cnt |
+-------+-----+
| str4  |   5 |
| str3  |   5 |
| str2  |   5 |
|       |   5 |
|       |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
ORDER BY c_str ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM
  (SELECT c_str
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
   ORDER BY c_str ASC);
+-------+
| c_str |
+-------+
|       |
|       |
|       |
|       |
|       |
| str2  |
| str2  |
| str2  |
| str2  |
| str2  |
| str3  |
| str3  |
| str3  |
| str3  |
| str3  |
| str4  |
| str4  |
| str4  |
| str4  |
| str4  |
|       |
|       |
|       |
|       |
|       |
+-------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM
  (SELECT c_str
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
   ORDER BY 1 DESC);
+-------+
| c_str |
+-------+
|       |
|       |
|       |
|       |
|       |
| str2  |
| str2  |
| str2  |
| str2  |
| str2  |
| str3  |
| str3  |
| str3  |
| str3  |
| str3  |
| str4  |
| str4  |
| str4  |
| str4  |
| str4  |
|       |
|       |
|       |
|       |
|       |
+-------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY c
ORDER BY c ASC;
+---+-----+
| c | cnt |
+---+-----+
|   |   5 |
|   |   5 |
| 1 |   5 |
| 2 |   5 |
| 3 |   5 |
+---+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY c
ORDER BY 1 DESC;
+---+-----+
| c | cnt |
+---+-----+
| 3 |   5 |
| 2 |   5 |
| 1 |   5 |
|   |   5 |
|   |   5 |
+---+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
ORDER BY c ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   ORDER BY c ASC);
+---+
| c |
+---+
|   |
|   |
|   |
|   |
|   |
| 1 |
| 1 |
| 1 |
| 1 |
| 1 |
| 2 |
| 2 |
| 2 |
| 2 |
| 2 |
| 3 |
| 3 |
| 3 |
| 3 |
| 3 |
|   |
|   |
|   |
|   |
|   |
+---+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   ORDER BY 1 DESC);
+---+
| c |
+---+
|   |
|   |
|   |
|   |
|   |
| 1 |
| 1 |
| 1 |
| 1 |
| 1 |
| 2 |
| 2 |
| 2 |
| 2 |
| 2 |
| 3 |
| 3 |
| 3 |
| 3 |
| 3 |
|   |
|   |
|   |
|   |
|   |
+---+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY __time
ORDER BY __time ASC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |  25 |
+-------------------------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY __time
ORDER BY __time DESC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |  25 |
+-------------------------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
ORDER BY __time ASC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
ORDER BY 1 DESC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   ORDER BY __time ASC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   ORDER BY 1 DESC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY c_str
ORDER BY c_str ASC;
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
GROUP BY c_str
ORDER BY 1 DESC;
+-------+-----+
| c_str | cnt |
+-------+-----+
| str4  |   5 |
| str3  |   5 |
| str2  |   5 |
|       |   5 |
|       |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
ORDER BY c_str ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM
  (SELECT c_str
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   ORDER BY c_str ASC);
+-------+
| c_str |
+-------+
|       |
|       |
|       |
|       |
|       |
| str2  |
| str2  |
| str2  |
| str2  |
| str2  |
| str3  |
| str3  |
| str3  |
| str3  |
| str3  |
| str4  |
| str4  |
| str4  |
| str4  |
| str4  |
|       |
|       |
|       |
|       |
|       |
+-------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM
  (SELECT c_str
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   ORDER BY 1 DESC);
+-------+
| c_str |
+-------+
|       |
|       |
|       |
|       |
|       |
| str2  |
| str2  |
| str2  |
| str2  |
| str2  |
| str3  |
| str3  |
| str3  |
| str3  |
| str3  |
| str4  |
| str4  |
| str4  |
| str4  |
| str4  |
|       |
|       |
|       |
|       |
|       |
+-------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY c
ORDER BY c ASC;
+-------------+-----+
| c           | cnt |
+-------------+-----+
|             |   5 |
|             |   3 |
| 1           |   3 |
| [2]         |   3 |
| [3, [4, 5]] |   3 |
+-------------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY c
ORDER BY 1 DESC;
+-------------+-----+
| c           | cnt |
+-------------+-----+
| [3, [4, 5]] |   3 |
| [2]         |   3 |
| 1           |   3 |
|             |   3 |
|             |   5 |
+-------------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
ORDER BY c ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
   ORDER BY c ASC);
+-------------+
| c           |
+-------------+
|             |
|             |
|             |
| 1           |
| 1           |
| 1           |
| [2]         |
| [2]         |
| [2]         |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
|             |
|             |
|             |
|             |
|             |
+-------------+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
   ORDER BY 1 DESC);
+-------------+
| c           |
+-------------+
|             |
|             |
|             |
| 1           |
| 1           |
| 1           |
| [2]         |
| [2]         |
| [2]         |
| [3, [4, 5]] |
| [3, [4, 5]] |
| [3, [4, 5]] |
|             |
|             |
|             |
|             |
|             |
+-------------+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY __time
ORDER BY __time ASC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |  17 |
+-------------------------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY __time
ORDER BY __time DESC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |  17 |
+-------------------------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
ORDER BY __time ASC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
ORDER BY 1 DESC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
   ORDER BY __time ASC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
   ORDER BY 1 DESC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY c_str
ORDER BY c_str ASC;
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   1 |
|       |   1 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
GROUP BY c_str
ORDER BY 1 DESC;
+-------+-----+
| c_str | cnt |
+-------+-----+
| str4  |   5 |
| str3  |   5 |
| str2  |   5 |
|       |   1 |
|       |   1 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
ORDER BY c_str ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM test_unnest,
     unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM
  (SELECT c_str
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
   ORDER BY c_str ASC);
+-------+
| c_str |
+-------+
|       |
| str2  |
| str2  |
| str2  |
| str2  |
| str2  |
| str3  |
| str3  |
| str3  |
| str3  |
| str3  |
| str4  |
| str4  |
| str4  |
| str4  |
| str4  |
|       |
+-------+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM
  (SELECT c_str
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
   ORDER BY 1 DESC);
+-------+
| c_str |
+-------+
|       |
| str2  |
| str2  |
| str2  |
| str2  |
| str2  |
| str3  |
| str3  |
| str3  |
| str3  |
| str3  |
| str4  |
| str4  |
| str4  |
| str4  |
| str4  |
|       |
+-------+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY c
ORDER BY c ASC;
+---+-----+
| c | cnt |
+---+-----+
|   |   5 |
|   |   3 |
| 1 |   3 |
| 2 |   3 |
| 3 |   3 |
+---+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY c
ORDER BY 1 DESC;
+---+-----+
| c | cnt |
+---+-----+
| 3 |   3 |
| 2 |   3 |
| 1 |   3 |
|   |   3 |
|   |   5 |
+---+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
ORDER BY c ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
   ORDER BY c ASC);
+---+
| c |
+---+
|   |
|   |
|   |
| 1 |
| 1 |
| 1 |
| 2 |
| 2 |
| 2 |
| 3 |
| 3 |
| 3 |
|   |
|   |
|   |
|   |
|   |
+---+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
   ORDER BY 1 DESC);
+---+
| c |
+---+
|   |
|   |
|   |
| 1 |
| 1 |
| 1 |
| 2 |
| 2 |
| 2 |
| 3 |
| 3 |
| 3 |
|   |
|   |
|   |
|   |
|   |
+---+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY __time
ORDER BY __time ASC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |  17 |
+-------------------------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY __time
ORDER BY __time DESC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |  17 |
+-------------------------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
ORDER BY __time ASC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
ORDER BY 1 DESC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
   ORDER BY __time ASC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
   ORDER BY 1 DESC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY c_str
ORDER BY c_str ASC;
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   1 |
|       |   1 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
GROUP BY c_str
ORDER BY 1 DESC;
+-------+-----+
| c_str | cnt |
+-------+-----+
| str4  |   5 |
| str3  |   5 |
| str2  |   5 |
|       |   1 |
|       |   1 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
ORDER BY c_str ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM
  (SELECT c_str
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
   ORDER BY c_str ASC);
+-------+
| c_str |
+-------+
|       |
| str2  |
| str2  |
| str2  |
| str2  |
| str2  |
| str3  |
| str3  |
| str3  |
| str3  |
| str3  |
| str4  |
| str4  |
| str4  |
| str4  |
| str4  |
|       |
+-------+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM
  (SELECT c_str
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
   ORDER BY 1 DESC);
+-------+
| c_str |
+-------+
|       |
| str2  |
| str2  |
| str2  |
| str2  |
| str2  |
| str3  |
| str3  |
| str3  |
| str3  |
| str3  |
| str4  |
| str4  |
| str4  |
| str4  |
| str4  |
|       |
+-------+
(17 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY c
ORDER BY c ASC;
+---+-----+
| c | cnt |
+---+-----+
|   |  15 |
|   |  10 |
+---+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY c
ORDER BY 1 DESC;
+---+-----+
| c | cnt |
+---+-----+
|   |  10 |
|   |  15 |
+---+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
ORDER BY c ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
   ORDER BY c ASC);
+---+
| c |
+---+
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
+---+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
   ORDER BY 1 DESC);
+---+
| c |
+---+
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
+---+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY __time
ORDER BY __time ASC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |  25 |
+-------------------------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY __time
ORDER BY __time DESC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |  25 |
+-------------------------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
ORDER BY __time ASC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
ORDER BY 1 DESC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
   ORDER BY __time ASC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
   ORDER BY 1 DESC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY c_str
ORDER BY c_str ASC;
+-------+-----+
| c_str | cnt |
+-------+-----+
|       |   5 |
|       |   5 |
| str2  |   5 |
| str3  |   5 |
| str4  |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str,
       count(*) cnt
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
GROUP BY c_str
ORDER BY 1 DESC;
+-------+-----+
| c_str | cnt |
+-------+-----+
| str4  |   5 |
| str3  |   5 |
| str2  |   5 |
|       |   5 |
|       |   5 |
+-------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
ORDER BY c_str ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM test_unnest,
     unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM
  (SELECT c_str
   FROM test_unnest,
        unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
   ORDER BY c_str ASC);
+-------+
| c_str |
+-------+
|       |
|       |
|       |
|       |
|       |
| str2  |
| str2  |
| str2  |
| str2  |
| str2  |
| str3  |
| str3  |
| str3  |
| str3  |
| str3  |
| str4  |
| str4  |
| str4  |
| str4  |
| str4  |
|       |
|       |
|       |
|       |
|       |
+-------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_str
FROM
  (SELECT c_str
   FROM test_unnest,
        unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
   ORDER BY 1 DESC);
+-------+
| c_str |
+-------+
|       |
|       |
|       |
|       |
|       |
| str2  |
| str2  |
| str2  |
| str2  |
| str2  |
| str3  |
| str3  |
| str3  |
| str3  |
| str3  |
| str4  |
| str4  |
| str4  |
| str4  |
| str4  |
|       |
|       |
|       |
|       |
|       |
+-------+
(25 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A1_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex)) AS u(c)
   LIMIT 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A1_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex)) AS u(c)
   OFFSET 1);
+-----+
| cnt |
+-----+
|  24 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A1_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex)) AS u(c)
   LIMIT 1
   OFFSET 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A2_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num)) AS u(c)
   LIMIT 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A2_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num)) AS u(c)
   OFFSET 1);
+-----+
| cnt |
+-----+
|  24 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A2_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num)) AS u(c)
   LIMIT 1
   OFFSET 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A3_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
   LIMIT 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A3_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
   OFFSET 1);
+-----+
| cnt |
+-----+
|  24 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A3_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
   LIMIT 1
   OFFSET 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A4_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   LIMIT 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A4_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   OFFSET 1);
+-----+
| cnt |
+-----+
|  24 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A4_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   LIMIT 1
   OFFSET 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A5_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
   LIMIT 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A5_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
   OFFSET 1);
+-----+
| cnt |
+-----+
|  16 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A5_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
   LIMIT 1
   OFFSET 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A6_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
   LIMIT 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A6_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
   OFFSET 1);
+-----+
| cnt |
+-----+
|  16 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A6_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
   LIMIT 1
   OFFSET 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A7_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
   LIMIT 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A7_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
   OFFSET 1);
+-----+
| cnt |
+-----+
|  24 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A7_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
   LIMIT 1
   OFFSET 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
CROSS JOIN unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
INNER JOIN test_unnest t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
CROSS JOIN unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
INNER JOIN test_unnest t2 ON u.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
INNER JOIN test_unnest t2,
           unnest(mv_to_array(t2.c_mv_num_with_null_and_empty_val)) AS u(c) ON cast(t2.c_long AS char)=u.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
INNER JOIN test_unnest t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
INNER JOIN test_unnest t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t2.c_long=t1.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t2.c=cast(t1.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM t1
INNER JOIN test_unnest t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM t1
INNER JOIN test_unnest t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
INNER JOIN t2 ON t2.c_long=t1.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
INNER JOIN t2 ON t2.c=cast(t1.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
INNER JOIN test_unnest t2,
           unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
INNER JOIN test_unnest t2,
           unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
INNER JOIN test_unnest t2,
           unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON cast(t1.c_long AS char)=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
INNER JOIN test_unnest t2,
           unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
INNER JOIN test_unnest,
           unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
INNER JOIN test_unnest,
           unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
INNER JOIN test_unnest,
           unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON cast(t1.c_long AS char)=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
INNER JOIN test_unnest,
           unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(75 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
+-------+--------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(75 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
+-------+--------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(75 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.c_long=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
+-------+--------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
CROSS JOIN unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
JOIN test_unnest t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
CROSS JOIN unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
JOIN test_unnest t2 ON u.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
JOIN test_unnest t2,
     unnest(mv_to_array(t2.c_mv_num_with_null_and_empty_val)) AS u(c) ON cast(t2.c_long AS char)=u.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
JOIN test_unnest t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
JOIN test_unnest t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t2.c_long=t1.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t2.c=cast(t1.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM t1
JOIN test_unnest t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM t1
JOIN test_unnest t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
JOIN t2 ON t2.c_long=t1.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
JOIN t2 ON t2.c=cast(t1.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
JOIN test_unnest t2,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
JOIN test_unnest t2,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
JOIN test_unnest t2,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON cast(t1.c_long AS char)=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
JOIN test_unnest t2,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
JOIN test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
JOIN test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
JOIN test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON cast(t1.c_long AS char)=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
JOIN test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(75 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
+-------+--------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(75 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
+-------+--------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
JOIN t1 t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(75 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
JOIN t1 t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
JOIN t1 t2 ON t1.c_long=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
JOIN t1 t2 ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
+-------+--------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
CROSS JOIN unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
LEFT JOIN test_unnest t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
CROSS JOIN unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
LEFT JOIN test_unnest t2 ON u.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
LEFT JOIN test_unnest t2,
          unnest(mv_to_array(t2.c_mv_num_with_null_and_empty_val)) AS u(c) ON cast(t2.c_long AS char)=u.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
LEFT JOIN test_unnest t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
LEFT JOIN test_unnest t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t2.c_long=t1.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t2.c=cast(t1.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM t1
LEFT JOIN test_unnest t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM t1
LEFT JOIN test_unnest t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
LEFT JOIN t2 ON t2.c_long=t1.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
LEFT JOIN t2 ON t2.c=cast(t1.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON cast(t1.c_long AS char)=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
LEFT JOIN test_unnest,
          unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
LEFT JOIN test_unnest,
          unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
LEFT JOIN test_unnest,
          unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON cast(t1.c_long AS char)=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
LEFT JOIN test_unnest,
          unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(75 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
+-------+--------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(75 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
+-------+--------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(75 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.c_long=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
+-------+--------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
CROSS JOIN unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
RIGHT JOIN test_unnest t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
CROSS JOIN unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
RIGHT JOIN test_unnest t2 ON u.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
RIGHT JOIN test_unnest t2,
           unnest(mv_to_array(t2.c_mv_num_with_null_and_empty_val)) AS u(c) ON cast(t2.c_long AS char)=u.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
RIGHT JOIN test_unnest t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
RIGHT JOIN test_unnest t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t2.c_long=t1.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t2.c=cast(t1.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM t1
RIGHT JOIN test_unnest t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM t1
RIGHT JOIN test_unnest t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
RIGHT JOIN t2 ON t2.c_long=t1.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
RIGHT JOIN t2 ON t2.c=cast(t1.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON cast(t1.c_long AS char)=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
RIGHT JOIN test_unnest,
           unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
RIGHT JOIN test_unnest,
           unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
RIGHT JOIN test_unnest,
           unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON cast(t1.c_long AS char)=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
RIGHT JOIN test_unnest,
           unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(75 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
+-------+--------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(75 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
+-------+--------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(75 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.c_long=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
+-------+--------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
CROSS JOIN unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
FULL JOIN test_unnest t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
CROSS JOIN unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
FULL JOIN test_unnest t2 ON u.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
FULL JOIN test_unnest t2,
          unnest(mv_to_array(t2.c_mv_num_with_null_and_empty_val)) AS u(c) ON cast(t2.c_long AS char)=u.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
FULL JOIN test_unnest t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
FULL JOIN test_unnest t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t2.c_long=t1.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t2.c=cast(t1.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM t1
FULL JOIN test_unnest t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM t1
FULL JOIN test_unnest t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
FULL JOIN t2 ON t2.c_long=t1.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
FULL JOIN t2 ON t2.c=cast(t1.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
FULL JOIN test_unnest t2,
          unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
FULL JOIN test_unnest t2,
          unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
FULL JOIN test_unnest t2,
          unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON cast(t1.c_long AS char)=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
FULL JOIN test_unnest t2,
          unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c) ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
FULL JOIN test_unnest,
          unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
FULL JOIN test_unnest,
          unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
FULL JOIN test_unnest,
          unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON cast(t1.c_long AS char)=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
FULL JOIN test_unnest,
          unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) t2 AS u(c) ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(75 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
+-------+--------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(75 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c_long=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
+-------+--------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.c_long=t2.c_long
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(75 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.c=cast(t2.c_long AS char)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.c_long=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.c=t2.c
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
+-------+--------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
CROSS JOIN unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(45 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(mv_to_array(t2.c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(45 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(45 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(45 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(45 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(45 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c1
FROM test_unnest t1
CROSS JOIN unnest(mv_to_array(t1.c_mv_num_with_null_and_empty_val)) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(mv_to_array(t2.c_mv_num_with_null_and_empty_val)) AS u2(c2)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+----+
| c_str | c_long | c1 |
+-------+--------+----+
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 | 1  |
|       |      1 | 1  |
|       |      1 | 1  |
|       |      1 | 1  |
|       |      1 | 1  |
|       |      1 | 1  |
|       |      1 | 1  |
|       |      1 | 1  |
|       |      1 | 1  |
|       |      1 | 1  |
|       |      1 | 1  |
|       |      1 | 1  |
|       |      1 | 1  |
|       |      1 | 1  |
|       |      1 | 1  |
|       |      1 | 2  |
|       |      1 | 2  |
|       |      1 | 2  |
|       |      1 | 2  |
|       |      1 | 2  |
|       |      1 | 2  |
|       |      1 | 2  |
|       |      1 | 2  |
|       |      1 | 2  |
|       |      1 | 2  |
|       |      1 | 2  |
|       |      1 | 2  |
|       |      1 | 2  |
|       |      1 | 2  |
|       |      1 | 2  |
|       |      1 | 3  |
|       |      1 | 3  |
|       |      1 | 3  |
|       |      1 | 3  |
|       |      1 | 3  |
|       |      1 | 3  |
|       |      1 | 3  |
|       |      1 | 3  |
|       |      1 | 3  |
|       |      1 | 3  |
|       |      1 | 3  |
|       |      1 | 3  |
|       |      1 | 3  |
|       |      1 | 3  |
|       |      1 | 3  |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
|       |      1 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 | 1  |
| str2  |      2 | 1  |
| str2  |      2 | 1  |
| str2  |      2 | 1  |
| str2  |      2 | 1  |
| str2  |      2 | 1  |
| str2  |      2 | 1  |
| str2  |      2 | 1  |
| str2  |      2 | 1  |
| str2  |      2 | 1  |
| str2  |      2 | 1  |
| str2  |      2 | 1  |
| str2  |      2 | 1  |
| str2  |      2 | 1  |
| str2  |      2 | 1  |
| str2  |      2 | 2  |
| str2  |      2 | 2  |
| str2  |      2 | 2  |
| str2  |      2 | 2  |
| str2  |      2 | 2  |
| str2  |      2 | 2  |
| str2  |      2 | 2  |
| str2  |      2 | 2  |
| str2  |      2 | 2  |
| str2  |      2 | 2  |
| str2  |      2 | 2  |
| str2  |      2 | 2  |
| str2  |      2 | 2  |
| str2  |      2 | 2  |
| str2  |      2 | 2  |
| str2  |      2 | 3  |
| str2  |      2 | 3  |
| str2  |      2 | 3  |
| str2  |      2 | 3  |
| str2  |      2 | 3  |
| str2  |      2 | 3  |
| str2  |      2 | 3  |
| str2  |      2 | 3  |
| str2  |      2 | 3  |
| str2  |      2 | 3  |
| str2  |      2 | 3  |
| str2  |      2 | 3  |
| str2  |      2 | 3  |
| str2  |      2 | 3  |
| str2  |      2 | 3  |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
| str2  |      2 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 | 1  |
|       |      0 | 1  |
|       |      0 | 1  |
|       |      0 | 1  |
|       |      0 | 1  |
|       |      0 | 1  |
|       |      0 | 1  |
|       |      0 | 1  |
|       |      0 | 1  |
|       |      0 | 1  |
|       |      0 | 1  |
|       |      0 | 1  |
|       |      0 | 1  |
|       |      0 | 1  |
|       |      0 | 1  |
|       |      0 | 2  |
|       |      0 | 2  |
|       |      0 | 2  |
|       |      0 | 2  |
|       |      0 | 2  |
|       |      0 | 2  |
|       |      0 | 2  |
|       |      0 | 2  |
|       |      0 | 2  |
|       |      0 | 2  |
|       |      0 | 2  |
|       |      0 | 2  |
|       |      0 | 2  |
|       |      0 | 2  |
|       |      0 | 2  |
|       |      0 | 3  |
|       |      0 | 3  |
|       |      0 | 3  |
|       |      0 | 3  |
|       |      0 | 3  |
|       |      0 | 3  |
|       |      0 | 3  |
|       |      0 | 3  |
|       |      0 | 3  |
|       |      0 | 3  |
|       |      0 | 3  |
|       |      0 | 3  |
|       |      0 | 3  |
|       |      0 | 3  |
|       |      0 | 3  |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
|       |      0 |    |
+-------+--------+----+
(225 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(225 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(225 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(225 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t2.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c),
     test_unnest t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t1.c_long=t2.c_long;
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c),
     test_unnest t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND u.c=cast(t2.c_long AS char);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1,
     test_unnest t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t1.c_long=t2.c_long;
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1,
     test_unnest t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t1.c=cast(t2.c_long AS char);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,

  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long=t1.c_long;
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,

  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c=cast(t1.c_long AS char);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM t1,
     test_unnest t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t1.c_long=t2.c_long;
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM t1,
     test_unnest t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t1.c=cast(t2.c_long AS char);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long=t1.c_long;
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 |   |
+-------+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       c
FROM test_unnest t1,
     t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c=cast(t1.c_long AS char);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
+-------+--------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c1
FROM test_unnest t1,
     unnest(mv_to_array(t1.c_mv_num_with_null_and_empty_val)) AS u1(c1),
     test_unnest,
     unnest(mv_to_array(t2.c_mv_num_with_null_and_empty_val)) t2 AS u2(c2)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t1.c_long=t2.c_long;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c1
FROM test_unnest t1,
     unnest(mv_to_array(t1.c_mv_num_with_null_and_empty_val)) AS u1(c1),
     test_unnest,
     unnest(mv_to_array(t2.c_mv_num_with_null_and_empty_val)) t2 AS u2(c2)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t1.c1=cast(t2.c_long AS char);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c1
FROM test_unnest t1,
     unnest(mv_to_array(t1.c_mv_num_with_null_and_empty_val)) AS u1(c1),
     test_unnest,
     unnest(mv_to_array(t2.c_mv_num_with_null_and_empty_val)) t2 AS u2(c2)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND cast(t1.c_long AS char)=t2.c2;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       c1
FROM test_unnest t1,
     unnest(mv_to_array(t1.c_mv_num_with_null_and_empty_val)) AS u1(c1),
     test_unnest,
     unnest(mv_to_array(t2.c_mv_num_with_null_and_empty_val)) t2 AS u2(c2)
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t1.c1=t2.c2;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1,

  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t1.c_long=t2.c_long;
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(75 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1,

  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t1.c=cast(t2.c_long AS char);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1,

  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND cast(t1.c_long AS char)=t2.c;
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t1,

  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t1.c=t2.c;
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
+-------+--------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1,

  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t1.c_long=t2.c_long;
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(75 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1,

  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t1.c=cast(t2.c_long AS char);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1,

  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND cast(t1.c_long AS char)=t2.c;
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1,

  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)) t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t1.c=t2.c;
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
+-------+--------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1,
     t1 t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t1.c_long=t2.c_long;
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
+-------+--------+---+
(75 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1,
     t1 t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t1.c=cast(t2.c_long AS char);
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1,
     t1 t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND cast(t1.c_long AS char)=t2.c;
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
+-------+--------+---+
(30 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c))
SELECT t1.c_str,
       t1.c_long,
       t1.c
FROM t1,
     t1 t2
WHERE t1.c_long IN (0,
                    1,
                    2,
                    999)
  AND t2.c_long IN (0,
                    1,
                    2,
                    999)
  AND t1.c=t2.c;
+-------+--------+---+
| c_str | c_long | c |
+-------+--------+---+
|       |      1 |   |
|       |      1 |   |
|       |      1 |   |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 1 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 2 |
|       |      1 | 3 |
|       |      1 | 3 |
|       |      1 | 3 |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 |   |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 1 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 2 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
| str2  |      2 | 3 |
|       |      0 |   |
|       |      0 |   |
|       |      0 |   |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 1 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 2 |
|       |      0 | 3 |
|       |      0 | 3 |
|       |      0 | 3 |
+-------+--------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A1_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    999)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex)) AS u(c)
   WHERE c_long IN (2,
                    999));
+--------+-------------+
| c_long | c           |
+--------+-------------+
|      0 | 1           |
|      0 | [2]         |
|      0 | [3, [4, 5]] |
|      0 | my_empty    |
|      0 | my_null     |
|      1 | 1           |
|      1 | [2]         |
|      1 | [3, [4, 5]] |
|      1 | my_empty    |
|      1 | my_null     |
|      2 | 1           |
|      2 | [2]         |
|      2 | [3, [4, 5]] |
|      2 | my_empty    |
|      2 | my_null     |
+--------+-------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A1_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex)) AS u(c)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex)) AS u(c));
Unhandled Query Planning Failure
!error

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A2_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    999)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num)) AS u(c)
   WHERE c_long IN (2,
                    999));
+--------+----+
| c_long | c  |
+--------+----+
|      0 | -1 |
|      0 | 0  |
|      0 | 1  |
|      0 | 2  |
|      0 | 3  |
|      1 | -1 |
|      1 | 0  |
|      1 | 1  |
|      1 | 2  |
|      1 | 3  |
|      2 | -1 |
|      2 | 0  |
|      2 | 1  |
|      2 | 2  |
|      2 | 3  |
+--------+----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A2_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num)) AS u(c)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num)) AS u(c));
Unhandled Query Planning Failure
!error

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A3_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    999)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (2,
                    999));
+--------+-------------+
| c_long | c           |
+--------+-------------+
|      0 |             |
|      0 | 1           |
|      0 | [2]         |
|      0 | [3, [4, 5]] |
|      0 |             |
|      1 |             |
|      1 | 1           |
|      1 | [2]         |
|      1 | [3, [4, 5]] |
|      1 |             |
|      2 |             |
|      2 | 1           |
|      2 | [2]         |
|      2 | [3, [4, 5]] |
|      2 |             |
+--------+-------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A3_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_val)) AS u(c));
Unhandled Query Planning Failure
!error

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A4_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    999)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (2,
                    999));
+--------+---+
| c_long | c |
+--------+---+
|      0 |   |
|      0 | 1 |
|      0 | 2 |
|      0 | 3 |
|      0 |   |
|      1 |   |
|      1 | 1 |
|      1 | 2 |
|      1 | 3 |
|      1 |   |
|      2 |   |
|      2 | 1 |
|      2 | 2 |
|      2 | 3 |
|      2 |   |
+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A4_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c));
Unhandled Query Planning Failure
!error

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A5_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    999)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
   WHERE c_long IN (2,
                    999));
+--------+-------------+
| c_long | c           |
+--------+-------------+
|      0 |             |
|      1 |             |
|      2 |             |
|      2 | 1           |
|      2 | [2]         |
|      2 | [3, [4, 5]] |
|      2 |             |
+--------+-------------+
(7 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A5_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_complex_with_null_and_empty_row)) AS u(c));
Unhandled Query Planning Failure
!error

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A6_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    999)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
   WHERE c_long IN (2,
                    999));
+--------+---+
| c_long | c |
+--------+---+
|      0 |   |
|      1 |   |
|      2 |   |
|      2 | 1 |
|      2 | 2 |
|      2 | 3 |
|      2 |   |
+--------+---+
(7 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A6_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_row)) AS u(c));
Unhandled Query Planning Failure
!error

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A7_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    999)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
   WHERE c_long IN (2,
                    999));
+--------+---+
| c_long | c |
+--------+---+
|      0 |   |
|      0 |   |
|      0 |   |
|      0 |   |
|      0 |   |
|      1 |   |
|      1 |   |
|      1 |   |
|      1 |   |
|      1 |   |
|      2 |   |
|      2 |   |
|      2 |   |
|      2 |   |
|      2 |   |
+--------+---+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A7_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(mv_to_array(c_mv_all_null_and_empty_val)) AS u(c));
Unhandled Query Planning Failure
!error

#-------------------------------------------------------------------------
# Total query count 579 Positive tests: 455 Negative tests: 124
#-------------------------------------------------------------------------
