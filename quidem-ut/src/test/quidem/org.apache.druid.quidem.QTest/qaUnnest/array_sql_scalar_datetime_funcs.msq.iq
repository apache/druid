!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardMSQComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/array
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: SEL_DATASOURCE
#-------------------------------------------------------------------------
SELECT *
FROM test_unnest;
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| __time                  | s_int | s_null | a_bool       | a_int        | a_float          | a_str          | a_null             | a_empty | a_mixed                  | a_nested                                                                                                                                                                                                                                                                                                                      |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 2022-01-01 00:00:00.000 |     1 |        | [1, 0, null] | [1, 2, null] | [0.1, 0.2, null] | [S1, S2, null] | [null, null, null] | []      | [true, 1, 0.1, S1, null] | [[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null]]]] |
| 2022-02-01 00:00:00.000 |     2 |        | [null, 1, 0] | [null, 1, 2] | [null, 0.1, 0.2] | [null, S1, S2] | [null, null, null] | []      | [null, true, 1, 0.1, S1] | [[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"]]]] |
| 2022-03-01 00:00:00.000 |       |        | [0, null, 1] | [2, null, 1] | [0.2, null, 0.1] | [S2, null, S1] | [null, null, null] | []      | [S1, null, true, 1, 0.1] | [[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1]]]] |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B1_C1_D2
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT CURRENT_TIMESTAMP AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE (s_int IN (0,
                    1,
                    2)
          OR s_int IS NULL)
     AND (CURRENT_TIMESTAMP IS NOT NULL));
+--------+
| EXPR$0 |
+--------+
|      9 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B2_C1_D2
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT CURRENT_DATE AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE (s_int IN (0,
                    1,
                    2)
          OR s_int IS NULL)
     AND (CURRENT_DATE IS NOT NULL));
+--------+
| EXPR$0 |
+--------+
|      9 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B3_C1_D2
#-------------------------------------------------------------------------
SELECT date_trunc('year', c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (date_trunc('year', c) IS NOT NULL);
Cannot apply 'DATE_TRUNC' to arguments of type 'DATE_TRUNC(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B3_C2_D2
#-------------------------------------------------------------------------
SELECT date_trunc('year', s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (date_trunc('year', s_int) IS NOT NULL);
Cannot apply 'DATE_TRUNC' to arguments of type 'DATE_TRUNC(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B4_C1_D2
#-------------------------------------------------------------------------
SELECT time_ceil(c, 'P1D') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_ceil(c, 'P1D') IS NOT NULL);
Cannot apply 'TIME_CEIL' to arguments of type 'TIME_CEIL(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B4_C2_D2
#-------------------------------------------------------------------------
SELECT time_ceil(s_int, 'P1D') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_ceil(s_int, 'P1D') IS NOT NULL);
Cannot apply 'TIME_CEIL' to arguments of type 'TIME_CEIL(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B5_C1_D2
#-------------------------------------------------------------------------
SELECT time_floor(c, 'P1D') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_floor(c, 'P1D') IS NOT NULL);
Cannot apply 'TIME_FLOOR' to arguments of type 'TIME_FLOOR(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B5_C2_D2
#-------------------------------------------------------------------------
SELECT time_floor(s_int, 'P1D') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_floor(s_int, 'P1D') IS NOT NULL);
Cannot apply 'TIME_FLOOR' to arguments of type 'TIME_FLOOR(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B6_C1_D2
#-------------------------------------------------------------------------
SELECT time_shift(c, 'P1D', 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_shift(c, 'P1D', 1) IS NOT NULL);
Cannot apply 'TIME_SHIFT' to arguments of type 'TIME_SHIFT(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B6_C2_D2
#-------------------------------------------------------------------------
SELECT time_shift(s_int, 'P1D', 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_shift(s_int, 'P1D', 1) IS NOT NULL);
Cannot apply 'TIME_SHIFT' to arguments of type 'TIME_SHIFT(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B7_C1_D2
#-------------------------------------------------------------------------
SELECT time_extract(c, 'HOUR') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_extract(c, 'HOUR') IS NOT NULL);
Cannot apply 'TIME_EXTRACT' to arguments of type 'TIME_EXTRACT(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B7_C2_D2
#-------------------------------------------------------------------------
SELECT time_extract(s_int, 'HOUR') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_extract(s_int, 'HOUR') IS NOT NULL);
Cannot apply 'TIME_EXTRACT' to arguments of type 'TIME_EXTRACT(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B8_C1_D2
#-------------------------------------------------------------------------
SELECT time_parse(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_parse(c) IS NOT NULL);
Cannot apply 'TIME_PARSE' to arguments of type 'TIME_PARSE(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B8_C2_D2
#-------------------------------------------------------------------------
SELECT time_parse(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_parse(s_int) IS NOT NULL);
Cannot apply 'TIME_PARSE' to arguments of type 'TIME_PARSE(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B9_C1_D2
#-------------------------------------------------------------------------
SELECT time_in_interval(c, '2001-01-01/P1D') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_in_interval(c, '2001-01-01/P1D') IS NOT NULL);
Cannot apply 'TIME_IN_INTERVAL' to arguments of type 'TIME_IN_INTERVAL(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B9_C2_D2
#-------------------------------------------------------------------------
SELECT time_in_interval(s_int, '2001-01-01/P1D') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_in_interval(c, '2001-01-01/P1D') IS NOT NULL);
Cannot apply 'TIME_IN_INTERVAL' to arguments of type 'TIME_IN_INTERVAL(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B10_C1_D2
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (millis_to_timestamp(c)<>'2000-01-01T00:00:00.000Z');
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B10_C2_D2
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (millis_to_timestamp(s_int)<>'2000-01-01T00:00:00.000Z');
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B11_C1_D2
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (timestamp_to_millis(c) IS NOT NULL);
Cannot apply 'TIMESTAMP_TO_MILLIS' to arguments of type 'TIMESTAMP_TO_MILLIS(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B11_C2_D2
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (timestamp_to_millis(s_int) IS NOT NULL);
Cannot apply 'TIMESTAMP_TO_MILLIS' to arguments of type 'TIMESTAMP_TO_MILLIS(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B12_C1_D2
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (extract(DAY
               FROM c) IS NOT NULL);
Cannot apply 'EXTRACT' to arguments of type 'EXTRACT(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B12_C2_D2
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (extract(DAY
               FROM s_int) IS NOT NULL);
Cannot apply 'EXTRACT' to arguments of type 'EXTRACT(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B13_C1_D2
#-------------------------------------------------------------------------
SELECT floor(c TO DAY) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (floor(c TO DAY) IS NOT NULL);
Cannot apply 'FLOOR' to arguments of type 'FLOOR(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B13_C2_D2
#-------------------------------------------------------------------------
SELECT floor(s_int TO DAY) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (floor(s_int TO DAY) IS NOT NULL);
Cannot apply 'FLOOR' to arguments of type 'FLOOR(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B14_C1_D2
#-------------------------------------------------------------------------
SELECT ceil(c TO DAY) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (ceil(c TO DAY) IS NOT NULL);
Cannot apply 'CEIL' to arguments of type 'CEIL(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B14_C2_D2
#-------------------------------------------------------------------------
SELECT ceil(s_int TO DAY) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (ceil(s_int TO DAY) IS NOT NULL);
Cannot apply 'CEIL' to arguments of type 'CEIL(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B15_C1_D2
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (timestampadd(DAY, 1, c) IS NOT NULL);
Cannot apply 'TIMESTAMPADD' to arguments of type 'TIMESTAMPADD(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B15_C2_D2
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (timestampadd(DAY, 1, s_int) IS NOT NULL);
Cannot apply 'TIMESTAMPADD' to arguments of type 'TIMESTAMPADD(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B16_C1_D2
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, c, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (timestampdiff(DAY, c, c) IS NOT NULL);
Cannot apply 'TIMESTAMPDIFF' to arguments of type 'TIMESTAMPDIFF(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B16_C2_D2
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (timestampdiff(DAY, s_int, c) IS NOT NULL);
Cannot apply 'TIMESTAMPDIFF' to arguments of type 'TIMESTAMPDIFF(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B16_C3_D2
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (timestampdiff(DAY, c, s_int) IS NOT NULL);
Cannot apply 'TIMESTAMPDIFF' to arguments of type 'TIMESTAMPDIFF(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B16_C4_D2
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, s_int, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (timestampdiff(DAY, s_int, s_int) IS NOT NULL);
Cannot apply 'TIMESTAMPDIFF' to arguments of type 'TIMESTAMPDIFF(
!error

