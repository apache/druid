!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardMSQComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/array
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C1_D2
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_ordinal_of(cast(c AS char), cast(c AS char)) IS NOT NULL
       OR mv_ordinal_of(cast(c AS char), cast(c AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C2_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_ordinal_of(cast(c AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_ordinal_of(cast(c AS char), cast(s_int AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C2_D2
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_ordinal_of(cast(c AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_ordinal_of(cast(c AS char), cast(s_int AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C3_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_ordinal_of(cast(s_int AS char), cast(c AS char)) IS NOT NULL
       OR mv_ordinal_of(cast(s_int AS char), cast(c AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C3_D2
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_ordinal_of(cast(s_int AS char), cast(c AS char)) IS NOT NULL
       OR mv_ordinal_of(cast(s_int AS char), cast(c AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C4_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_ordinal_of(cast(s_int AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_ordinal_of(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C4_D2
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_ordinal_of(cast(s_int AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_ordinal_of(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C1_D1
#-------------------------------------------------------------------------
SELECT mv_prepend(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_prepend(cast(c AS char), cast(c AS char)) IS NOT NULL
       OR mv_prepend(cast(c AS char), cast(c AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C1_D2
#-------------------------------------------------------------------------
SELECT mv_prepend(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_prepend(cast(c AS char), cast(c AS char)) IS NOT NULL
       OR mv_prepend(cast(c AS char), cast(c AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C2_D1
#-------------------------------------------------------------------------
SELECT mv_prepend(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_prepend(cast(c AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_prepend(cast(c AS char), cast(s_int AS char)) IS NULL);
+------------+
| col        |
+------------+
| ["1","1"]  |
| ["1","2"]  |
| ["2","1"]  |
| ["2","2"]  |
| [null,"1"] |
| [null,"2"] |
|            |
|            |
|            |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C2_D2
#-------------------------------------------------------------------------
SELECT mv_prepend(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_prepend(cast(c AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_prepend(cast(c AS char), cast(s_int AS char)) IS NULL);
+------------+
| col        |
+------------+
| ["1","1"]  |
| ["1","2"]  |
| ["2","1"]  |
| ["2","2"]  |
| [null,"1"] |
| [null,"2"] |
|            |
|            |
|            |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C3_D1
#-------------------------------------------------------------------------
SELECT mv_prepend(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_prepend(cast(s_int AS char), cast(c AS char)) IS NOT NULL
       OR mv_prepend(cast(s_int AS char), cast(c AS char)) IS NULL);
+------------+
| col        |
+------------+
| ["1","1"]  |
| ["1","2"]  |
| ["2","1"]  |
| ["2","2"]  |
| [null,"1"] |
| [null,"2"] |
|            |
|            |
|            |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C3_D2
#-------------------------------------------------------------------------
SELECT mv_prepend(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_prepend(cast(s_int AS char), cast(c AS char)) IS NOT NULL
       OR mv_prepend(cast(s_int AS char), cast(c AS char)) IS NULL);
+------------+
| col        |
+------------+
| ["1","1"]  |
| ["1","2"]  |
| ["2","1"]  |
| ["2","2"]  |
| [null,"1"] |
| [null,"2"] |
|            |
|            |
|            |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C4_D1
#-------------------------------------------------------------------------
SELECT mv_prepend(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_prepend(cast(s_int AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_prepend(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C4_D2
#-------------------------------------------------------------------------
SELECT mv_prepend(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_prepend(cast(s_int AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_prepend(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C1_D1
#-------------------------------------------------------------------------
SELECT mv_append(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_append(cast(c AS char), cast(c AS char)) IS NOT NULL
       OR mv_append(cast(c AS char), cast(c AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C1_D2
#-------------------------------------------------------------------------
SELECT mv_append(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_append(cast(c AS char), cast(c AS char)) IS NOT NULL
       OR mv_append(cast(c AS char), cast(c AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C2_D1
#-------------------------------------------------------------------------
SELECT mv_append(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_append(cast(c AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_append(cast(c AS char), cast(s_int AS char)) IS NULL);
+------------+
| col        |
+------------+
| ["1","1"]  |
| ["1","2"]  |
| ["1",null] |
| ["2","1"]  |
| ["2","2"]  |
| ["2",null] |
|            |
|            |
|            |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C2_D2
#-------------------------------------------------------------------------
SELECT mv_append(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_append(cast(c AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_append(cast(c AS char), cast(s_int AS char)) IS NULL);
+------------+
| col        |
+------------+
| ["1","1"]  |
| ["1","2"]  |
| ["1",null] |
| ["2","1"]  |
| ["2","2"]  |
| ["2",null] |
|            |
|            |
|            |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C3_D1
#-------------------------------------------------------------------------
SELECT mv_append(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_append(cast(s_int AS char), cast(c AS char)) IS NOT NULL
       OR mv_append(cast(s_int AS char), cast(c AS char)) IS NULL);
+------------+
| col        |
+------------+
| ["1","1"]  |
| ["1","2"]  |
| ["1",null] |
| ["2","1"]  |
| ["2","2"]  |
| ["2",null] |
|            |
|            |
|            |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C3_D2
#-------------------------------------------------------------------------
SELECT mv_append(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_append(cast(s_int AS char), cast(c AS char)) IS NOT NULL
       OR mv_append(cast(s_int AS char), cast(c AS char)) IS NULL);
+------------+
| col        |
+------------+
| ["1","1"]  |
| ["1","2"]  |
| ["1",null] |
| ["2","1"]  |
| ["2","2"]  |
| ["2",null] |
|            |
|            |
|            |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C4_D1
#-------------------------------------------------------------------------
SELECT mv_append(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_append(cast(s_int AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_append(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C4_D2
#-------------------------------------------------------------------------
SELECT mv_append(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_append(cast(s_int AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_append(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C1_D1
#-------------------------------------------------------------------------
SELECT mv_concat(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_concat(cast(c AS char), cast(c AS char)) IS NOT NULL
       OR mv_concat(cast(c AS char), cast(c AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C1_D2
#-------------------------------------------------------------------------
SELECT mv_concat(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_concat(cast(c AS char), cast(c AS char)) IS NOT NULL
       OR mv_concat(cast(c AS char), cast(c AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C2_D1
#-------------------------------------------------------------------------
SELECT mv_concat(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_concat(cast(c AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_concat(cast(c AS char), cast(s_int AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","2"] |
| ["2","1"] |
| ["2","2"] |
|           |
|           |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C2_D2
#-------------------------------------------------------------------------
SELECT mv_concat(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_concat(cast(c AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_concat(cast(c AS char), cast(s_int AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","2"] |
| ["2","1"] |
| ["2","2"] |
|           |
|           |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C3_D1
#-------------------------------------------------------------------------
SELECT mv_concat(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_concat(cast(s_int AS char), cast(c AS char)) IS NOT NULL
       OR mv_concat(cast(s_int AS char), cast(c AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","2"] |
| ["2","1"] |
| ["2","2"] |
|           |
|           |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C3_D2
#-------------------------------------------------------------------------
SELECT mv_concat(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_concat(cast(s_int AS char), cast(c AS char)) IS NOT NULL
       OR mv_concat(cast(s_int AS char), cast(c AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","2"] |
| ["2","1"] |
| ["2","2"] |
|           |
|           |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C4_D1
#-------------------------------------------------------------------------
SELECT mv_concat(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_concat(cast(s_int AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_concat(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C4_D2
#-------------------------------------------------------------------------
SELECT mv_concat(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_concat(cast(s_int AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_concat(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C1_D1
#-------------------------------------------------------------------------
SELECT mv_slice(cast(c AS char), 0, 1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_slice(cast(c AS char), 0, 1) IS NOT NULL
       OR mv_slice(cast(c AS char), 0, 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C1_D2
#-------------------------------------------------------------------------
SELECT mv_slice(cast(c AS char), 0, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_slice(cast(c AS char), 0, 1) IS NOT NULL
       OR mv_slice(cast(c AS char), 0, 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C2_D1
#-------------------------------------------------------------------------
SELECT mv_slice(cast(s_int AS char), 0, 1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_slice(cast(s_int AS char), 0, 1) IS NOT NULL
       OR mv_slice(cast(s_int AS char), 0, 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C2_D2
#-------------------------------------------------------------------------
SELECT mv_slice(cast(s_int AS char), 0, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_slice(cast(s_int AS char), 0, 1) IS NOT NULL
       OR mv_slice(cast(s_int AS char), 0, 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C1_D1
#-------------------------------------------------------------------------
SELECT mv_to_string(cast(c AS char), ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_to_string(cast(c AS char), ',') IS NOT NULL
       OR mv_to_string(cast(c AS char), ',') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C1_D2
#-------------------------------------------------------------------------
SELECT mv_to_string(cast(c AS char), ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_to_string(cast(c AS char), ',') IS NOT NULL
       OR mv_to_string(cast(c AS char), ',') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C2_D1
#-------------------------------------------------------------------------
SELECT mv_to_string(cast(s_int AS char), ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_to_string(cast(s_int AS char), ',') IS NOT NULL
       OR mv_to_string(cast(s_int AS char), ',') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C2_D2
#-------------------------------------------------------------------------
SELECT mv_to_string(cast(s_int AS char), ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_to_string(cast(s_int AS char), ',') IS NOT NULL
       OR mv_to_string(cast(s_int AS char), ',') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C1_D1
#-------------------------------------------------------------------------
SELECT string_to_mv(cast(c AS char), ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_mv(cast(c AS char), ',') IS NOT NULL
       OR string_to_mv(cast(c AS char), ',') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C1_D2
#-------------------------------------------------------------------------
SELECT string_to_mv(cast(c AS char), ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_mv(cast(c AS char), ',') IS NOT NULL
       OR string_to_mv(cast(c AS char), ',') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C2_D1
#-------------------------------------------------------------------------
SELECT string_to_mv(cast(s_int AS char), ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_mv(cast(s_int AS char), ',') IS NOT NULL
       OR string_to_mv(cast(s_int AS char), ',') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C2_D2
#-------------------------------------------------------------------------
SELECT string_to_mv(cast(s_int AS char), ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_mv(cast(s_int AS char), ',') IS NOT NULL
       OR string_to_mv(cast(s_int AS char), ',') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

