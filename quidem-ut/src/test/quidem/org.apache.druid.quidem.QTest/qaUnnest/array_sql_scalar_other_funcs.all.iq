!set dartQueryId 00000000-0000-0000-0000-000000000000
!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardAndMSQComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/array
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: SEL_DATASOURCE
#-------------------------------------------------------------------------
SELECT *
FROM test_unnest;
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| __time                  | s_int | s_null | a_bool       | a_int        | a_float          | a_str          | a_null             | a_empty | a_mixed                  | a_nested                                                                                                                                                                                                                                                                                                                      |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 2022-01-01 00:00:00.000 |     1 |        | [1, 0, null] | [1, 2, null] | [0.1, 0.2, null] | [S1, S2, null] | [null, null, null] | []      | [true, 1, 0.1, S1, null] | [[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null]]]] |
| 2022-02-01 00:00:00.000 |     2 |        | [null, 1, 0] | [null, 1, 2] | [null, 0.1, 0.2] | [null, S1, S2] | [null, null, null] | []      | [null, true, 1, 0.1, S1] | [[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"]]]] |
| 2022-03-01 00:00:00.000 |       |        | [0, null, 1] | [2, null, 1] | [0.2, null, 0.1] | [S2, null, S1] | [null, null, null] | []      | [S1, null, true, 1, 0.1] | [[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1]]]] |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B1_C1_D2
#-------------------------------------------------------------------------
SELECT cast(c AS char) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (cast(c AS char)<99999
       OR cast(c AS char) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B1_C2_D2
#-------------------------------------------------------------------------
SELECT cast(s_int AS char) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (cast(s_int AS char)<99999
       OR cast(s_int AS char) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B2_C1_D2
#-------------------------------------------------------------------------
SELECT (CASE c
            WHEN 1 THEN 6
            ELSE 7
        END) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((CASE c
            WHEN 1 THEN 6
            ELSE 7
        END)<99999
       OR (CASE c
               WHEN 1 THEN 6
               ELSE 7
           END) IS NULL);
+-----+
| col |
+-----+
|   6 |
|   6 |
|   6 |
|   7 |
|   7 |
|   7 |
|   7 |
|   7 |
|   7 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B2_C2_D2
#-------------------------------------------------------------------------
SELECT (CASE s_int
            WHEN 1 THEN 8
            ELSE 9
        END) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((CASE s_int
            WHEN 1 THEN 8
            ELSE 9
        END)<99999
       OR (CASE s_int
               WHEN 1 THEN 8
               ELSE 9
           END) IS NULL);
+-----+
| col |
+-----+
|   8 |
|   8 |
|   8 |
|   9 |
|   9 |
|   9 |
|   9 |
|   9 |
|   9 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B3_C1_D2
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN c=1 THEN 6
            ELSE 7
        END) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((CASE
            WHEN c=1 THEN 6
            ELSE 7
        END)<99999
       OR (CASE
               WHEN c=1 THEN 6
               ELSE 7
           END) IS NULL);
+-----+
| col |
+-----+
|   6 |
|   6 |
|   6 |
|   7 |
|   7 |
|   7 |
|   7 |
|   7 |
|   7 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B3_C2_D2
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN s_int=1 THEN 8
            ELSE 9
        END) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((CASE
            WHEN s_int=1 THEN 8
            ELSE 9
        END)<99999
       OR (CASE
               WHEN s_int=1 THEN 8
               ELSE 9
           END) IS NULL);
+-----+
| col |
+-----+
|   8 |
|   8 |
|   8 |
|   9 |
|   9 |
|   9 |
|   9 |
|   9 |
|   9 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B4_C1_D2
#-------------------------------------------------------------------------
SELECT nullif(c, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (nullif(c, c)<99999
       OR nullif(c, c) IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B4_C2_D2
#-------------------------------------------------------------------------
SELECT nullif(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (nullif(c, s_int)<99999
       OR nullif(c, s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B4_C3_D2
#-------------------------------------------------------------------------
SELECT nullif(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (nullif(s_int, c)<99999
       OR nullif(s_int, c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B4_C4_D2
#-------------------------------------------------------------------------
SELECT nullif(s_int, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (nullif(s_int, s_int)<99999
       OR nullif(s_int, s_int) IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B5_C1_D2
#-------------------------------------------------------------------------
SELECT coalesce(c, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (coalesce(c, c)<99999
       OR coalesce(c, c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B5_C2_D2
#-------------------------------------------------------------------------
SELECT coalesce(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (coalesce(c, s_int)<99999
       OR coalesce(c, s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|   2 |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B5_C3_D2
#-------------------------------------------------------------------------
SELECT coalesce(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (coalesce(s_int, c)<99999
       OR coalesce(s_int, c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|   2 |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B5_C4_D2
#-------------------------------------------------------------------------
SELECT coalesce(s_int, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (coalesce(s_int, s_int)<99999
       OR coalesce(s_int, s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B6_C1_D2
#-------------------------------------------------------------------------
SELECT nvl(c, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (nvl(c, c)<99999
       OR nvl(c, c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B6_C2_D2
#-------------------------------------------------------------------------
SELECT nvl(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (nvl(c, s_int)<99999
       OR nvl(c, s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|   2 |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B6_C3_D2
#-------------------------------------------------------------------------
SELECT nvl(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (nvl(s_int, c)<99999
       OR nvl(s_int, c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|   2 |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B6_C4_D2
#-------------------------------------------------------------------------
SELECT nvl(s_int, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (nvl(s_int, s_int)<99999
       OR nvl(s_int, s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

