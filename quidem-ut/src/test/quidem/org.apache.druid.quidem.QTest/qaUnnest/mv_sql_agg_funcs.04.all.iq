!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=AllDruidEnginesComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/mv
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C5
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C6
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C7
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING latest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C8
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING latest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C9
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING latest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C10
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING latest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C1
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C2
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C3
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C4
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C5
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C6
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C7
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING any_value(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C8
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING any_value(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C9
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING any_value(c_long) IS NOT NULL);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C10
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING any_value(c_long) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C1
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C2
#-------------------------------------------------------------------------
SELECT c_long col,
       count(*) cnt,
       grouping(c_long) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C3
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|     |   3 |  0 |
| 1   |   3 |  0 |
| 2   |   3 |  0 |
| 3   |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C4
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C5
#-------------------------------------------------------------------------
SELECT c_long col,
       count(*) cnt,
       grouping(c_long) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C6
#-------------------------------------------------------------------------
SELECT c_long col,
       count(*) cnt,
       grouping(c_long) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   0 |   5 |  0 |
|   1 |   5 |  0 |
|   2 |   5 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C7
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING grouping(c) IS NOT NULL;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|     |   3 |  0 |
| 1   |   3 |  0 |
| 2   |   3 |  0 |
| 3   |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C8
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING grouping(c) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C9
#-------------------------------------------------------------------------
SELECT c_long col,
       count(*) cnt,
       grouping(c_long) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING grouping(c_long) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C10
#-------------------------------------------------------------------------
SELECT c_long col,
       count(*) cnt,
       grouping(c_long) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING grouping(c_long) IS NOT NULL;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   0 |   5 |  0 |
|   1 |   5 |  0 |
|   2 |   5 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C1
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----------------------------------------------------+
| col                                                 |
+-----------------------------------------------------+
| [null, , 1, 2, 3, null, , 1, 2, 3, null, , 1, 2, 3] |
+-----------------------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C2
#-------------------------------------------------------------------------
SELECT array_agg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----------------------------------------------+
| col                                           |
+-----------------------------------------------+
| [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2] |
+-----------------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C3
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+--------------------+
| col                |
+--------------------+
| [, , ]             |
| [1, 1, 1]          |
| [2, 2, 2]          |
| [3, 3, 3]          |
| [null, null, null] |
+--------------------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C4
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-------------------+
| col               |
+-------------------+
| [null, , 1, 2, 3] |
| [null, , 1, 2, 3] |
| [null, , 1, 2, 3] |
+-------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C5
#-------------------------------------------------------------------------
SELECT array_agg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C6
#-------------------------------------------------------------------------
SELECT array_agg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----------------+
| col             |
+-----------------+
| [0, 0, 0, 0, 0] |
| [1, 1, 1, 1, 1] |
| [2, 2, 2, 2, 2] |
+-----------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C7
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING array_agg(c) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [, , ]             |
| [1, 1, 1]          |
| [2, 2, 2]          |
| [3, 3, 3]          |
| [null, null, null] |
+--------------------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C8
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING array_agg(c) IS NOT NULL;
+-------------------+
| col               |
+-------------------+
| [null, , 1, 2, 3] |
| [null, , 1, 2, 3] |
| [null, , 1, 2, 3] |
+-------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C9
#-------------------------------------------------------------------------
SELECT array_agg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING array_agg(c_long) IS NOT NULL;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C10
#-------------------------------------------------------------------------
SELECT array_agg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING array_agg(c_long) IS NOT NULL;
+-----------------+
| col             |
+-----------------+
| [0, 0, 0, 0, 0] |
| [1, 1, 1, 1, 1] |
| [2, 2, 2, 2, 2] |
+-----------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C1
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-------------------+
| col               |
+-------------------+
| [null, , 1, 2, 3] |
+-------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C2
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
+-----------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C3
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [3]    |
| []     |
| [null] |
+--------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C4
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-------------------+
| col               |
+-------------------+
| [null, , 1, 2, 3] |
| [null, , 1, 2, 3] |
| [null, , 1, 2, 3] |
+-------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C5
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C6
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+
| col |
+-----+
| [0] |
| [1] |
| [2] |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C7
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING array_agg(DISTINCT c) IS NOT NULL;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [3]    |
| []     |
| [null] |
+--------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C8
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING array_agg(DISTINCT c) IS NOT NULL;
+-------------------+
| col               |
+-------------------+
| [null, , 1, 2, 3] |
| [null, , 1, 2, 3] |
| [null, , 1, 2, 3] |
+-------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C9
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING array_agg(DISTINCT c_long) IS NOT NULL;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C10
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING array_agg(DISTINCT c_long) IS NOT NULL;
+-----+
| col |
+-----+
| [0] |
| [1] |
| [2] |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C1
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C2
#-------------------------------------------------------------------------
SELECT array_concat_agg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C3
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C4
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
QueryInterruptedException
!error

