!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/array&numMergeBuffers=3
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B2
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY s_int,
         c;
+-------+----+-----+
| s_int | c  | cnt |
+-------+----+-----+
|     1 | S1 |   1 |
|     1 | S2 |   1 |
|     1 |    |   1 |
|     2 | S1 |   1 |
|     2 | S2 |   1 |
|     2 |    |   1 |
|       | S1 |   1 |
|       | S2 |   1 |
|       |    |   1 |
+-------+----+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B3
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B4
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (c);
+----+-----+
| c  | cnt |
+----+-----+
| S1 |   3 |
| S2 |   3 |
|    |   3 |
+----+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B5
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
+-------+----+-----+
| s_int | c  | cnt |
+-------+----+-----+
|     1 |    |   3 |
|     2 |    |   3 |
|       | S1 |   3 |
|       | S2 |   3 |
|       |    |   3 |
|       |    |   3 |
+-------+----+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B6
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B7
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(c);
+----+-----+
| c  | cnt |
+----+-----+
| S1 |   3 |
| S2 |   3 |
|    |   3 |
|    |   9 |
+----+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B8
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(s_int, c);
+-------+----+-----+
| s_int | c  | cnt |
+-------+----+-----+
|     1 | S1 |   1 |
|     1 | S2 |   1 |
|     1 |    |   1 |
|     1 |    |   3 |
|     2 | S1 |   1 |
|     2 | S2 |   1 |
|     2 |    |   1 |
|     2 |    |   3 |
|       | S1 |   1 |
|       | S2 |   1 |
|       |    |   1 |
|       |    |   3 |
|       |    |   9 |
+-------+----+-----+
(13 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B9
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B10
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY cube(c);
+----+-----+
| c  | cnt |
+----+-----+
| S1 |   3 |
| S2 |   3 |
|    |   3 |
|    |   9 |
+----+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B11
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY cube(s_int, c);
+-------+----+-----+
| s_int | c  | cnt |
+-------+----+-----+
|     1 | S1 |   1 |
|     1 | S2 |   1 |
|     1 |    |   1 |
|     1 |    |   3 |
|     2 | S1 |   1 |
|     2 | S2 |   1 |
|     2 |    |   1 |
|     2 |    |   3 |
|       | S1 |   1 |
|       | S1 |   3 |
|       | S2 |   1 |
|       | S2 |   3 |
|       |    |   1 |
|       |    |   3 |
|       |    |   3 |
|       |    |   9 |
+-------+----+-----+
(16 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B12
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY cube(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B13
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY c
HAVING c = 'S1';
+----+-----+
| c  | cnt |
+----+-----+
| S1 |   3 |
+----+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B14
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B1
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY c;
+------+-----+
| c    | cnt |
+------+-----+
| 0.1  |   3 |
| 1    |   3 |
| S1   |   3 |
| true |   3 |
|      |   3 |
+------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B2
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY s_int,
         c;
+-------+------+-----+
| s_int | c    | cnt |
+-------+------+-----+
|     1 | 0.1  |   1 |
|     1 | 1    |   1 |
|     1 | S1   |   1 |
|     1 | true |   1 |
|     1 |      |   1 |
|     2 | 0.1  |   1 |
|     2 | 1    |   1 |
|     2 | S1   |   1 |
|     2 | true |   1 |
|     2 |      |   1 |
|       | 0.1  |   1 |
|       | 1    |   1 |
|       | S1   |   1 |
|       | true |   1 |
|       |      |   1 |
+-------+------+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B3
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
|     2 |   5 |
|       |   5 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B4
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY GROUPING
SETS (c);
+------+-----+
| c    | cnt |
+------+-----+
| 0.1  |   3 |
| 1    |   3 |
| S1   |   3 |
| true |   3 |
|      |   3 |
+------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B5
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
+-------+------+-----+
| s_int | c    | cnt |
+-------+------+-----+
|     1 |      |   5 |
|     2 |      |   5 |
|       | 0.1  |   3 |
|       | 1    |   3 |
|       | S1   |   3 |
|       | true |   3 |
|       |      |   3 |
|       |      |   5 |
+-------+------+-----+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B6
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
|     2 |   5 |
|       |   5 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B7
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY rollup(c);
+------+-----+
| c    | cnt |
+------+-----+
| 0.1  |   3 |
| 1    |   3 |
| S1   |   3 |
| true |   3 |
|      |  15 |
|      |   3 |
+------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B8
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY rollup(s_int, c);
+-------+------+-----+
| s_int | c    | cnt |
+-------+------+-----+
|     1 | 0.1  |   1 |
|     1 | 1    |   1 |
|     1 | S1   |   1 |
|     1 | true |   1 |
|     1 |      |   1 |
|     1 |      |   5 |
|     2 | 0.1  |   1 |
|     2 | 1    |   1 |
|     2 | S1   |   1 |
|     2 | true |   1 |
|     2 |      |   1 |
|     2 |      |   5 |
|       | 0.1  |   1 |
|       | 1    |   1 |
|       | S1   |   1 |
|       | true |   1 |
|       |      |   1 |
|       |      |  15 |
|       |      |   5 |
+-------+------+-----+
(19 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B9
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY rollup(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
|     2 |   5 |
|       |  15 |
|       |   5 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B10
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY cube(c);
+------+-----+
| c    | cnt |
+------+-----+
| 0.1  |   3 |
| 1    |   3 |
| S1   |   3 |
| true |   3 |
|      |  15 |
|      |   3 |
+------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B11
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY cube(s_int, c);
+-------+------+-----+
| s_int | c    | cnt |
+-------+------+-----+
|     1 | 0.1  |   1 |
|     1 | 1    |   1 |
|     1 | S1   |   1 |
|     1 | true |   1 |
|     1 |      |   1 |
|     1 |      |   5 |
|     2 | 0.1  |   1 |
|     2 | 1    |   1 |
|     2 | S1   |   1 |
|     2 | true |   1 |
|     2 |      |   1 |
|     2 |      |   5 |
|       | 0.1  |   1 |
|       | 0.1  |   3 |
|       | 1    |   1 |
|       | 1    |   3 |
|       | S1   |   1 |
|       | S1   |   3 |
|       | true |   1 |
|       | true |   3 |
|       |      |   1 |
|       |      |  15 |
|       |      |   3 |
|       |      |   5 |
+-------+------+-----+
(24 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B12
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY cube(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
|     2 |   5 |
|       |  15 |
|       |   5 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B13
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY c
HAVING c = 'S1';
+----+-----+
| c  | cnt |
+----+-----+
| S1 |   3 |
+----+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B14
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B1
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY c;
+------+-----+
| c    | cnt |
+------+-----+
| 0.1  |   3 |
| 1    |   3 |
| S1   |   3 |
| true |   3 |
|      |   3 |
+------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B2
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY s_int,
         c;
+-------+------+-----+
| s_int | c    | cnt |
+-------+------+-----+
|     1 | 0.1  |   1 |
|     1 | 1    |   1 |
|     1 | S1   |   1 |
|     1 | true |   1 |
|     1 |      |   1 |
|     2 | 0.1  |   1 |
|     2 | 1    |   1 |
|     2 | S1   |   1 |
|     2 | true |   1 |
|     2 |      |   1 |
|       | 0.1  |   1 |
|       | 1    |   1 |
|       | S1   |   1 |
|       | true |   1 |
|       |      |   1 |
+-------+------+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B3
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
|     2 |   5 |
|       |   5 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B4
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (c);
+------+-----+
| c    | cnt |
+------+-----+
| 0.1  |   3 |
| 1    |   3 |
| S1   |   3 |
| true |   3 |
|      |   3 |
+------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B5
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
+-------+------+-----+
| s_int | c    | cnt |
+-------+------+-----+
|     1 |      |   5 |
|     2 |      |   5 |
|       | 0.1  |   3 |
|       | 1    |   3 |
|       | S1   |   3 |
|       | true |   3 |
|       |      |   3 |
|       |      |   5 |
+-------+------+-----+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B6
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
|     2 |   5 |
|       |   5 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B7
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(c);
+------+-----+
| c    | cnt |
+------+-----+
| 0.1  |   3 |
| 1    |   3 |
| S1   |   3 |
| true |   3 |
|      |  15 |
|      |   3 |
+------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B8
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(s_int, c);
+-------+------+-----+
| s_int | c    | cnt |
+-------+------+-----+
|     1 | 0.1  |   1 |
|     1 | 1    |   1 |
|     1 | S1   |   1 |
|     1 | true |   1 |
|     1 |      |   1 |
|     1 |      |   5 |
|     2 | 0.1  |   1 |
|     2 | 1    |   1 |
|     2 | S1   |   1 |
|     2 | true |   1 |
|     2 |      |   1 |
|     2 |      |   5 |
|       | 0.1  |   1 |
|       | 1    |   1 |
|       | S1   |   1 |
|       | true |   1 |
|       |      |   1 |
|       |      |  15 |
|       |      |   5 |
+-------+------+-----+
(19 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B9
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
|     2 |   5 |
|       |  15 |
|       |   5 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B10
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY cube(c);
+------+-----+
| c    | cnt |
+------+-----+
| 0.1  |   3 |
| 1    |   3 |
| S1   |   3 |
| true |   3 |
|      |  15 |
|      |   3 |
+------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B11
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY cube(s_int, c);
+-------+------+-----+
| s_int | c    | cnt |
+-------+------+-----+
|     1 | 0.1  |   1 |
|     1 | 1    |   1 |
|     1 | S1   |   1 |
|     1 | true |   1 |
|     1 |      |   1 |
|     1 |      |   5 |
|     2 | 0.1  |   1 |
|     2 | 1    |   1 |
|     2 | S1   |   1 |
|     2 | true |   1 |
|     2 |      |   1 |
|     2 |      |   5 |
|       | 0.1  |   1 |
|       | 0.1  |   3 |
|       | 1    |   1 |
|       | 1    |   3 |
|       | S1   |   1 |
|       | S1   |   3 |
|       | true |   1 |
|       | true |   3 |
|       |      |   1 |
|       |      |  15 |
|       |      |   3 |
|       |      |   5 |
+-------+------+-----+
(24 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B12
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY cube(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
|     2 |   5 |
|       |  15 |
|       |   5 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B13
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY c
HAVING c = 'S1';
+----+-----+
| c  | cnt |
+----+-----+
| S1 |   3 |
+----+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B14
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B1
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY c;
+---+-----+
| c | cnt |
+---+-----+
|   |   9 |
+---+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B2
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY s_int,
         c;
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 |   |   3 |
|     2 |   |   3 |
|       |   |   3 |
+-------+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B3
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B4
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (c);
+---+-----+
| c | cnt |
+---+-----+
|   |   9 |
+---+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B5
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 |   |   3 |
|     2 |   |   3 |
|       |   |   3 |
|       |   |   9 |
+-------+---+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B6
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B7
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(c);
+---+-----+
| c | cnt |
+---+-----+
|   |   9 |
|   |   9 |
+---+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B8
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(s_int, c);
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 |   |   3 |
|     1 |   |   3 |
|     2 |   |   3 |
|     2 |   |   3 |
|       |   |   3 |
|       |   |   3 |
|       |   |   9 |
+-------+---+-----+
(7 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B9
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

