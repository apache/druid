!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=AllDruidEnginesComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/array
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B23_C2_D2
#-------------------------------------------------------------------------
SELECT btrim(cast(s_int AS char), '1') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (btrim(cast(s_int AS char), '1')<'99999'
       OR btrim(cast(s_int AS char), '1') IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B24_C1_D2
#-------------------------------------------------------------------------
SELECT ltrim(cast(c AS char), '1') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (ltrim(cast(c AS char), '1')<'99999'
       OR ltrim(cast(c AS char), '1') IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B24_C2_D2
#-------------------------------------------------------------------------
SELECT ltrim(cast(s_int AS char), '1') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (ltrim(cast(s_int AS char), '1')<'99999'
       OR ltrim(cast(s_int AS char), '1') IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B25_C1_D2
#-------------------------------------------------------------------------
SELECT rtrim(cast(c AS char), '1') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (rtrim(cast(c AS char), '1')<'99999'
       OR rtrim(cast(c AS char), '1') IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B25_C2_D2
#-------------------------------------------------------------------------
SELECT rtrim(cast(s_int AS char), '1') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (rtrim(cast(s_int AS char), '1')<'99999'
       OR rtrim(cast(s_int AS char), '1') IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B26_C1_D2
#-------------------------------------------------------------------------
SELECT reverse(cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (reverse(cast(c AS char))<'99999'
       OR reverse(cast(c AS char)) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B26_C2_D2
#-------------------------------------------------------------------------
SELECT reverse(cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (reverse(cast(s_int AS char))<'99999'
       OR reverse(cast(s_int AS char)) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B27_C1_D2
#-------------------------------------------------------------------------
SELECT repeat(cast(c AS char), 2) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (repeat(cast(c AS char), 2)<'99999'
       OR repeat(cast(c AS char), 2) IS NULL);
+-----+
| col |
+-----+
| 11  |
| 11  |
| 11  |
| 22  |
| 22  |
| 22  |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B27_C2_D2
#-------------------------------------------------------------------------
SELECT repeat(cast(s_int AS char), 2) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (repeat(cast(s_int AS char), 2)<'99999'
       OR repeat(cast(s_int AS char), 2) IS NULL);
+-----+
| col |
+-----+
| 11  |
| 11  |
| 11  |
| 22  |
| 22  |
| 22  |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B28_C1_D2
#-------------------------------------------------------------------------
SELECT lpad(cast(c AS char), 3, 'Z') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (lpad(cast(c AS char), 3, 'Z')<'0'
       OR lpad(cast(c AS char), 3, 'Z')>'0'
       OR lpad(cast(c AS char), 3, 'Z') IS NULL);
+-----+
| col |
+-----+
| ZZ1 |
| ZZ1 |
| ZZ1 |
| ZZ2 |
| ZZ2 |
| ZZ2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B28_C2_D2
#-------------------------------------------------------------------------
SELECT lpad(cast(s_int AS char), 3, 'Z') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (lpad(cast(s_int AS char), 3, 'Z')<'0'
       OR lpad(cast(s_int AS char), 3, 'Z')>'0'
       OR lpad(cast(s_int AS char), 3, 'Z') IS NULL);
+-----+
| col |
+-----+
| ZZ1 |
| ZZ1 |
| ZZ1 |
| ZZ2 |
| ZZ2 |
| ZZ2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B29_C1_D2
#-------------------------------------------------------------------------
SELECT rpad(cast(c AS char), 3, 'Z') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (rpad(cast(c AS char), 3, 'Z')<'0'
       OR rpad(cast(c AS char), 3, 'Z')>'0'
       OR rpad(cast(c AS char), 3, 'Z') IS NULL);
+-----+
| col |
+-----+
| 1ZZ |
| 1ZZ |
| 1ZZ |
| 2ZZ |
| 2ZZ |
| 2ZZ |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B29_C2_D2
#-------------------------------------------------------------------------
SELECT rpad(cast(s_int AS char), 3, 'Z') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (rpad(cast(s_int AS char), 3, 'Z')<'0'
       OR rpad(cast(s_int AS char), 3, 'Z')>'0'
       OR rpad(cast(s_int AS char), 3, 'Z') IS NULL);
+-----+
| col |
+-----+
| 1ZZ |
| 1ZZ |
| 1ZZ |
| 2ZZ |
| 2ZZ |
| 2ZZ |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

