!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardMSQComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/array&numMergeBuffers=3
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: SEL_DATASOURCE
#-------------------------------------------------------------------------
SELECT *
FROM test_unnest;
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| __time                  | s_int | s_null | a_bool       | a_int        | a_float          | a_str          | a_null             | a_empty | a_mixed                  | a_nested                                                                                                                                                                                                                                                                                                                      |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 2022-01-01 00:00:00.000 |     1 |        | [1, 0, null] | [1, 2, null] | [0.1, 0.2, null] | [S1, S2, null] | [null, null, null] | []      | [true, 1, 0.1, S1, null] | [[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null]]]] |
| 2022-02-01 00:00:00.000 |     2 |        | [null, 1, 0] | [null, 1, 2] | [null, 0.1, 0.2] | [null, S1, S2] | [null, null, null] | []      | [null, true, 1, 0.1, S1] | [[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"]]]] |
| 2022-03-01 00:00:00.000 |       |        | [0, null, 1] | [2, null, 1] | [0.2, null, 0.1] | [S2, null, S1] | [null, null, null] | []      | [S1, null, true, 1, 0.1] | [[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1]]]] |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B1
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY c;
+---+-----+
| c | cnt |
+---+-----+
| 0 |   3 |
| 1 |   3 |
|   |   3 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B2
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY s_int,
         c;
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 | 0 |   1 |
|     1 | 1 |   1 |
|     1 |   |   1 |
|     2 | 0 |   1 |
|     2 | 1 |   1 |
|     2 |   |   1 |
|       | 0 |   1 |
|       | 1 |   1 |
|       |   |   1 |
+-------+---+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B3
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B4
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY GROUPING
SETS (c);
+---+-----+
| c | cnt |
+---+-----+
| 0 |   3 |
| 1 |   3 |
|   |   3 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B5
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B6
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B7
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY rollup(c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B8
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY rollup(s_int, c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B9
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY rollup(s_int);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B10
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY cube(c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B11
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY cube(s_int, c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B12
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY cube(s_int);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B13
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY c
HAVING c = 0;
+---+-----+
| c | cnt |
+---+-----+
| 0 |   3 |
+---+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B14
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B1
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY c;
+-------+-----+
| c     | cnt |
+-------+-----+
| false |   3 |
|  true |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B2
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY s_int,
         c;
+-------+-------+-----+
| s_int | c     | cnt |
+-------+-------+-----+
|     1 | false |   1 |
|     1 |  true |   1 |
|     1 |       |   1 |
|     2 | false |   1 |
|     2 |  true |   1 |
|     2 |       |   1 |
|       | false |   1 |
|       |  true |   1 |
|       |       |   1 |
+-------+-------+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B3
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B4
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY GROUPING
SETS (c);
+-------+-----+
| c     | cnt |
+-------+-----+
| false |   3 |
|  true |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B5
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B6
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B7
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY rollup(c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B8
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY rollup(s_int, c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B9
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY rollup(s_int);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B10
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY cube(c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B11
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY cube(s_int, c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B12
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY cube(s_int);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B13
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY c
HAVING c IS FALSE;
+-------+-----+
| c     | cnt |
+-------+-----+
| false |   3 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B14
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B1
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY c;
+---+-----+
| c | cnt |
+---+-----+
| 1 |   3 |
| 2 |   3 |
|   |   3 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B2
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY s_int,
         c;
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 | 1 |   1 |
|     1 | 2 |   1 |
|     1 |   |   1 |
|     2 | 1 |   1 |
|     2 | 2 |   1 |
|     2 |   |   1 |
|       | 1 |   1 |
|       | 2 |   1 |
|       |   |   1 |
+-------+---+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B3
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B4
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY GROUPING
SETS (c);
+---+-----+
| c | cnt |
+---+-----+
| 1 |   3 |
| 2 |   3 |
|   |   3 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B5
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B6
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B7
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY rollup(c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B8
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY rollup(s_int, c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B9
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY rollup(s_int);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B10
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY cube(c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B11
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY cube(s_int, c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B12
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY cube(s_int);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B13
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY c
HAVING c = 1;
+---+-----+
| c | cnt |
+---+-----+
| 1 |   3 |
+---+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B14
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B1
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY c;
+---+-----+
| c | cnt |
+---+-----+
| 1 |   3 |
| 2 |   3 |
|   |   3 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B2
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY s_int,
         c;
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 | 1 |   1 |
|     1 | 2 |   1 |
|     1 |   |   1 |
|     2 | 1 |   1 |
|     2 | 2 |   1 |
|     2 |   |   1 |
|       | 1 |   1 |
|       | 2 |   1 |
|       |   |   1 |
+-------+---+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B3
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B4
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY GROUPING
SETS (c);
+---+-----+
| c | cnt |
+---+-----+
| 1 |   3 |
| 2 |   3 |
|   |   3 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B5
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B6
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B7
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY rollup(c);
QueryNotSupported
!error

