!set dartQueryId 00000000-0000-0000-0000-000000000000
!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardAndMSQComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/mv
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: SEL_DATASOURCE
#-------------------------------------------------------------------------
SELECT *
FROM test_unnest;
+-------------------------+-------+--------+---------+----------+------------------------------------------------+------------------------+--------------------------------------+----------------------------------+--------------------------------------+----------------------------------+-----------------------------+
| __time                  | c_str | c_long | c_float | c_double | c_mv_complex                                   | c_mv_num               | c_mv_complex_with_null_and_empty_val | c_mv_num_with_null_and_empty_val | c_mv_complex_with_null_and_empty_row | c_mv_num_with_null_and_empty_row | c_mv_all_null_and_empty_val |
+-------------------------+-------+--------+---------+----------+------------------------------------------------+------------------------+--------------------------------------+----------------------------------+--------------------------------------+----------------------------------+-----------------------------+
| 2022-01-01 00:00:00.000 |       |      1 |     0.1 |      0.1 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            |                                      |                                  | [null,"",null,"",null]      |
| 2022-01-01 00:00:00.000 | str2  |      2 |     0.2 |      0.2 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      |
| 2022-01-01 00:00:00.000 | str3  |      3 |     0.3 |      0.3 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      |
| 2022-01-01 00:00:00.000 | str4  |      4 |     0.4 |      0.4 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      |
| 2022-01-01 00:00:00.000 |       |      0 |     0.0 |      0.0 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            |                                      |                                  | [null,"",null,"",null]      |
+-------------------------+-------+--------+---------+----------+------------------------------------------------+------------------------+--------------------------------------+----------------------------------+--------------------------------------+----------------------------------+-----------------------------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C1
#-------------------------------------------------------------------------
SELECT json_keys(c, '$.') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND json_keys(c, '$.') IS NULL;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C2
#-------------------------------------------------------------------------
SELECT json_keys(c_long, '$.') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND json_keys(c_long, '$.') IS NULL;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C1
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND json_object(KEY 'k' value c) IS NOT NULL;
+------------+
| col        |
+------------+
| {"k":""}   |
| {"k":""}   |
| {"k":""}   |
| {"k":"1"}  |
| {"k":"1"}  |
| {"k":"1"}  |
| {"k":"2"}  |
| {"k":"2"}  |
| {"k":"2"}  |
| {"k":"3"}  |
| {"k":"3"}  |
| {"k":"3"}  |
| {"k":null} |
| {"k":null} |
| {"k":null} |
+------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C2
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND json_object(KEY 'k' value c_long) IS NOT NULL;
+---------+
| col     |
+---------+
| {"k":0} |
| {"k":0} |
| {"k":0} |
| {"k":0} |
| {"k":0} |
| {"k":1} |
| {"k":1} |
| {"k":1} |
| {"k":1} |
| {"k":1} |
| {"k":2} |
| {"k":2} |
| {"k":2} |
| {"k":2} |
| {"k":2} |
+---------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C1
#-------------------------------------------------------------------------
SELECT json_paths(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND json_paths(c) IS NOT NULL;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C2
#-------------------------------------------------------------------------
SELECT json_paths(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND json_paths(c_long) IS NOT NULL;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C1
#-------------------------------------------------------------------------
SELECT json_query(c, '$.') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (json_query(c, '$.') IS NULL
       OR json_query(c, '$.') IS NOT NULL);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C2
#-------------------------------------------------------------------------
SELECT json_query(c_long, '$.') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (json_query(c_long, '$.') IS NULL
       OR json_query(c_long, '$.') IS NOT NULL);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C1
#-------------------------------------------------------------------------
SELECT json_value(c, '$.') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C2
#-------------------------------------------------------------------------
SELECT json_value(c_long, '$.') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (json_value(c_long, '$.') IS NULL
       OR json_value(c_long, '$.') IS NOT NULL);
+-----+
| col |
+-----+
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C1
#-------------------------------------------------------------------------
SELECT parse_json(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (parse_json(c) IS NULL
       OR parse_json(c) IS NOT NULL);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C2
#-------------------------------------------------------------------------
SELECT parse_json(cast(c_long AS char)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (parse_json(cast(c_long AS char)) IS NULL
       OR parse_json(cast(c_long AS char)) IS NOT NULL);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C1
#-------------------------------------------------------------------------
SELECT try_parse_json(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (try_parse_json(c) IS NULL
       OR try_parse_json(c) IS NOT NULL);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C2
#-------------------------------------------------------------------------
SELECT try_parse_json(cast(c_long AS char)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (try_parse_json(cast(c_long AS char)) IS NULL
       OR try_parse_json(cast(c_long AS char)) IS NOT NULL);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C1
#-------------------------------------------------------------------------
SELECT to_json_string(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (to_json_string(c) IS NULL
       OR to_json_string(c) IS NOT NULL);
+-----+
| col |
+-----+
| ""  |
| ""  |
| ""  |
| "1" |
| "1" |
| "1" |
| "2" |
| "2" |
| "2" |
| "3" |
| "3" |
| "3" |
|     |
|     |
|     |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C2
#-------------------------------------------------------------------------
SELECT to_json_string(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (to_json_string(c_long) IS NULL
       OR to_json_string(c_long) IS NOT NULL);
+-----+
| col |
+-----+
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

