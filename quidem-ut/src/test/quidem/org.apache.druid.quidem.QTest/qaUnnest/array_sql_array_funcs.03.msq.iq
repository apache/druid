!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardMSQComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/array
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C13_D2
#-------------------------------------------------------------------------
SELECT array_overlap(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[c, s_int, 3],array[c, s_int, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C14_D1
#-------------------------------------------------------------------------
SELECT array_overlap(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C14_D2
#-------------------------------------------------------------------------
SELECT array_overlap(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C1_D1
#-------------------------------------------------------------------------
SELECT array_offset_of(c, s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(c, s_int)<99999
       OR array_offset_of(c, s_int) IS NULL);
Cannot apply 'ARRAY_OFFSET_OF' to arguments of type 'ARRAY_OFFSET_OF(<BIGINT>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C1_D2
#-------------------------------------------------------------------------
SELECT array_offset_of(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(c, s_int)<99999
       OR array_offset_of(c, s_int) IS NULL);
Cannot apply 'ARRAY_OFFSET_OF' to arguments of type 'ARRAY_OFFSET_OF(<BIGINT>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C2_D1
#-------------------------------------------------------------------------
SELECT array_offset_of(s_int, c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(s_int, c)<99999
       OR array_offset_of(s_int, c) IS NULL);
Cannot apply 'ARRAY_OFFSET_OF' to arguments of type 'ARRAY_OFFSET_OF(<BIGINT>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C2_D2
#-------------------------------------------------------------------------
SELECT array_offset_of(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(s_int, c)<99999
       OR array_offset_of(s_int, c) IS NULL);
Cannot apply 'ARRAY_OFFSET_OF' to arguments of type 'ARRAY_OFFSET_OF(<BIGINT>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C3_D1
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, c, 3],c)<99999
       OR array_offset_of(array[c, c, 3],c) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C3_D2
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, c, 3],c)<99999
       OR array_offset_of(array[c, c, 3],c) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C4_D1
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, c, 3],s_int)<99999
       OR array_offset_of(array[s_int, c, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C4_D2
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, c, 3],s_int)<99999
       OR array_offset_of(array[s_int, c, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C5_D1
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, s_int, 3],c)<99999
       OR array_offset_of(array[c, s_int, 3],c) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C5_D2
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, s_int, 3],c)<99999
       OR array_offset_of(array[c, s_int, 3],c) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C6_D1
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, s_int, 3],s_int)<99999
       OR array_offset_of(array[s_int, s_int, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C6_D2
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, s_int, 3],s_int)<99999
       OR array_offset_of(array[s_int, s_int, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C7_D1
#-------------------------------------------------------------------------
SELECT array_offset_of(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(c,array[c, c, 3])<99999
       OR array_offset_of(c,array[c, c, 3]) IS NULL);
Cannot apply 'ARRAY_OFFSET_OF' to arguments of type 'ARRAY_OFFSET_OF(<BIGINT>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C7_D2
#-------------------------------------------------------------------------
SELECT array_offset_of(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(c,array[c, c, 3])<99999
       OR array_offset_of(c,array[c, c, 3]) IS NULL);
Cannot apply 'ARRAY_OFFSET_OF' to arguments of type 'ARRAY_OFFSET_OF(<BIGINT>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C8_D1
#-------------------------------------------------------------------------
SELECT array_offset_of(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(s_int,array[s_int, c, 3])<99999
       OR array_offset_of(s_int,array[s_int, c, 3]) IS NULL);
Cannot apply 'ARRAY_OFFSET_OF' to arguments of type 'ARRAY_OFFSET_OF(<BIGINT>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C8_D2
#-------------------------------------------------------------------------
SELECT array_offset_of(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(s_int,array[s_int, c, 3])<99999
       OR array_offset_of(s_int,array[s_int, c, 3]) IS NULL);
Cannot apply 'ARRAY_OFFSET_OF' to arguments of type 'ARRAY_OFFSET_OF(<BIGINT>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C9_D1
#-------------------------------------------------------------------------
SELECT array_offset_of(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(c,array[c, s_int, 3])<99999
       OR array_offset_of(c,array[c, s_int, 3]) IS NULL);
Cannot apply 'ARRAY_OFFSET_OF' to arguments of type 'ARRAY_OFFSET_OF(<BIGINT>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C9_D2
#-------------------------------------------------------------------------
SELECT array_offset_of(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(c,array[c, s_int, 3])<99999
       OR array_offset_of(c,array[c, s_int, 3]) IS NULL);
Cannot apply 'ARRAY_OFFSET_OF' to arguments of type 'ARRAY_OFFSET_OF(<BIGINT>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C10_D1
#-------------------------------------------------------------------------
SELECT array_offset_of(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(s_int,array[s_int, s_int, 3])<99999
       OR array_offset_of(s_int,array[s_int, s_int, 3]) IS NULL);
Cannot apply 'ARRAY_OFFSET_OF' to arguments of type 'ARRAY_OFFSET_OF(<BIGINT>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C10_D2
#-------------------------------------------------------------------------
SELECT array_offset_of(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(s_int,array[s_int, s_int, 3])<99999
       OR array_offset_of(s_int,array[s_int, s_int, 3]) IS NULL);
Cannot apply 'ARRAY_OFFSET_OF' to arguments of type 'ARRAY_OFFSET_OF(<BIGINT>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C11_D1
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, c, 3],array[c, c, 3])<99999
       OR array_offset_of(array[c, c, 3],array[c, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C11_D2
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, c, 3],array[c, c, 3])<99999
       OR array_offset_of(array[c, c, 3],array[c, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C12_D1
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, c, 3],array[s_int, c, 3])<99999
       OR array_offset_of(array[s_int, c, 3],array[s_int, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C12_D2
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, c, 3],array[s_int, c, 3])<99999
       OR array_offset_of(array[s_int, c, 3],array[s_int, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C13_D1
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, s_int, 3],array[c, s_int, 3])<99999
       OR array_offset_of(array[c, s_int, 3],array[c, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C13_D2
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, s_int, 3],array[c, s_int, 3])<99999
       OR array_offset_of(array[c, s_int, 3],array[c, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C14_D1
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, s_int, 3],array[s_int, s_int, 3])<99999
       OR array_offset_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C14_D2
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, s_int, 3],array[s_int, s_int, 3])<99999
       OR array_offset_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C1_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c, s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(c, s_int)<99999
       OR array_ordinal_of(c, s_int) IS NULL);
Cannot apply 'ARRAY_ORDINAL_OF' to arguments of type 'ARRAY_ORDINAL_OF(<BIGINT>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C1_D2
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(c, s_int)<99999
       OR array_ordinal_of(c, s_int) IS NULL);
Cannot apply 'ARRAY_ORDINAL_OF' to arguments of type 'ARRAY_ORDINAL_OF(<BIGINT>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C2_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(s_int, c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(s_int, c)<99999
       OR array_ordinal_of(s_int, c) IS NULL);
Cannot apply 'ARRAY_ORDINAL_OF' to arguments of type 'ARRAY_ORDINAL_OF(<BIGINT>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C2_D2
#-------------------------------------------------------------------------
SELECT array_ordinal_of(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(s_int, c)<99999
       OR array_ordinal_of(s_int, c) IS NULL);
Cannot apply 'ARRAY_ORDINAL_OF' to arguments of type 'ARRAY_ORDINAL_OF(<BIGINT>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C3_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, c, 3],c)<99999
       OR array_ordinal_of(array[c, c, 3],c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C3_D2
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, c, 3],c)<99999
       OR array_ordinal_of(array[c, c, 3],c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C4_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, c, 3],s_int)<99999
       OR array_ordinal_of(array[s_int, c, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C4_D2
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, c, 3],s_int)<99999
       OR array_ordinal_of(array[s_int, c, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C5_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, s_int, 3],c)<99999
       OR array_ordinal_of(array[c, s_int, 3],c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C5_D2
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, s_int, 3],c)<99999
       OR array_ordinal_of(array[c, s_int, 3],c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C6_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, s_int, 3],s_int)<99999
       OR array_ordinal_of(array[s_int, s_int, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C6_D2
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, s_int, 3],s_int)<99999
       OR array_ordinal_of(array[s_int, s_int, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C7_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(c,array[c, c, 3])<99999
       OR array_ordinal_of(c,array[c, c, 3]) IS NULL);
Cannot apply 'ARRAY_ORDINAL_OF' to arguments of type 'ARRAY_ORDINAL_OF(<BIGINT>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C7_D2
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(c,array[c, c, 3])<99999
       OR array_ordinal_of(c,array[c, c, 3]) IS NULL);
Cannot apply 'ARRAY_ORDINAL_OF' to arguments of type 'ARRAY_ORDINAL_OF(<BIGINT>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C8_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(s_int,array[s_int, c, 3])<99999
       OR array_ordinal_of(s_int,array[s_int, c, 3]) IS NULL);
Cannot apply 'ARRAY_ORDINAL_OF' to arguments of type 'ARRAY_ORDINAL_OF(<BIGINT>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C8_D2
#-------------------------------------------------------------------------
SELECT array_ordinal_of(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(s_int,array[s_int, c, 3])<99999
       OR array_ordinal_of(s_int,array[s_int, c, 3]) IS NULL);
Cannot apply 'ARRAY_ORDINAL_OF' to arguments of type 'ARRAY_ORDINAL_OF(<BIGINT>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C9_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(c,array[c, s_int, 3])<99999
       OR array_ordinal_of(c,array[c, s_int, 3]) IS NULL);
Cannot apply 'ARRAY_ORDINAL_OF' to arguments of type 'ARRAY_ORDINAL_OF(<BIGINT>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C9_D2
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(c,array[c, s_int, 3])<99999
       OR array_ordinal_of(c,array[c, s_int, 3]) IS NULL);
Cannot apply 'ARRAY_ORDINAL_OF' to arguments of type 'ARRAY_ORDINAL_OF(<BIGINT>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C10_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(s_int,array[s_int, s_int, 3])<99999
       OR array_ordinal_of(s_int,array[s_int, s_int, 3]) IS NULL);
Cannot apply 'ARRAY_ORDINAL_OF' to arguments of type 'ARRAY_ORDINAL_OF(<BIGINT>, <BIGINT ARRAY>)'
!error

