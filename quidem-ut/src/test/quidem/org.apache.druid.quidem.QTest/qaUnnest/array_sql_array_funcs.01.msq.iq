!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardMSQComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/array
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: SEL_DATASOURCE
#-------------------------------------------------------------------------
SELECT *
FROM test_unnest;
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| __time                  | s_int | s_null | a_bool       | a_int        | a_float          | a_str          | a_null             | a_empty | a_mixed                  | a_nested                                                                                                                                                                                                                                                                                                                      |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 2022-01-01 00:00:00.000 |     1 |        | [1, 0, null] | [1, 2, null] | [0.1, 0.2, null] | [S1, S2, null] | [null, null, null] | []      | [true, 1, 0.1, S1, null] | [[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null]]]] |
| 2022-02-01 00:00:00.000 |     2 |        | [null, 1, 0] | [null, 1, 2] | [null, 0.1, 0.2] | [null, S1, S2] | [null, null, null] | []      | [null, true, 1, 0.1, S1] | [[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"]]]] |
| 2022-03-01 00:00:00.000 |       |        | [0, null, 1] | [2, null, 1] | [0.2, null, 0.1] | [S2, null, S1] | [null, null, null] | []      | [S1, null, true, 1, 0.1] | [[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1]]]] |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C1_D1
#-------------------------------------------------------------------------
SELECT array[1,
             2,
             3] AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[1,
             2,
             3]<array[99999]);
+-----------+
| col       |
+-----------+
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C1_D2
#-------------------------------------------------------------------------
SELECT array[1,
             2,
             3] AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[1,
             2,
             3]<array[99999]);
+-----------+
| col       |
+-----------+
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C2_D1
#-------------------------------------------------------------------------
SELECT array[c,
             c,
             3] AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[c,
             c,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 1, 3]       |
| [1, 1, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [null, null, 3] |
| [null, null, 3] |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C2_D2
#-------------------------------------------------------------------------
SELECT array[c,
             c,
             3] AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[c,
             c,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 1, 3]       |
| [1, 1, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [null, null, 3] |
| [null, null, 3] |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C3_D1
#-------------------------------------------------------------------------
SELECT array[c,
             s_int,
             3] AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[c,
             s_int,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 2, 3]       |
| [1, null, 3]    |
| [2, 1, 3]       |
| [2, 2, 3]       |
| [2, null, 3]    |
| [null, 1, 3]    |
| [null, 2, 3]    |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C3_D2
#-------------------------------------------------------------------------
SELECT array[c,
             s_int,
             3] AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[c,
             s_int,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 2, 3]       |
| [1, null, 3]    |
| [2, 1, 3]       |
| [2, 2, 3]       |
| [2, null, 3]    |
| [null, 1, 3]    |
| [null, 2, 3]    |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C4_D1
#-------------------------------------------------------------------------
SELECT array[s_int,
             c,
             3] AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[s_int,
             c,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 2, 3]       |
| [1, null, 3]    |
| [2, 1, 3]       |
| [2, 2, 3]       |
| [2, null, 3]    |
| [null, 1, 3]    |
| [null, 2, 3]    |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C4_D2
#-------------------------------------------------------------------------
SELECT array[s_int,
             c,
             3] AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[s_int,
             c,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 2, 3]       |
| [1, null, 3]    |
| [2, 1, 3]       |
| [2, 2, 3]       |
| [2, null, 3]    |
| [null, 1, 3]    |
| [null, 2, 3]    |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C5_D1
#-------------------------------------------------------------------------
SELECT array[s_int,
             s_int,
             3] AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[s_int,
             s_int,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 1, 3]       |
| [1, 1, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [null, null, 3] |
| [null, null, 3] |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C5_D2
#-------------------------------------------------------------------------
SELECT array[s_int,
             s_int,
             3] AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[s_int,
             s_int,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 1, 3]       |
| [1, 1, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [null, null, 3] |
| [null, null, 3] |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C1_D1
#-------------------------------------------------------------------------
SELECT array_length(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(c)<99999
       OR array_length(c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C1_D2
#-------------------------------------------------------------------------
SELECT array_length(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(c)<99999
       OR array_length(c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C2_D1
#-------------------------------------------------------------------------
SELECT array_length(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(s_int)<99999
       OR array_length(s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C2_D2
#-------------------------------------------------------------------------
SELECT array_length(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(s_int)<99999
       OR array_length(s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C3_D1
#-------------------------------------------------------------------------
SELECT array_length(array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[c, c, 3])<99999
       OR array_length(array[c, c, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C3_D2
#-------------------------------------------------------------------------
SELECT array_length(array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[c, c, 3])<99999
       OR array_length(array[c, c, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C4_D1
#-------------------------------------------------------------------------
SELECT array_length(array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[s_int, c, 3])<99999
       OR array_length(array[s_int, c, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C4_D2
#-------------------------------------------------------------------------
SELECT array_length(array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[s_int, c, 3])<99999
       OR array_length(array[s_int, c, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C5_D1
#-------------------------------------------------------------------------
SELECT array_length(array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[c, s_int, 3])<99999
       OR array_length(array[c, s_int, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C5_D2
#-------------------------------------------------------------------------
SELECT array_length(array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[c, s_int, 3])<99999
       OR array_length(array[c, s_int, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C6_D1
#-------------------------------------------------------------------------
SELECT array_length(array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[s_int, s_int, 3])<99999
       OR array_length(array[s_int, s_int, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C6_D2
#-------------------------------------------------------------------------
SELECT array_length(array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[s_int, s_int, 3])<99999
       OR array_length(array[s_int, s_int, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C1_D1
#-------------------------------------------------------------------------
SELECT array_offset(c, 0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(c, 0)<99999
       OR array_offset(c, 0) IS NULL);
Cannot apply 'ARRAY_OFFSET' to arguments of type 'ARRAY_OFFSET(<BIGINT>, <INTEGER>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C1_D2
#-------------------------------------------------------------------------
SELECT array_offset(c, 0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(c, 0)<99999
       OR array_offset(c, 0) IS NULL);
Cannot apply 'ARRAY_OFFSET' to arguments of type 'ARRAY_OFFSET(<BIGINT>, <INTEGER>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C2_D1
#-------------------------------------------------------------------------
SELECT array_offset(s_int, 0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(s_int, 0)<99999
       OR array_offset(s_int, 0) IS NULL);
Cannot apply 'ARRAY_OFFSET' to arguments of type 'ARRAY_OFFSET(<BIGINT>, <INTEGER>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C2_D2
#-------------------------------------------------------------------------
SELECT array_offset(s_int, 0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(s_int, 0)<99999
       OR array_offset(s_int, 0) IS NULL);
Cannot apply 'ARRAY_OFFSET' to arguments of type 'ARRAY_OFFSET(<BIGINT>, <INTEGER>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C3_D1
#-------------------------------------------------------------------------
SELECT array_offset(array[c, c, 3],0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[c, c, 3],0)<99999
       OR array_offset(array[c, c, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C3_D2
#-------------------------------------------------------------------------
SELECT array_offset(array[c, c, 3],0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[c, c, 3],0)<99999
       OR array_offset(array[c, c, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C4_D1
#-------------------------------------------------------------------------
SELECT array_offset(array[s_int, c, 3],0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[s_int, c, 3],0)<99999
       OR array_offset(array[s_int, c, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C4_D2
#-------------------------------------------------------------------------
SELECT array_offset(array[s_int, c, 3],0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[s_int, c, 3],0)<99999
       OR array_offset(array[s_int, c, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C5_D1
#-------------------------------------------------------------------------
SELECT array_offset(array[c, s_int, 3],0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[c, s_int, 3],0)<99999
       OR array_offset(array[c, s_int, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C5_D2
#-------------------------------------------------------------------------
SELECT array_offset(array[c, s_int, 3],0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[c, s_int, 3],0)<99999
       OR array_offset(array[c, s_int, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C6_D1
#-------------------------------------------------------------------------
SELECT array_offset(array[s_int, s_int, 3],0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[s_int, s_int, 3],0)<99999
       OR array_offset(array[s_int, s_int, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C6_D2
#-------------------------------------------------------------------------
SELECT array_offset(array[s_int, s_int, 3],0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[s_int, s_int, 3],0)<99999
       OR array_offset(array[s_int, s_int, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C1_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(c, 1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(c, 1)<99999
       OR array_ordinal(c, 1) IS NULL);
Cannot apply 'ARRAY_ORDINAL' to arguments of type 'ARRAY_ORDINAL(<BIGINT>, <INTEGER>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C1_D2
#-------------------------------------------------------------------------
SELECT array_ordinal(c, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(c, 1)<99999
       OR array_ordinal(c, 1) IS NULL);
Cannot apply 'ARRAY_ORDINAL' to arguments of type 'ARRAY_ORDINAL(<BIGINT>, <INTEGER>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C2_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(s_int, 1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(s_int, 1)<99999
       OR array_ordinal(s_int, 1) IS NULL);
Cannot apply 'ARRAY_ORDINAL' to arguments of type 'ARRAY_ORDINAL(<BIGINT>, <INTEGER>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C2_D2
#-------------------------------------------------------------------------
SELECT array_ordinal(s_int, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(s_int, 1)<99999
       OR array_ordinal(s_int, 1) IS NULL);
Cannot apply 'ARRAY_ORDINAL' to arguments of type 'ARRAY_ORDINAL(<BIGINT>, <INTEGER>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C3_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(array[c, c, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[c, c, 3],1)<99999
       OR array_ordinal(array[c, c, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C3_D2
#-------------------------------------------------------------------------
SELECT array_ordinal(array[c, c, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[c, c, 3],1)<99999
       OR array_ordinal(array[c, c, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C4_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(array[s_int, c, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[s_int, c, 3],1)<99999
       OR array_ordinal(array[s_int, c, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C4_D2
#-------------------------------------------------------------------------
SELECT array_ordinal(array[s_int, c, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[s_int, c, 3],1)<99999
       OR array_ordinal(array[s_int, c, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C5_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(array[c, s_int, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[c, s_int, 3],1)<99999
       OR array_ordinal(array[c, s_int, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C5_D2
#-------------------------------------------------------------------------
SELECT array_ordinal(array[c, s_int, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[c, s_int, 3],1)<99999
       OR array_ordinal(array[c, s_int, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C6_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(array[s_int, s_int, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[s_int, s_int, 3],1)<99999
       OR array_ordinal(array[s_int, s_int, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C6_D2
#-------------------------------------------------------------------------
SELECT array_ordinal(array[s_int, s_int, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[s_int, s_int, 3],1)<99999
       OR array_ordinal(array[s_int, s_int, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C1_D1
#-------------------------------------------------------------------------
SELECT array_contains(c,array[1, 2, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(c,array[1, 2, 3]) IS NOT NULL);
Cannot apply 'ARRAY_CONTAINS' to arguments of type 'ARRAY_CONTAINS(<BIGINT>, <INTEGER ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C1_D2
#-------------------------------------------------------------------------
SELECT array_contains(c,array[1, 2, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(c,array[1, 2, 3]) IS NOT NULL);
Cannot apply 'ARRAY_CONTAINS' to arguments of type 'ARRAY_CONTAINS(<BIGINT>, <INTEGER ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C2_D1
#-------------------------------------------------------------------------
SELECT array_contains(s_int,array[1, 2, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(s_int,array[1, 2, 3]) IS NOT NULL);
Cannot apply 'ARRAY_CONTAINS' to arguments of type 'ARRAY_CONTAINS(<BIGINT>, <INTEGER ARRAY>)'
!error

