!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=DartComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/array&numMergeBuffers=3
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B10
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY cube(c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B11
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY cube(s_int, c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B12
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY cube(s_int);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B13
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY c
HAVING c IS NULL;
+---+-----+
| c | cnt |
+---+-----+
|   |   9 |
+---+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B14
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B1
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY c;
+---+-----+
| c | cnt |
+---+-----+
+---+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B2
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY s_int,
         c;
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
+-------+---+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B3
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
+-------+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B4
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (c);
+---+-----+
| c | cnt |
+---+-----+
+---+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B5
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B6
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
+-------+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B7
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B8
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(s_int, c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B9
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(s_int);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B10
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY cube(c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B11
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY cube(s_int, c);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B12
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY cube(s_int);
QueryNotSupported
!error

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B13
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY c
HAVING c = 1;
+---+-----+
| c | cnt |
+---+-----+
+---+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B14
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
+-------+-----+
(0 rows)

!ok

