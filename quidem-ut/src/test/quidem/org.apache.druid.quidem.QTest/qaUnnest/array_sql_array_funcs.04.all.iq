!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=AllDruidEnginesComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/array
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C10_D2
#-------------------------------------------------------------------------
SELECT array_ordinal_of(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(s_int,array[s_int, s_int, 3])<99999
       OR array_ordinal_of(s_int,array[s_int, s_int, 3]) IS NULL);
Cannot apply 'ARRAY_ORDINAL_OF' to arguments of type 'ARRAY_ORDINAL_OF(<BIGINT>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C11_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, c, 3],array[c, c, 3])<99999
       OR array_ordinal_of(array[c, c, 3],array[c, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C11_D2
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, c, 3],array[c, c, 3])<99999
       OR array_ordinal_of(array[c, c, 3],array[c, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C12_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, c, 3],array[s_int, c, 3])<99999
       OR array_ordinal_of(array[s_int, c, 3],array[s_int, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C12_D2
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, c, 3],array[s_int, c, 3])<99999
       OR array_ordinal_of(array[s_int, c, 3],array[s_int, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C13_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, s_int, 3],array[c, s_int, 3])<99999
       OR array_ordinal_of(array[c, s_int, 3],array[c, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C13_D2
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, s_int, 3],array[c, s_int, 3])<99999
       OR array_ordinal_of(array[c, s_int, 3],array[c, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C14_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, s_int, 3],array[s_int, s_int, 3])<99999
       OR array_ordinal_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C14_D2
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, s_int, 3],array[s_int, s_int, 3])<99999
       OR array_ordinal_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C1_D1
#-------------------------------------------------------------------------
SELECT array_prepend(c, s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(c, s_int)<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C1_D2
#-------------------------------------------------------------------------
SELECT array_prepend(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(c, s_int)<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C2_D1
#-------------------------------------------------------------------------
SELECT array_prepend(s_int, c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(s_int, c)<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C2_D2
#-------------------------------------------------------------------------
SELECT array_prepend(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(s_int, c)<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C3_D1
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, c, 3],c)<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT ARRAY>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C3_D2
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, c, 3],c)<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT ARRAY>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C4_D1
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, c, 3],s_int)<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT ARRAY>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C4_D2
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, c, 3],s_int)<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT ARRAY>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C5_D1
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, s_int, 3],c)<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT ARRAY>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C5_D2
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, s_int, 3],c)<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT ARRAY>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C6_D1
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, s_int, 3],s_int)<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT ARRAY>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C6_D2
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, s_int, 3],s_int)<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT ARRAY>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C7_D1
#-------------------------------------------------------------------------
SELECT array_prepend(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(c,array[c, c, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [null, null, null, 3] |
| [null, null, null, 3] |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C7_D2
#-------------------------------------------------------------------------
SELECT array_prepend(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(c,array[c, c, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [null, null, null, 3] |
| [null, null, null, 3] |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C8_D1
#-------------------------------------------------------------------------
SELECT array_prepend(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(s_int,array[s_int, c, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 2, 3]          |
| [1, 1, null, 3]       |
| [2, 2, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, null, 3]       |
| [null, null, 1, 3]    |
| [null, null, 2, 3]    |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C8_D2
#-------------------------------------------------------------------------
SELECT array_prepend(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(s_int,array[s_int, c, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 2, 3]          |
| [1, 1, null, 3]       |
| [2, 2, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, null, 3]       |
| [null, null, 1, 3]    |
| [null, null, 2, 3]    |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C9_D1
#-------------------------------------------------------------------------
SELECT array_prepend(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(c,array[c, s_int, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 2, 3]          |
| [1, 1, null, 3]       |
| [2, 2, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, null, 3]       |
| [null, null, 1, 3]    |
| [null, null, 2, 3]    |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C9_D2
#-------------------------------------------------------------------------
SELECT array_prepend(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(c,array[c, s_int, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 2, 3]          |
| [1, 1, null, 3]       |
| [2, 2, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, null, 3]       |
| [null, null, 1, 3]    |
| [null, null, 2, 3]    |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C10_D1
#-------------------------------------------------------------------------
SELECT array_prepend(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(s_int,array[s_int, s_int, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [null, null, null, 3] |
| [null, null, null, 3] |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C10_D2
#-------------------------------------------------------------------------
SELECT array_prepend(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(s_int,array[s_int, s_int, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [null, null, null, 3] |
| [null, null, null, 3] |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C11_D1
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, c, 3],array[c, c, 3])<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT ARRAY>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C11_D2
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, c, 3],array[c, c, 3])<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT ARRAY>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C12_D1
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, c, 3],array[s_int, c, 3])<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT ARRAY>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C12_D2
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, c, 3],array[s_int, c, 3])<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT ARRAY>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C13_D1
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, s_int, 3],array[c, s_int, 3])<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT ARRAY>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C13_D2
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, s_int, 3],array[c, s_int, 3])<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT ARRAY>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C14_D1
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, s_int, 3],array[s_int, s_int, 3])<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT ARRAY>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C14_D2
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, s_int, 3],array[s_int, s_int, 3])<ARRAY[99999]);
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(<BIGINT ARRAY>, <BIGINT ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C1_D1
#-------------------------------------------------------------------------
SELECT array_append(c, s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(c, s_int)<ARRAY[99999]);
Cannot apply 'ARRAY_APPEND' to arguments of type 'ARRAY_APPEND(<BIGINT>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C1_D2
#-------------------------------------------------------------------------
SELECT array_append(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(c, s_int)<ARRAY[99999]);
Cannot apply 'ARRAY_APPEND' to arguments of type 'ARRAY_APPEND(<BIGINT>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C2_D1
#-------------------------------------------------------------------------
SELECT array_append(s_int, c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(s_int, c)<ARRAY[99999]);
Cannot apply 'ARRAY_APPEND' to arguments of type 'ARRAY_APPEND(<BIGINT>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C2_D2
#-------------------------------------------------------------------------
SELECT array_append(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(s_int, c)<ARRAY[99999]);
Cannot apply 'ARRAY_APPEND' to arguments of type 'ARRAY_APPEND(<BIGINT>, <BIGINT>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C3_D1
#-------------------------------------------------------------------------
SELECT array_append(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, c, 3],c)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [null, null, 3, null] |
| [null, null, 3, null] |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C3_D2
#-------------------------------------------------------------------------
SELECT array_append(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, c, 3],c)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [null, null, 3, null] |
| [null, null, 3, null] |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C4_D1
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, c, 3],s_int)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 2, 3, 1]          |
| [1, null, 3, 1]       |
| [2, 1, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, null, 3, 2]       |
| [null, 1, 3, null]    |
| [null, 2, 3, null]    |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C4_D2
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, c, 3],s_int)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 2, 3, 1]          |
| [1, null, 3, 1]       |
| [2, 1, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, null, 3, 2]       |
| [null, 1, 3, null]    |
| [null, 2, 3, null]    |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C5_D1
#-------------------------------------------------------------------------
SELECT array_append(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, s_int, 3],c)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 2, 3, 1]          |
| [1, null, 3, 1]       |
| [2, 1, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, null, 3, 2]       |
| [null, 1, 3, null]    |
| [null, 2, 3, null]    |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C5_D2
#-------------------------------------------------------------------------
SELECT array_append(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, s_int, 3],c)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 2, 3, 1]          |
| [1, null, 3, 1]       |
| [2, 1, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, null, 3, 2]       |
| [null, 1, 3, null]    |
| [null, 2, 3, null]    |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C6_D1
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, s_int, 3],s_int)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [null, null, 3, null] |
| [null, null, 3, null] |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C6_D2
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, s_int, 3],s_int)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [null, null, 3, null] |
| [null, null, 3, null] |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C7_D1
#-------------------------------------------------------------------------
SELECT array_append(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(c,array[c, c, 3])<ARRAY[99999]);
Cannot apply 'ARRAY_APPEND' to arguments of type 'ARRAY_APPEND(<BIGINT>, <BIGINT ARRAY>)'
!error

