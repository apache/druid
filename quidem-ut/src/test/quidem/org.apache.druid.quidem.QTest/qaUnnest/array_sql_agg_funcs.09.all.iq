!set dartQueryId 00000000-0000-0000-0000-000000000000
!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardAndMSQComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/array
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C5_D2
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C6_D1
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C6_D2
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C7_D1
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(c) IS NOT NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C7_D2
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(c) IS NOT NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C8_D1
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(c) IS NOT NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C8_D2
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(c) IS NOT NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C9_D1
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(s_int) IS NOT NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C9_D2
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(s_int) IS NOT NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C10_D1
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(s_int) IS NOT NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C10_D2
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(s_int) IS NOT NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C1_D1
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C1_D2
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C2_D1
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C2_D2
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C3_D1
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C3_D2
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C4_D1
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C4_D2
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C5_D1
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C5_D2
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C6_D1
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C6_D2
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C7_D1
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(DISTINCT c) IS NOT NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C7_D2
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(DISTINCT c) IS NOT NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C8_D1
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(DISTINCT c) IS NOT NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C8_D2
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(DISTINCT c) IS NOT NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C9_D1
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(DISTINCT s_int) IS NOT NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C9_D2
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(DISTINCT s_int) IS NOT NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C10_D1
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(DISTINCT s_int) IS NOT NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C10_D2
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(DISTINCT s_int) IS NOT NULL;
Cannot apply 'ARRAY_CONCAT_AGG' to arguments of type 'ARRAY_CONCAT_AGG(<BIGINT>)'. Supported form(s): 'ARRAY_CONCAT_AGG(<ARRAY>)'
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C1_D1
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-------------+
| col         |
+-------------+
| 1|2|1|2|2|1 |
+-------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C1_D2
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-------------+
| col         |
+-------------+
| 1|2|1|2|2|1 |
+-------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C2_D1
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-------------+
| col         |
+-------------+
| 1|1|1|2|2|2 |
+-------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C2_D2
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-------------+
| col         |
+-------------+
| 1|1|1|2|2|2 |
+-------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C3_D1
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
|       |
+-------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C3_D2
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
|       |
+-------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C4_D1
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 2|1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C4_D2
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 2|1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C5_D1
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C5_D2
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C6_D1
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
|       |
+-------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C6_D2
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
|       |
+-------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C7_D1
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(c, '|') IS NOT NULL;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
+-------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C7_D2
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(c, '|') IS NOT NULL;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
+-------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C8_D1
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING string_agg(c, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 2|1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C8_D2
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING string_agg(c, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 2|1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C9_D1
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(s_int, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C9_D2
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(s_int, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C10_D1
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING string_agg(s_int, '|') IS NOT NULL;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
+-------+
(2 rows)

!ok

