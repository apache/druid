!set sqlJoinAlgorithm sortMerge
!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardMSQComponentSupplier&datasets=sql/src/test/quidem/qatests/qaTpch&numMergeBuffers=3
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: A01
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM customer;
+-----+
| cnt |
+-----+
| 150 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: A02
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM lineitem;
+------+
| cnt  |
+------+
| 6001 |
+------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: A03
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM nation;
+-----+
| cnt |
+-----+
|  25 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: A04
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM orders;
+------+
| cnt  |
+------+
| 1500 |
+------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: A05
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM part;
+-----+
| cnt |
+-----+
| 200 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: A06
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM partsupp;
+-----+
| cnt |
+-----+
| 800 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: A07
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM region;
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: A08
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM supplier;
+-----+
| cnt |
+-----+
|  10 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: Q01_sortMerge
#-------------------------------------------------------------------------

SELECT l_returnflag,
       l_linestatus,
       cast(sum(l_quantity) AS bigint) AS sum_qty,
       cast(sum(l_extendedprice) AS bigint) AS sum_base_price,
       cast(sum(l_extendedprice * (1 - l_discount)) AS bigint) AS sum_disc_price,
       cast(sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS bigint) AS sum_charge,
       cast(avg(l_quantity) AS bigint) AS avg_qty,
       cast(avg(l_extendedprice) AS bigint) AS avg_price,
       cast(avg(l_discount) AS bigint) AS avg_disc,
       count(*) AS count_order
FROM lineitem
WHERE l_shipdate <= date '1998-12-01' - interval '63' DAY (3)
GROUP BY l_returnflag,
         l_linestatus
ORDER BY l_returnflag,
         l_linestatus;
+--------------+--------------+---------+----------------+----------------+------------+---------+-----------+----------+-------------+
| l_returnflag | l_linestatus | sum_qty | sum_base_price | sum_disc_price | sum_charge | avg_qty | avg_price | avg_disc | count_order |
+--------------+--------------+---------+----------------+----------------+------------+---------+-----------+----------+-------------+
| A            | F            |   37474 |       56250004 |       53399385 |   55528109 |      25 |     38058 |        0 |        1478 |
| N            | F            |    1041 |        1614635 |        1549641 |    1608284 |      27 |     42490 |        0 |          38 |
| N            | O            |   76040 |      114294563 |      108642691 |  112966878 |      25 |     38405 |        0 |        2976 |
| R            | F            |   36470 |       54082045 |       51384368 |   53497960 |      25 |     37144 |        0 |        1456 |
+--------------+--------------+---------+----------------+----------------+------------+---------+-----------+----------+-------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: Q02_sortMerge
#-------------------------------------------------------------------------

SELECT s_acctbal,
       s_name,
       n_name,
       p_partkey,
       p_mfgr,
       s_address,
       s_phone,
       s_comment
FROM part,
     supplier,
     partsupp,
     nation,
     region
WHERE p_partkey = ps_partkey
  AND s_suppkey = ps_suppkey
  AND p_size = 47
  AND p_type like '%TIN'
  AND s_nationkey = n_nationkey
  AND n_regionkey = r_regionkey
  AND r_name = 'EUROPE'
  AND ps_supplycost =
    (SELECT min(ps_supplycost)
     FROM partsupp,
          supplier,
          nation,
          region
     WHERE p_partkey = ps_partkey
       AND s_suppkey = ps_suppkey
       AND s_nationkey = n_nationkey
       AND n_regionkey = r_regionkey
       AND r_name = 'EUROPE')
ORDER BY s_acctbal DESC,
         n_name,
         s_name,
         p_partkey;
+-----------+--------+--------+-----------+--------+-----------+---------+-----------+
| s_acctbal | s_name | n_name | p_partkey | p_mfgr | s_address | s_phone | s_comment |
+-----------+--------+--------+-----------+--------+-----------+---------+-----------+
+-----------+--------+--------+-----------+--------+-----------+---------+-----------+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: Q03_sortMerge
#-------------------------------------------------------------------------

SELECT l_orderkey,
       cast(sum(l_extendedprice * (1 - l_discount)) AS bigint) AS revenue,
       o_orderdate,
       o_shippriority
FROM customer,
     orders,
     lineitem
WHERE c_mktsegment = 'BUILDING'
  AND c_custkey = o_custkey
  AND l_orderkey = o_orderkey
  AND o_orderdate < date '1995-03-21'
  AND l_shipdate > date '1995-03-21'
GROUP BY l_orderkey,
         o_orderdate,
         o_shippriority
ORDER BY revenue DESC,
         o_orderdate;
+------------+---------+-------------+----------------+
| l_orderkey | revenue | o_orderdate | o_shippriority |
+------------+---------+-------------+----------------+
+------------+---------+-------------+----------------+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: Q04_sortMerge
#-------------------------------------------------------------------------

SELECT o_orderpriority,
       count(*) AS order_count
FROM orders
WHERE o_orderdate >= date '1996-04-01'
  AND o_orderdate < date '1996-04-01' + interval '3' MONTH
  AND
    (SELECT count(*)
     FROM lineitem
     WHERE l_orderkey = o_orderkey
       AND l_commitdate < l_receiptdate) > 0
GROUP BY o_orderpriority
ORDER BY o_orderpriority;
+-----------------+-------------+
| o_orderpriority | order_count |
+-----------------+-------------+
| 1-URGENT        |           9 |
| 2-HIGH          |           8 |
| 3-MEDIUM        |           6 |
| 4-NOT SPECIFIED |          14 |
| 5-LOW           |           5 |
+-----------------+-------------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: Q05_sortMerge
#-------------------------------------------------------------------------

SELECT n_name,
       cast(sum(l_extendedprice * (1 - l_discount)) AS bigint) AS revenue
FROM customer,
     orders,
     lineitem,
     supplier,
     nation,
     region
WHERE c_custkey = o_custkey
  AND l_orderkey = o_orderkey
  AND l_suppkey = s_suppkey
  AND c_nationkey = s_nationkey
  AND s_nationkey = n_nationkey
  AND n_regionkey = r_regionkey
  AND r_name = 'MIDDLE EAST'
  AND o_orderdate >= date '1995-01-01'
  AND o_orderdate < date '1995-01-01' + interval '1' YEAR
GROUP BY n_name
ORDER BY revenue DESC;
+--------+---------+
| n_name | revenue |
+--------+---------+
+--------+---------+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: Q06_sortMerge
#-------------------------------------------------------------------------

SELECT cast(sum(l_extendedprice * l_discount) AS bigint) AS revenue
FROM lineitem
WHERE l_shipdate >= date '1995-01-01'
  AND l_shipdate < date '1995-01-01' + interval '1' YEAR
  AND l_discount BETWEEN 0.03 - 0.01 AND 0.03 + 0.01
  AND l_quantity < 24;
+---------+
| revenue |
+---------+
|   57268 |
+---------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: Q08_sortMerge
#-------------------------------------------------------------------------

SELECT o_year,
       cast(sum(CASE
                    WHEN nation = 'INDIA' THEN volume
                    ELSE 0
                END) / sum(volume) AS bigint) AS mkt_share
FROM
  (SELECT extract(YEAR
                  FROM time_parse(o_orderdate)) AS o_year,
          l_extendedprice * (1 - l_discount) AS volume,
          n2.n_name AS nation
   FROM part,
        supplier,
        lineitem,
        orders,
        customer,
        nation n1,
        nation n2,
        region
   WHERE p_partkey = l_partkey
     AND s_suppkey = l_suppkey
     AND l_orderkey = o_orderkey
     AND o_custkey = c_custkey
     AND c_nationkey = n1.n_nationkey
     AND n1.n_regionkey = r_regionkey
     AND r_name = 'ASIA'
     AND s_nationkey = n2.n_nationkey
     AND o_orderdate BETWEEN date '1995-01-01' AND date '1996-12-31'
     AND p_type = 'SMALL PLATED BRASS') AS all_nations
GROUP BY o_year
ORDER BY o_year;
+--------+-----------+
| o_year | mkt_share |
+--------+-----------+
+--------+-----------+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: Q09_sortMerge
#-------------------------------------------------------------------------

SELECT nation,
       o_year,
       cast(sum(amount) AS bigint) AS sum_profit
FROM
  (SELECT n_name AS nation,
          extract(YEAR
                  FROM time_parse(o_orderdate)) AS o_year,
          l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity AS amount
   FROM part,
        supplier,
        lineitem,
        partsupp,
        orders,
        nation
   WHERE s_suppkey = l_suppkey
     AND ps_suppkey = l_suppkey
     AND ps_partkey = l_partkey
     AND p_partkey = l_partkey
     AND o_orderkey = l_orderkey
     AND s_nationkey = n_nationkey
     AND p_name like '%dim%') AS profit
GROUP BY nation,
         o_year
ORDER BY nation,
         o_year DESC;
+--------+--------+------------+
| nation | o_year | sum_profit |
+--------+--------+------------+
+--------+--------+------------+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: Q10_sortMerge
#-------------------------------------------------------------------------

SELECT c_custkey,
       c_name,
       cast(sum(l_extendedprice * (1 - l_discount)) AS bigint) AS revenue,
       cast(c_acctbal AS bigint) AS c_acctbal,
       n_name,
       c_address,
       c_phone,
       c_comment
FROM customer,
     orders,
     lineitem,
     nation
WHERE c_custkey = o_custkey
  AND l_orderkey = o_orderkey
  AND o_orderdate >= date '1993-07-01'
  AND o_orderdate < date '1993-07-01' + interval '3' MONTH
  AND l_returnflag = 'R'
  AND c_nationkey = n_nationkey
GROUP BY c_custkey,
         c_name,
         c_acctbal,
         c_phone,
         n_name,
         c_address,
         c_comment
ORDER BY revenue DESC;
+-----------+--------+---------+-----------+--------+-----------+---------+-----------+
| c_custkey | c_name | revenue | c_acctbal | n_name | c_address | c_phone | c_comment |
+-----------+--------+---------+-----------+--------+-----------+---------+-----------+
+-----------+--------+---------+-----------+--------+-----------+---------+-----------+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: Q11_sortMerge
#-------------------------------------------------------------------------

SELECT ps_partkey,
       cast(sum(ps_supplycost * ps_availqty) AS bigint) AS druid_value
FROM partsupp,
     supplier,
     nation
WHERE ps_suppkey = s_suppkey
  AND s_nationkey = n_nationkey
  AND n_name = 'IRAQ'
GROUP BY ps_partkey
HAVING sum(ps_supplycost * ps_availqty) >
  (SELECT sum(ps_supplycost * ps_availqty) * 0.0001000000
   FROM partsupp,
        supplier,
        nation
   WHERE ps_suppkey = s_suppkey
     AND s_nationkey = n_nationkey
     AND n_name = 'IRAQ')
ORDER BY druid_value DESC;
+------------+-------------+
| ps_partkey | druid_value |
+------------+-------------+
|          4 |      152605 |
+------------+-------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: Q12_sortMerge
#-------------------------------------------------------------------------

SELECT l_shipmode,
       cast(sum(CASE
                    WHEN o_orderpriority = '1-URGENT'
                         OR o_orderpriority = '2-HIGH' THEN 1
                    ELSE 0
                END) AS bigint) AS high_line_count,
       sum(CASE
               WHEN o_orderpriority <> '1-URGENT'
                    AND o_orderpriority <> '2-HIGH' THEN 1
               ELSE 0
           END) AS low_line_count
FROM orders,
     lineitem
WHERE o_orderkey = l_orderkey
  AND l_shipmode IN ('RAIL',
                     'MAIL')
  AND l_commitdate < l_receiptdate
  AND l_shipdate < l_commitdate
  AND l_receiptdate >= date '1997-01-01'
  AND l_receiptdate < date '1997-01-01' + interval '1' YEAR
GROUP BY l_shipmode
ORDER BY l_shipmode;
+------------+-----------------+----------------+
| l_shipmode | high_line_count | low_line_count |
+------------+-----------------+----------------+
| MAIL       |               9 |              3 |
| RAIL       |               6 |              9 |
+------------+-----------------+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: Q13_sortMerge
#-------------------------------------------------------------------------

SELECT c_count,
       count(*) AS custdist
FROM
  (SELECT c_custkey,
          count(o_orderkey)
   FROM customer
   LEFT OUTER JOIN orders ON c_custkey = o_custkey
   AND o_comment not like '%unusual%deposits%'
   GROUP BY c_custkey) AS c_orders (c_custkey, c_count)
GROUP BY c_count
ORDER BY custdist DESC,
         c_count DESC;
+---------+----------+
| c_count | custdist |
+---------+----------+
|       0 |      150 |
+---------+----------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: Q14_sortMerge
#-------------------------------------------------------------------------

SELECT cast(100.00 * sum(CASE
                             WHEN p_type like 'PROMO%' THEN l_extendedprice * (1 - l_discount)
                             ELSE 0
                         END) / sum(l_extendedprice * (1 - l_discount)) AS bigint) AS promo_revenue
FROM lineitem,
     part
WHERE l_partkey = p_partkey
  AND l_shipdate >= date '1997-03-01'
  AND l_shipdate < date '1997-03-01' + interval '1' MONTH;
+---------------+
| promo_revenue |
+---------------+
|               |
+---------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: Q15_sortMerge
#-------------------------------------------------------------------------

SELECT s_suppkey,
       s_name,
       s_address,
       s_phone,
       cast(total_revenue AS bigint) AS total_revenue
FROM supplier,
  (SELECT l_suppkey AS supplier_no,
          sum(l_extendedprice * (1 - l_discount)) AS total_revenue
   FROM lineitem
   WHERE l_shipdate >= date '1993-02-01'
     AND l_shipdate < date '1993-02-01' + interval '3' MONTH
   GROUP BY l_suppkey)
WHERE s_suppkey = supplier_no
  AND total_revenue =
    (SELECT max(total_revenue)
     FROM
       (SELECT l_suppkey AS supplier_no,
               sum(l_extendedprice * (1 - l_discount)) AS total_revenue
        FROM lineitem
        WHERE l_shipdate >= date '1993-02-01'
          AND l_shipdate < date '1993-02-01' + interval '3' MONTH
        GROUP BY l_suppkey))
ORDER BY s_suppkey;
+-----------+--------+-----------+---------+---------------+
| s_suppkey | s_name | s_address | s_phone | total_revenue |
+-----------+--------+-----------+---------+---------------+
+-----------+--------+-----------+---------+---------------+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: Q16_sortMerge
#-------------------------------------------------------------------------

SELECT p_brand,
       p_type,
       p_size,
       cast(count(DISTINCT ps_suppkey) AS bigint) AS supplier_cnt
FROM partsupp,
     part
WHERE p_partkey = ps_partkey
  AND p_brand <> 'Brand#15'
  AND p_type not like 'SMALL BRUSHED%'
  AND p_size IN (22,
                 46,
                 3,
                 16,
                 48,
                 24,
                 6,
                 50)
  AND ps_suppkey NOT IN
    (SELECT s_suppkey
     FROM supplier
     WHERE s_comment like '%Customer%Complaints%')
GROUP BY p_brand,
         p_type,
         p_size
ORDER BY supplier_cnt DESC,
         p_brand,
         p_type,
         p_size;
+----------+---------------------------+--------+--------------+
| p_brand  | p_type                    | p_size | supplier_cnt |
+----------+---------------------------+--------+--------------+
| Brand#12 | LARGE POLISHED NICKEL     |     48 |            4 |
| Brand#14 | ECONOMY POLISHED STEEL    |     24 |            4 |
| Brand#21 | MEDIUM BURNISHED STEEL    |     24 |            4 |
| Brand#22 | ECONOMY PLATED NICKEL     |     16 |            4 |
| Brand#24 | MEDIUM BURNISHED NICKEL   |      6 |            4 |
| Brand#25 | SMALL BURNISHED COPPER    |      3 |            4 |
| Brand#32 | LARGE ANODIZED STEEL      |     46 |            4 |
| Brand#33 | SMALL BURNISHED NICKEL    |      3 |            4 |
| Brand#33 | STANDARD BURNISHED COPPER |     46 |            4 |
| Brand#35 | PROMO ANODIZED NICKEL     |     46 |            4 |
| Brand#43 | ECONOMY BRUSHED STEEL     |     16 |            4 |
| Brand#43 | SMALL ANODIZED BRASS      |     46 |            4 |
| Brand#44 | PROMO PLATED COPPER       |     16 |            4 |
| Brand#45 | LARGE POLISHED TIN        |     48 |            4 |
| Brand#45 | MEDIUM PLATED TIN         |     48 |            4 |
| Brand#45 | PROMO ANODIZED BRASS      |     22 |            4 |
| Brand#45 | STANDARD POLISHED STEEL   |     24 |            4 |
| Brand#53 | MEDIUM BRUSHED COPPER     |      3 |            4 |
| Brand#53 | MEDIUM POLISHED STEEL     |     48 |            4 |
| Brand#53 | PROMO BRUSHED COPPER      |     24 |            4 |
| Brand#54 | MEDIUM POLISHED BRASS     |     22 |            4 |
| Brand#54 | STANDARD ANODIZED BRASS   |     22 |            4 |
| Brand#55 | PROMO ANODIZED NICKEL     |     16 |            4 |
| Brand#55 | STANDARD BRUSHED COPPER   |      3 |            4 |
+----------+---------------------------+--------+--------------+
(24 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: Q17_sortMerge
#-------------------------------------------------------------------------

SELECT cast(sum(l_extendedprice) / 7.0 AS bigint) AS avg_yearly
FROM lineitem,
     part
WHERE p_partkey = l_partkey
  AND p_brand = 'Brand#52'
  AND p_container = 'MED BOX'
  AND l_quantity <
    (SELECT 0.2 * avg(l_quantity)
     FROM lineitem
     WHERE l_partkey = p_partkey);
+------------+
| avg_yearly |
+------------+
|            |
+------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: Q18_sortMerge
#-------------------------------------------------------------------------

SELECT c_name,
       c_custkey,
       o_orderkey,
       o_orderdate,
       cast(o_totalprice AS bigint) AS o_totalprice,
       cast(sum(l_quantity) AS bigint) AS sum_l_quantity
FROM customer,
     orders,
     lineitem
WHERE o_orderkey IN
    (SELECT l_orderkey
     FROM lineitem
     GROUP BY l_orderkey
     HAVING sum(l_quantity) > 313)
  AND c_custkey = o_custkey
  AND o_orderkey = l_orderkey
GROUP BY c_name,
         c_custkey,
         o_orderkey,
         o_orderdate,
         o_totalprice
ORDER BY o_totalprice DESC,
         o_orderdate;
+--------+-----------+------------+-------------+--------------+----------------+
| c_name | c_custkey | o_orderkey | o_orderdate | o_totalprice | sum_l_quantity |
+--------+-----------+------------+-------------+--------------+----------------+
+--------+-----------+------------+-------------+--------------+----------------+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: Q20_sortMerge
#-------------------------------------------------------------------------

SELECT s_name,
       s_address
FROM supplier,
     nation
WHERE s_suppkey IN
    (SELECT ps_suppkey
     FROM partsupp
     WHERE ps_partkey IN
         (SELECT p_partkey
          FROM part
          WHERE p_name like 'steel%')
       AND ps_availqty >
         (SELECT 0.5 * sum(l_quantity)
          FROM lineitem
          WHERE l_partkey = ps_partkey
            AND l_suppkey = ps_suppkey
            AND l_shipdate >= date '1993-01-01'
            AND l_shipdate < date '1993-01-01' + interval '1' YEAR))
  AND s_nationkey = n_nationkey
  AND n_name = 'FRANCE'
ORDER BY s_name;
+--------+-----------+
| s_name | s_address |
+--------+-----------+
+--------+-----------+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_tpch TEST_ID: Q22_sortMerge
#-------------------------------------------------------------------------

SELECT cntrycode,
       count(*) AS numcust,
       cast(sum(c_acctbal) AS bigint) AS totacctbal
FROM
  (SELECT substring(c_phone
                    FROM 1
                    FOR 2) AS cntrycode,
          c_acctbal
   FROM customer
   WHERE substring(c_phone
                   FROM 1
                   FOR 2) IN ('26',
                              '43',
                              '31',
                              '22',
                              '44',
                              '30',
                              '27')
     AND c_acctbal >
       (SELECT avg(c_acctbal)
        FROM customer
        WHERE c_acctbal > 0.00
          AND substring(c_phone
                        FROM 1
                        FOR 2) IN ('26',
                                   '43',
                                   '31',
                                   '22',
                                   '44',
                                   '30',
                                   '27'))
     AND
       (SELECT count(*)
        FROM orders
        WHERE o_custkey = c_custkey) = 0) AS custsale
GROUP BY cntrycode
ORDER BY cntrycode;
+-----------+---------+------------+
| cntrycode | numcust | totacctbal |
+-----------+---------+------------+
| 22        |       3 |      20332 |
| 26        |       5 |      38943 |
| 27        |       2 |      13248 |
| 30        |       2 |      17528 |
| 31        |       2 |      18611 |
+-----------+---------+------------+
(5 rows)

!ok

