!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=DartComponentSupplier&datasets=sql/src/test/quidem/qatests/qaJsonCols/funcs_and_sql
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A100
#-------------------------------------------------------------------------
SELECT count(*) c
FROM
  (SELECT json_keys(c1, '$.a_obj.a_str')
   FROM test_json_cols);
+---+
| c |
+---+
| 4 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A101
#-------------------------------------------------------------------------
SELECT count(*) c
FROM
  (SELECT ALL json_keys(c1, '$.a_obj.a_num_int')
   FROM test_json_cols);
+---+
| c |
+---+
| 4 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A102
#-------------------------------------------------------------------------
SELECT count(mycol) c
FROM
  (SELECT json_keys(c1, '$') mycol
   FROM test_json_cols);
+---+
| c |
+---+
| 4 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A103
#-------------------------------------------------------------------------
SELECT count(mycol) c
FROM
  (SELECT json_keys(c1, '$.a_obj') mycol
   FROM test_json_cols);
+---+
| c |
+---+
| 2 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A104
#-------------------------------------------------------------------------
SELECT count(mycol) c
FROM
  (SELECT json_keys(c1, '$.a_array') mycol
   FROM test_json_cols);
+---+
| c |
+---+
| 2 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A105
#-------------------------------------------------------------------------
SELECT count(mycol) c
FROM
  (SELECT json_keys(c1, '$.a_array[0]') mycol
   FROM test_json_cols);
+---+
| c |
+---+
| 2 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A106
#-------------------------------------------------------------------------
SELECT count(mycol) c
FROM
  (SELECT json_keys(c1, '$.a_obj.a_str') mycol
   FROM test_json_cols);
+---+
| c |
+---+
| 0 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A107
#-------------------------------------------------------------------------
SELECT count(mycol) c
FROM
  (SELECT json_keys(c1, '$.a_obj.a_num_int') mycol
   FROM test_json_cols);
+---+
| c |
+---+
| 0 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A108
#-------------------------------------------------------------------------
SELECT count(mycol) c
FROM
  (SELECT json_keys(c1, '$.a_obj.a_num_float') mycol
   FROM test_json_cols);
+---+
| c |
+---+
| 0 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A109
#-------------------------------------------------------------------------
SELECT count(mycol) c
FROM
  (SELECT json_keys(c1, '$.a_obj.a_str') mycol
   FROM test_json_cols);
+---+
| c |
+---+
| 0 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A110
#-------------------------------------------------------------------------
SELECT count(mycol) c
FROM
  (SELECT json_keys(c1, '$.a_obj.a_null') mycol
   FROM test_json_cols);
+---+
| c |
+---+
| 0 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A111
#-------------------------------------------------------------------------
SELECT count(*) c
FROM
  (SELECT DISTINCT json_keys(c1, '$.a_obj')
   FROM test_json_cols);
+---+
| c |
+---+
| 2 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A112
#-------------------------------------------------------------------------
SELECT count(*) c
FROM
  (SELECT DISTINCT json_keys(c1, '$.a_obj.a_str')
   FROM test_json_cols);
+---+
| c |
+---+
| 1 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A113
#-------------------------------------------------------------------------
SELECT count(*) c
FROM
  (SELECT DISTINCT json_keys(c1, '$.a_obj.a_num_int')
   FROM test_json_cols);
+---+
| c |
+---+
| 1 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A114
#-------------------------------------------------------------------------
SELECT mycol,
       count(*) c
FROM
  (SELECT json_keys(c1, '$.a_obj') mycol
   FROM test_json_cols)
GROUP BY mycol;
+---------------------------------------------------------------------------------------------------------------------------------------+---+
| mycol                                                                                                                                 | c |
+---------------------------------------------------------------------------------------------------------------------------------------+---+
| [a_str, a_num_int, a_num_float, a_bool, a_null, a_empty_obj, a_empty_array, a_empty_obj_nested, a_empty_array_nested, a_obj, a_array] | 2 |
|                                                                                                                                       | 2 |
+---------------------------------------------------------------------------------------------------------------------------------------+---+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A115
#-------------------------------------------------------------------------
SELECT mycol,
       count(*) c
FROM
  (SELECT json_keys(c1, '$.a_obj.a_str') mycol
   FROM test_json_cols)
GROUP BY mycol;
+-------+---+
| mycol | c |
+-------+---+
|       | 4 |
+-------+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A116
#-------------------------------------------------------------------------
SELECT mycol,
       count(*) c
FROM
  (SELECT json_keys(c1, '$.a_obj.a_num_int') mycol
   FROM test_json_cols)
GROUP BY mycol;
+-------+---+
| mycol | c |
+-------+---+
|       | 4 |
+-------+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A117
#-------------------------------------------------------------------------
SELECT mycol,
       count(*) c
FROM
  (SELECT c1,
          json_keys(c1, '$.') mycol
   FROM test_json_cols)
GROUP BY mycol
HAVING array_contains(mycol, 'a_str');
+---------------------------------------------------------------------------------------------------------------------------------------+---+
| mycol                                                                                                                                 | c |
+---------------------------------------------------------------------------------------------------------------------------------------+---+
| [a_str, a_num_int, a_num_float, a_bool, a_null, a_empty_obj, a_empty_array, a_empty_obj_nested, a_empty_array_nested, a_obj, a_array] | 2 |
+---------------------------------------------------------------------------------------------------------------------------------------+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A118
#-------------------------------------------------------------------------
SELECT mycol,
       count(*) c
FROM
  (SELECT c1,
          json_keys(c1, '$.') mycol
   FROM test_json_cols)
GROUP BY mycol
HAVING NOT array_contains(mycol, 'a_str');
+---------------------------------------------------------------------------------------------------------------------------------------+---+
| mycol                                                                                                                                 | c |
+---------------------------------------------------------------------------------------------------------------------------------------+---+
| [b_str, b_num_int, b_num_float, b_bool, b_null, b_empty_obj, b_empty_array, b_empty_obj_nested, b_empty_array_nested, b_obj, b_array] | 2 |
+---------------------------------------------------------------------------------------------------------------------------------------+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A119
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols
WHERE json_keys(c1, '$.a_obj') = json_keys(c2, '$.a_obj');
+---+
| c |
+---+
| 2 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A120
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols
WHERE json_keys(c1, '$.a_obj.a_str') = json_keys(c2, '$.a_obj.a_str');
+---+
| c |
+---+
| 0 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A121
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols
WHERE json_keys(c1, '$.a_obj.a_num_int') = json_keys(c2, '$.a_obj.a_num_int');
+---+
| c |
+---+
| 0 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A122
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1
INNER JOIN test_json_cols t2 ON json_keys(t1.c1, '$.a_obj')=json_keys(t2.c1, '$.a_obj');
QueryUnsupportedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A123
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1
INNER JOIN test_json_cols t2 ON json_keys(t1.c1, '$.a_obj.a_str')=json_keys(t2.c1, '$.a_obj.a_str');
QueryUnsupportedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A124
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1
INNER JOIN test_json_cols t2 ON json_keys(t1.c1, '$.a_obj.a_num_int')=json_keys(t2.c1, '$.a_obj.a_num_int');
QueryUnsupportedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A125
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1
LEFT JOIN test_json_cols t2 ON json_keys(t1.c1, '$.a_obj')=json_keys(t2.c1, '$.a_obj');
QueryUnsupportedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A126
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1
LEFT JOIN test_json_cols t2 ON json_keys(t1.c1, '$.a_obj.a_str')=json_keys(t2.c1, '$.a_obj.a_str');
QueryUnsupportedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A127
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1
LEFT JOIN test_json_cols t2 ON json_keys(t1.c1, '$.a_obj.a_num_int')=json_keys(t2.c1, '$.a_obj.a_num_int');
QueryUnsupportedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A128
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1,
     test_json_cols t2
WHERE json_keys(t1.c1, '$.a_obj')=json_keys(t2.c1, '$.a_obj');
QueryUnsupportedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A129
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1,
     test_json_cols t2
WHERE json_keys(t1.c1, '$.a_obj.a_str')=json_keys(t2.c1, '$.a_obj.a_str');
QueryUnsupportedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A130
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1,
     test_json_cols t2
WHERE json_keys(t1.c1, '$.a_obj.a_num_int')=json_keys(t2.c1, '$.a_obj.a_num_int');
QueryUnsupportedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A131
#-------------------------------------------------------------------------
SELECT json_keys(c1, '$.a_obj.a_array[0]') c
FROM test_json_cols
ORDER BY __time;
+-----------------------------------------------------------------------------------------------------------------------+
| c                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------+
| [a_str, a_num_int, a_num_float, a_bool, a_null, a_empty_obj, a_empty_array, a_empty_obj_nested, a_empty_array_nested] |
| [a_str, a_num_int, a_num_float, a_bool, a_null, a_empty_obj, a_empty_array, a_empty_obj_nested, a_empty_array_nested] |
|                                                                                                                       |
|                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A132
#-------------------------------------------------------------------------
SELECT json_keys(c1, '$.a_obj.a_array[0].a_str') c
FROM test_json_cols
ORDER BY __time;
+---+
| c |
+---+
|   |
|   |
|   |
|   |
+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A133
#-------------------------------------------------------------------------
SELECT json_keys(c1, '$.a_obj.a_array[0].a_num_int') c
FROM test_json_cols
ORDER BY __time;
+---+
| c |
+---+
|   |
|   |
|   |
|   |
+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A134
#-------------------------------------------------------------------------
SELECT json_keys(c1, '$.a_obj') c
FROM test_json_cols
LIMIT 1;
+---------------------------------------------------------------------------------------------------------------------------------------+
| c                                                                                                                                     |
+---------------------------------------------------------------------------------------------------------------------------------------+
| [a_str, a_num_int, a_num_float, a_bool, a_null, a_empty_obj, a_empty_array, a_empty_obj_nested, a_empty_array_nested, a_obj, a_array] |
+---------------------------------------------------------------------------------------------------------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A135
#-------------------------------------------------------------------------
SELECT json_keys(c1, '$.a_obj.a_str') c
FROM test_json_cols
LIMIT 1;
+---+
| c |
+---+
|   |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A136
#-------------------------------------------------------------------------
SELECT json_keys(c1, '$.a_obj.a_num_int') c
FROM test_json_cols
LIMIT 1;
+---+
| c |
+---+
|   |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A137
#-------------------------------------------------------------------------
SELECT json_keys(c1, '$.a_obj') c
FROM test_json_cols
OFFSET 1;
+---------------------------------------------------------------------------------------------------------------------------------------+
| c                                                                                                                                     |
+---------------------------------------------------------------------------------------------------------------------------------------+
| [a_str, a_num_int, a_num_float, a_bool, a_null, a_empty_obj, a_empty_array, a_empty_obj_nested, a_empty_array_nested, a_obj, a_array] |
|                                                                                                                                       |
|                                                                                                                                       |
+---------------------------------------------------------------------------------------------------------------------------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A138
#-------------------------------------------------------------------------
SELECT json_keys(c1, '$.a_obj.a_str') c
FROM test_json_cols
OFFSET 1;
+---+
| c |
+---+
|   |
|   |
|   |
+---+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A139
#-------------------------------------------------------------------------
SELECT json_keys(c1, '$.a_obj.a_num_int') c
FROM test_json_cols
OFFSET 1;
+---+
| c |
+---+
|   |
|   |
|   |
+---+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A140
#-------------------------------------------------------------------------
SELECT json_keys(c1, '$.a_obj.a_array[0]') c
FROM test_json_cols
UNION ALL
SELECT json_keys(c1, '$.a_obj.a_array[0]') c
FROM test_json_cols;
Query could not be planned
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A141
#-------------------------------------------------------------------------
SELECT json_keys(c1, '$.a_obj.a_array[0].a_str') c
FROM test_json_cols
UNION ALL
SELECT json_keys(c1, '$.a_obj.a_array[0].a_str') c
FROM test_json_cols;
Query could not be planned
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A142
#-------------------------------------------------------------------------
SELECT json_keys(c1, '$.a_obj.a_array[0].a_num_int') c
FROM test_json_cols
UNION ALL
SELECT json_keys(c1, '$.a_obj.a_array[0].a_num_int') c
FROM test_json_cols;
Query could not be planned
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A143
#-------------------------------------------------------------------------

SELECT json_keys(c1, '$.a_obj')
FROM test_json_cols;
+---------------------------------------------------------------------------------------------------------------------------------------+
| EXPR$0                                                                                                                                |
+---------------------------------------------------------------------------------------------------------------------------------------+
| [a_str, a_num_int, a_num_float, a_bool, a_null, a_empty_obj, a_empty_array, a_empty_obj_nested, a_empty_array_nested, a_obj, a_array] |
| [a_str, a_num_int, a_num_float, a_bool, a_null, a_empty_obj, a_empty_array, a_empty_obj_nested, a_empty_array_nested, a_obj, a_array] |
|                                                                                                                                       |
|                                                                                                                                       |
+---------------------------------------------------------------------------------------------------------------------------------------+
(4 rows)

!ok

LogicalProject(EXPR$0=[JSON_KEYS($10, '$.a_obj')])
  LogicalTableScan(table=[[druid, test_json_cols]])

!druidPlan

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A144
#-------------------------------------------------------------------------

SELECT json_keys(c1, '$.a_obj.a_str')
FROM test_json_cols;
+--------+
| EXPR$0 |
+--------+
|        |
|        |
|        |
|        |
+--------+
(4 rows)

!ok

LogicalProject(EXPR$0=[JSON_KEYS($10, '$.a_obj.a_str')])
  LogicalTableScan(table=[[druid, test_json_cols]])

!druidPlan

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_keys TEST_ID: A145
#-------------------------------------------------------------------------

SELECT json_keys(c1, '$.a_obj.a_num_int')
FROM test_json_cols;
+--------+
| EXPR$0 |
+--------+
|        |
|        |
|        |
|        |
+--------+
(4 rows)

!ok

LogicalProject(EXPR$0=[JSON_KEYS($10, '$.a_obj.a_num_int')])
  LogicalTableScan(table=[[druid, test_json_cols]])

!druidPlan

