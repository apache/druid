!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardMSQComponentSupplier&datasets=sql/src/test/quidem/qatests/qaJsonCols/funcs_and_sql
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A150
#-------------------------------------------------------------------------
SELECT count(*) c
FROM
  (SELECT ALL json_query(c1, '$.a_array')
   FROM test_json_cols);
+---+
| c |
+---+
| 4 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A151
#-------------------------------------------------------------------------
SELECT count(*) c
FROM
  (SELECT json_query(c1, '$.a_obj.a_str')
   FROM test_json_cols);
+---+
| c |
+---+
| 4 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A152
#-------------------------------------------------------------------------
SELECT count(*) c
FROM
  (SELECT ALL json_query(c1, '$.a_obj.a_num_int')
   FROM test_json_cols);
+---+
| c |
+---+
| 4 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A153
#-------------------------------------------------------------------------
SELECT count(mycol) c
FROM
  (SELECT json_query(c1, '$.a_obj') mycol
   FROM test_json_cols);
+---+
| c |
+---+
| 2 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A154
#-------------------------------------------------------------------------
SELECT count(mycol) c
FROM
  (SELECT json_query(c1, '$.a_obj.a_str') mycol
   FROM test_json_cols);
+---+
| c |
+---+
| 2 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A155
#-------------------------------------------------------------------------
SELECT count(mycol) c
FROM
  (SELECT json_query(c1, '$.a_obj.a_num_int') mycol
   FROM test_json_cols);
+---+
| c |
+---+
| 2 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A156
#-------------------------------------------------------------------------
SELECT count(*) c
FROM
  (SELECT DISTINCT json_query(c1, '$.a_obj') c
   FROM test_json_cols);
+---+
| c |
+---+
| 2 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A157
#-------------------------------------------------------------------------
SELECT DISTINCT json_query(c1, '$.a_obj.a_str') c
FROM test_json_cols;
+-----+
| c   |
+-----+
| "A" |
|     |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A158
#-------------------------------------------------------------------------
SELECT DISTINCT json_query(c1, '$.a_obj.a_num_int') c
FROM test_json_cols;
+---+
| c |
+---+
| 1 |
|   |
+---+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A159
#-------------------------------------------------------------------------
SELECT count(*) c
FROM
  (SELECT json_query(c1, '$.a_obj') mycol
   FROM test_json_cols)
GROUP BY mycol;
+---+
| c |
+---+
| 2 |
| 2 |
+---+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A160
#-------------------------------------------------------------------------
SELECT json_query(c1, '$.a_obj.a_str') mycol
FROM test_json_cols
GROUP BY json_query(c1, '$.a_obj.a_str');
+-------+
| mycol |
+-------+
| "A"   |
|       |
+-------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A161
#-------------------------------------------------------------------------
SELECT json_query(c1, '$.a_obj.a_num_int') mycol
FROM test_json_cols
GROUP BY json_query(c1, '$.a_obj.a_num_int');
+-------+
| mycol |
+-------+
| 1     |
|       |
+-------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A162
#-------------------------------------------------------------------------
SELECT count(*) c
FROM
  (SELECT json_query(c1, '$.a_obj') mycol
   FROM test_json_cols)
GROUP BY mycol
HAVING mycol IS NOT NULL;
+---+
| c |
+---+
| 2 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A163
#-------------------------------------------------------------------------
SELECT mycol,
       count(*) c
FROM
  (SELECT c1,
          json_query(c1, '$.a_str') mycol
   FROM test_json_cols)
GROUP BY mycol
HAVING mycol IS NOT NULL;
+-------+---+
| mycol | c |
+-------+---+
| "A"   | 2 |
+-------+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A164
#-------------------------------------------------------------------------
SELECT mycol,
       count(*) c
FROM
  (SELECT c1,
          json_query(c1, '$.a_num_int') mycol
   FROM test_json_cols)
GROUP BY mycol
HAVING mycol IS NOT NULL;
+-------+---+
| mycol | c |
+-------+---+
| 1     | 2 |
+-------+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A165
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols
WHERE json_query(c1, '$.a_obj') = json_query(c2, '$.a_obj');
+---+
| c |
+---+
| 0 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A166
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols
WHERE json_query(c1, '$.a_obj.a_str') = json_query(c2, '$.a_obj.a_str');
+---+
| c |
+---+
| 0 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A167
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols
WHERE json_query(c1, '$.a_obj.a_num_int') = json_query(c2, '$.a_obj.a_num_int');
+---+
| c |
+---+
| 2 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A168
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1
INNER JOIN test_json_cols t2 ON json_query(t1.c1, '$.a_obj')=json_query(t2.c1, '$.a_obj');
Cannot join
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A169
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1
INNER JOIN test_json_cols t2 ON json_query(t1.c1, '$.a_obj.a_str')=json_query(t2.c1, '$.a_obj.a_str');
Cannot join
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A170
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1
INNER JOIN test_json_cols t2 ON json_query(t1.c1, '$.a_obj.a_num_int')=json_query(t2.c1, '$.a_obj.a_num_int');
Cannot join
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A171
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1
LEFT JOIN test_json_cols t2 ON json_query(t1.c1, '$.a_obj')=json_query(t2.c1, '$.a_obj');
Cannot join
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A172
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1
LEFT JOIN test_json_cols t2 ON json_query(t1.c1, '$.a_obj.a_str')=json_query(t2.c1, '$.a_obj.a_str');
Cannot join
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A173
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1
LEFT JOIN test_json_cols t2 ON json_query(t1.c1, '$.a_obj.a_num_int')=json_query(t2.c1, '$.a_obj.a_num_int');
Cannot join
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A174
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1,
     test_json_cols t2
WHERE json_query(t1.c1, '$.a_obj')=json_query(t2.c1, '$.a_obj');
Cannot join
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A175
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1,
     test_json_cols t2
WHERE json_query(t1.c1, '$.a_obj.a_str')=json_query(t2.c1, '$.a_obj.a_str');
Cannot join
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A176
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1,
     test_json_cols t2
WHERE json_query(t1.c1, '$.a_obj.a_num_int')=json_query(t2.c1, '$.a_obj.a_num_int');
Cannot join
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A177
#-------------------------------------------------------------------------
SELECT json_query(c1, '$.a_obj.a_array[0]') c
FROM test_json_cols
ORDER BY __time;
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| c                                                                                                                                                                                                  |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| {"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]} |
| {"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]} |
|                                                                                                                                                                                                    |
|                                                                                                                                                                                                    |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A178
#-------------------------------------------------------------------------
SELECT json_query(c1, '$.a_obj.a_array[0].a_str') c
FROM test_json_cols
ORDER BY __time;
+-----+
| c   |
+-----+
| "A" |
| "A" |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A179
#-------------------------------------------------------------------------
SELECT json_query(c1, '$.a_obj.a_array[0].a_num_int') c
FROM test_json_cols
ORDER BY __time;
+---+
| c |
+---+
| 1 |
| 1 |
|   |
|   |
+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A180
#-------------------------------------------------------------------------
SELECT json_query(c1, '$.a_obj') c
FROM test_json_cols
LIMIT 1;

| c|
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| {"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null],"a_obj":{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},"a_array":[{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]}]} |

(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A181
#-------------------------------------------------------------------------
SELECT json_query(c1, '$.a_obj.a_str') c
FROM test_json_cols
LIMIT 1;
+-----+
| c   |
+-----+
| "A" |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A182
#-------------------------------------------------------------------------
SELECT json_query(c1, '$.a_obj.a_num_int') c
FROM test_json_cols
LIMIT 1;
+---+
| c |
+---+
| 1 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A183
#-------------------------------------------------------------------------
SELECT json_query(c1, '$.a_obj') c
FROM test_json_cols
OFFSET 1;

| c|

| {"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null],"a_obj":{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},"a_array":[{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]}]} |
||
||

(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A184
#-------------------------------------------------------------------------
SELECT json_query(c1, '$.a_obj.a_str') c
FROM test_json_cols
OFFSET 1;
+-----+
| c   |
+-----+
| "A" |
|     |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A185
#-------------------------------------------------------------------------
SELECT json_query(c1, '$.a_obj.a_num_int') c
FROM test_json_cols
OFFSET 1;
+---+
| c |
+---+
| 1 |
|   |
|   |
+---+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A186
#-------------------------------------------------------------------------
SELECT json_query(c1, '$.a_obj.a_array[0]') c
FROM test_json_cols
UNION ALL
SELECT json_query(c1, '$.a_obj.a_array[0]') c
FROM test_json_cols;
Query could not be planned
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A187
#-------------------------------------------------------------------------
SELECT json_query(c1, '$.a_obj.a_array[0].a_str') c
FROM test_json_cols
UNION ALL
SELECT json_query(c1, '$.a_obj.a_array[0].a_str') c
FROM test_json_cols;
Query could not be planned
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A188
#-------------------------------------------------------------------------
SELECT json_query(c1, '$.a_obj.a_array[0].a_num_int') c
FROM test_json_cols
UNION ALL
SELECT json_query(c1, '$.a_obj.a_array[0].a_num_int') c
FROM test_json_cols;
Query could not be planned
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A189
#-------------------------------------------------------------------------

SELECT json_query(c1, '$.a_obj')
FROM test_json_cols;

||
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| {"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null],"a_obj":{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},"a_array":[{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]}]} |
| {"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null],"a_obj":{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},"a_array":[{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]}]} |
||
||

(4 rows)

!ok

[ {
  "stageNumber" : 0,
  "definition" : {
    "id" : "<taskId>_0",
    "input" : [ {
      "type" : "table",
      "dataSource" : "test_json_cols",
      "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
    } ],
    "processor" : {
      "type" : "scan",
      "query" : {
        "queryType" : "scan",
        "dataSource" : {
          "type" : "inputNumber",
          "inputNumber" : 0
        },
        "intervals" : {
          "type" : "intervals",
          "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
        },
        "virtualColumns" : [ {
          "type" : "nested-field",
          "columnName" : "c1",
          "outputName" : "v0",
          "expectedType" : "COMPLEX<json>",
          "pathParts" : [ {
            "type" : "field",
            "field" : "a_obj"
          } ],
          "processFromRaw" : true
        } ],
        "resultFormat" : "compactedList",
        "columns" : [ "v0" ],
        "context" : {
          "__user" : null,
          "finalize" : true,
          "maxParseExceptions" : 0,
          "scanSignature" : "[{\"name\":\"v0\",\"type\":\"COMPLEX<json>\"}]",
          "sqlQueryId" : __SQL_QUERY_ID__
          "sqlStringifyArrays" : false,
          "useApproximateCountDistinct" : "false",
          "windowFunctionOperatorTransformation" : true
        },
        "columnTypes" : [ "COMPLEX<json>" ],
        "granularity" : {
          "type" : "all"
        },
        "legacy" : false
      }
    },
    "signature" : [ {
      "name" : "__boost",
      "type" : "LONG"
    }, {
      "name" : "v0",
      "type" : "COMPLEX<json>"
    } ],
    "shuffleSpec" : {
      "type" : "maxCount",
      "clusterBy" : {
        "columns" : [ {
          "columnName" : "__boost",
          "order" : "ASCENDING"
        } ]
      },
      "partitions" : 1
    },
    "maxWorkerCount" : 1
  },
  "phase" : "FINISHED",
  "workerCount" : 1,
  "partitionCount" : 1,
  "shuffle" : "globalSort",
  "output" : "localStorage",
  "startTime" : __TIMESTAMP__
  "duration" : __DURATION__
  "sort" : true
} ]
!msqPlan

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A190
#-------------------------------------------------------------------------

SELECT json_query(c1, '$.a_obj.a_str')
FROM test_json_cols;
+--------+
| EXPR$0 |
+--------+
| "A"    |
| "A"    |
|        |
|        |
+--------+
(4 rows)

!ok

[ {
  "stageNumber" : 0,
  "definition" : {
    "id" : "<taskId>_0",
    "input" : [ {
      "type" : "table",
      "dataSource" : "test_json_cols",
      "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
    } ],
    "processor" : {
      "type" : "scan",
      "query" : {
        "queryType" : "scan",
        "dataSource" : {
          "type" : "inputNumber",
          "inputNumber" : 0
        },
        "intervals" : {
          "type" : "intervals",
          "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
        },
        "virtualColumns" : [ {
          "type" : "nested-field",
          "columnName" : "c1",
          "outputName" : "v0",
          "expectedType" : "COMPLEX<json>",
          "pathParts" : [ {
            "type" : "field",
            "field" : "a_obj"
          }, {
            "type" : "field",
            "field" : "a_str"
          } ],
          "processFromRaw" : true
        } ],
        "resultFormat" : "compactedList",
        "columns" : [ "v0" ],
        "context" : {
          "__user" : null,
          "finalize" : true,
          "maxParseExceptions" : 0,
          "scanSignature" : "[{\"name\":\"v0\",\"type\":\"COMPLEX<json>\"}]",
          "sqlQueryId" : __SQL_QUERY_ID__
          "sqlStringifyArrays" : false,
          "useApproximateCountDistinct" : "false",
          "windowFunctionOperatorTransformation" : true
        },
        "columnTypes" : [ "COMPLEX<json>" ],
        "granularity" : {
          "type" : "all"
        },
        "legacy" : false
      }
    },
    "signature" : [ {
      "name" : "__boost",
      "type" : "LONG"
    }, {
      "name" : "v0",
      "type" : "COMPLEX<json>"
    } ],
    "shuffleSpec" : {
      "type" : "maxCount",
      "clusterBy" : {
        "columns" : [ {
          "columnName" : "__boost",
          "order" : "ASCENDING"
        } ]
      },
      "partitions" : 1
    },
    "maxWorkerCount" : 1
  },
  "phase" : "FINISHED",
  "workerCount" : 1,
  "partitionCount" : 1,
  "shuffle" : "globalSort",
  "output" : "localStorage",
  "startTime" : __TIMESTAMP__
  "duration" : __DURATION__
  "sort" : true
} ]
!msqPlan

#-------------------------------------------------------------------------
# TESTCASE: test_func_json_query TEST_ID: A191
#-------------------------------------------------------------------------

SELECT json_query(c1, '$.a_obj.a_num_int')
FROM test_json_cols;
+--------+
| EXPR$0 |
+--------+
| 1      |
| 1      |
|        |
|        |
+--------+
(4 rows)

!ok

[ {
  "stageNumber" : 0,
  "definition" : {
    "id" : "<taskId>_0",
    "input" : [ {
      "type" : "table",
      "dataSource" : "test_json_cols",
      "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
    } ],
    "processor" : {
      "type" : "scan",
      "query" : {
        "queryType" : "scan",
        "dataSource" : {
          "type" : "inputNumber",
          "inputNumber" : 0
        },
        "intervals" : {
          "type" : "intervals",
          "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
        },
        "virtualColumns" : [ {
          "type" : "nested-field",
          "columnName" : "c1",
          "outputName" : "v0",
          "expectedType" : "COMPLEX<json>",
          "pathParts" : [ {
            "type" : "field",
            "field" : "a_obj"
          }, {
            "type" : "field",
            "field" : "a_num_int"
          } ],
          "processFromRaw" : true
        } ],
        "resultFormat" : "compactedList",
        "columns" : [ "v0" ],
        "context" : {
          "__user" : null,
          "finalize" : true,
          "maxParseExceptions" : 0,
          "scanSignature" : "[{\"name\":\"v0\",\"type\":\"COMPLEX<json>\"}]",
          "sqlQueryId" : __SQL_QUERY_ID__
          "sqlStringifyArrays" : false,
          "useApproximateCountDistinct" : "false",
          "windowFunctionOperatorTransformation" : true
        },
        "columnTypes" : [ "COMPLEX<json>" ],
        "granularity" : {
          "type" : "all"
        },
        "legacy" : false
      }
    },
    "signature" : [ {
      "name" : "__boost",
      "type" : "LONG"
    }, {
      "name" : "v0",
      "type" : "COMPLEX<json>"
    } ],
    "shuffleSpec" : {
      "type" : "maxCount",
      "clusterBy" : {
        "columns" : [ {
          "columnName" : "__boost",
          "order" : "ASCENDING"
        } ]
      },
      "partitions" : 1
    },
    "maxWorkerCount" : 1
  },
  "phase" : "FINISHED",
  "workerCount" : 1,
  "partitionCount" : 1,
  "shuffle" : "globalSort",
  "output" : "localStorage",
  "startTime" : __TIMESTAMP__
  "duration" : __DURATION__
  "sort" : true
} ]
!msqPlan

