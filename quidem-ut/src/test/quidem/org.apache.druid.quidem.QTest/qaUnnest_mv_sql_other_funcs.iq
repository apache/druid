!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/mv&numMergeBuffers=3
!set outputformat mysql
SELECT *
FROM test_unnest;
+-------------------------+-------+--------+---------+----------+------------------------------------------------+------------------------+--------------------------------------+----------------------------------+--------------------------------------+----------------------------------+-----------------------------+
| __time                  | c_str | c_long | c_float | c_double | c_mv_complex                                   | c_mv_num               | c_mv_complex_with_null_and_empty_val | c_mv_num_with_null_and_empty_val | c_mv_complex_with_null_and_empty_row | c_mv_num_with_null_and_empty_row | c_mv_all_null_and_empty_val |
+-------------------------+-------+--------+---------+----------+------------------------------------------------+------------------------+--------------------------------------+----------------------------------+--------------------------------------+----------------------------------+-----------------------------+
| 2022-01-01 00:00:00.000 |       |      1 |     0.1 |      0.1 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            |                                      |                                  | [null,"",null,"",null]      |
| 2022-01-01 00:00:00.000 | str2  |      2 |     0.2 |      0.2 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      |
| 2022-01-01 00:00:00.000 | str3  |      3 |     0.3 |      0.3 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      |
| 2022-01-01 00:00:00.000 | str4  |      4 |     0.4 |      0.4 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      |
| 2022-01-01 00:00:00.000 |       |      0 |     0.0 |      0.0 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            |                                      |                                  | [null,"",null,"",null]      |
+-------------------------+-------+--------+---------+----------+------------------------------------------------+------------------------+--------------------------------------+----------------------------------+--------------------------------------+----------------------------------+-----------------------------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----+
| col |
+-----+
|  15 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+
| col |
+-----+
|   5 |
|   5 |
|   5 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING count(*) IN (3,
                    6);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING count(*) IN (5);
+-----+
| col |
+-----+
|   5 |
|   5 |
|   5 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----+
| col |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+
| col |
+-----+
|   4 |
|   4 |
|   4 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING count(DISTINCT c) IN (0,
                             1);
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING count(DISTINCT c) IN (3,
                             4);
+-----+
| col |
+-----+
|   4 |
|   4 |
|   4 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING count(DISTINCT c_long) IN (3);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING count(DISTINCT c_long) IN (1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+------+
| col  |
+------+
| 18.0 |
+------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----+
| col |
+-----+
|  15 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----+
| col |
+-----+
| 3.0 |
| 6.0 |
| 9.0 |
|     |
|     |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+
| col |
+-----+
| 6.0 |
| 6.0 |
| 6.0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+
| col |
+-----+
|   0 |
|  10 |
|   5 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING sum(c) IN (0,
                  3,
                  6,
                  9);
+-----+
| col |
+-----+
| 3.0 |
| 6.0 |
| 9.0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING sum(c) IN (6);
+-----+
| col |
+-----+
| 6.0 |
| 6.0 |
| 6.0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING sum(c_long) IN (3,
                       6);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING sum(c_long) IN (0,
                       5,
                       10);
+-----+
| col |
+-----+
|   0 |
|  10 |
|   5 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+
| col |
+-----+
|   0 |
|   1 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C7 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING min(c) IN (0,
                  1,
                  2);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C8 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING min(c) IN (0,
                  1,
                  2);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING min(c_long) IN (0);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING min(c_long) IN (0,
                       1,
                       2);
+-----+
| col |
+-----+
|   0 |
|   1 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   2 |
|   2 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+
| col |
+-----+
|   0 |
|   1 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C7 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING max(c) IN (0,
                  1,
                  2);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C8 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING max(c) IN (0,
                  1,
                  2);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING max(c_long) IN (2);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   2 |
|   2 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING max(c_long) IN (0,
                       1,
                       2);
+-----+
| col |
+-----+
|   0 |
|   1 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT avg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----+
| col |
+-----+
| 2.0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT avg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----+
| col |
+-----+
| 1.0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT avg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----+
| col |
+-----+
| 1.0 |
| 2.0 |
| 3.0 |
|     |
|     |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT avg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT avg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----+
| col |
+-----+
| 1.0 |
| 1.0 |
| 1.0 |
| 1.0 |
| 1.0 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT avg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+
| col |
+-----+
| 0.0 |
| 1.0 |
| 2.0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT avg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING avg(c) IS NULL
OR cast(avg(c) AS char) IN ('NaN',
                            '1.0',
                            '2.0',
                            '3.0');
+-----+
| col |
+-----+
| 1.0 |
| 2.0 |
| 3.0 |
|     |
|     |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT avg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING avg(c) IN (2.0,
                  1.2);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT avg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING avg(c_long) IN (1);
+-----+
| col |
+-----+
| 1.0 |
| 1.0 |
| 1.0 |
| 1.0 |
| 1.0 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT avg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING avg(c_long) IN (0,
                       1,
                       2);
+-----+
| col |
+-----+
| 0.0 |
| 1.0 |
| 2.0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING approx_count_distinct(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING approx_count_distinct(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING approx_count_distinct(c_long) IS NOT NULL);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING approx_count_distinct(c_long) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING approx_count_distinct_builtin(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING approx_count_distinct_builtin(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING approx_count_distinct_builtin(c_long) IS NOT NULL);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING approx_count_distinct_builtin(c_long) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(cast(c AS int)) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(cast(c AS int)) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(cast(c AS int)) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(cast(c AS int)) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING earliest(cast(c AS int)) IS NOT NULL);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(cast(c AS int)) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING earliest(cast(c AS int)) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING earliest(c_long) IS NOT NULL);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING earliest(c_long) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(cast(c_long AS char), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(cast(c_long AS char), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(cast(c_long AS char), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING earliest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING earliest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(cast(c_long AS char), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING earliest(cast(c_long AS char), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(cast(c_long AS char), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING earliest(cast(c_long AS char), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(cast(c AS int), time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c_long, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(cast(c AS int), time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(cast(c AS int), time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c_long, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c_long, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(cast(c AS int), time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING earliest_by(cast(c AS int), time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(cast(c AS int), time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING earliest_by(cast(c AS int), time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c_long, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING earliest_by(c_long, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c_long, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING earliest_by(c_long, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING earliest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING earliest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING earliest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING earliest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(cast(c AS int)) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(cast(c AS int)) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(cast(c AS int)) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(cast(c AS int)) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING latest(cast(c AS int)) IS NOT NULL);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(cast(c AS int)) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING latest(cast(c AS int)) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING latest(c_long) IS NOT NULL);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING latest(c_long) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(cast(c_long AS char), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(cast(c_long AS char), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(cast(c_long AS char), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING latest(c, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING latest(c, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(cast(c_long AS char), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING latest(cast(c_long AS char), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(cast(c_long AS char), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING latest(cast(c_long AS char), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(cast(c AS int), time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c_long, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(cast(c AS int), time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(cast(c AS int), time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c_long, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c_long, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(cast(c AS int), time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING latest_by(cast(c AS int), time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(cast(c AS int), time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING latest_by(cast(c AS int), time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c_long, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING latest_by(c_long, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c_long, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING latest_by(c_long, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING latest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING latest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING latest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING latest_by(cast(c_long AS char), time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2));
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING any_value(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING any_value(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c
   HAVING any_value(c_long) IS NOT NULL);
+-----+
| cnt |
+-----+
|   5 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
   GROUP BY c_long
   HAVING any_value(c_long) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c_long col,
       count(*) cnt,
       grouping(c_long) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|     |   3 |  0 |
| 1   |   3 |  0 |
| 2   |   3 |  0 |
| 3   |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C5 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c_long col,
       count(*) cnt,
       grouping(c_long) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long col,
       count(*) cnt,
       grouping(c_long) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   0 |   5 |  0 |
|   1 |   5 |  0 |
|   2 |   5 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING grouping(c) IS NOT NULL;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|     |   3 |  0 |
| 1   |   3 |  0 |
| 2   |   3 |  0 |
| 3   |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C8 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING grouping(c) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C9 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c_long col,
       count(*) cnt,
       grouping(c_long) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING grouping(c_long) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c_long col,
       count(*) cnt,
       grouping(c_long) gp
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING grouping(c_long) IS NOT NULL;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   0 |   5 |  0 |
|   1 |   5 |  0 |
|   2 |   5 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----------------------------------------------------+
| col                                                 |
+-----------------------------------------------------+
| [null, , 1, 2, 3, null, , 1, 2, 3, null, , 1, 2, 3] |
+-----------------------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----------------------------------------------+
| col                                           |
+-----------------------------------------------+
| [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2] |
+-----------------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+--------------------+
| col                |
+--------------------+
| [, , ]             |
| [1, 1, 1]          |
| [2, 2, 2]          |
| [3, 3, 3]          |
| [null, null, null] |
+--------------------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-------------------+
| col               |
+-------------------+
| [null, , 1, 2, 3] |
| [null, , 1, 2, 3] |
| [null, , 1, 2, 3] |
+-------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----------------+
| col             |
+-----------------+
| [0, 0, 0, 0, 0] |
| [1, 1, 1, 1, 1] |
| [2, 2, 2, 2, 2] |
+-----------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING array_agg(c) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [, , ]             |
| [1, 1, 1]          |
| [2, 2, 2]          |
| [3, 3, 3]          |
| [null, null, null] |
+--------------------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING array_agg(c) IS NOT NULL;
+-------------------+
| col               |
+-------------------+
| [null, , 1, 2, 3] |
| [null, , 1, 2, 3] |
| [null, , 1, 2, 3] |
+-------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING array_agg(c_long) IS NOT NULL;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING array_agg(c_long) IS NOT NULL;
+-----------------+
| col             |
+-----------------+
| [0, 0, 0, 0, 0] |
| [1, 1, 1, 1, 1] |
| [2, 2, 2, 2, 2] |
+-----------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-------------------+
| col               |
+-------------------+
| [null, , 1, 2, 3] |
+-------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
+-----------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [3]    |
| []     |
| [null] |
+--------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-------------------+
| col               |
+-------------------+
| [null, , 1, 2, 3] |
| [null, , 1, 2, 3] |
| [null, , 1, 2, 3] |
+-------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+
| col |
+-----+
| [0] |
| [1] |
| [2] |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING array_agg(DISTINCT c) IS NOT NULL;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [3]    |
| []     |
| [null] |
+--------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING array_agg(DISTINCT c) IS NOT NULL;
+-------------------+
| col               |
+-------------------+
| [null, , 1, 2, 3] |
| [null, , 1, 2, 3] |
| [null, , 1, 2, 3] |
+-------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING array_agg(DISTINCT c_long) IS NOT NULL;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING array_agg(DISTINCT c_long) IS NOT NULL;
+-----+
| col |
+-----+
| [0] |
| [1] |
| [2] |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C5 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C6 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C7 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING array_concat_agg(c) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C8 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING array_concat_agg(c) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C9 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING array_concat_agg(c_long) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C10 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING array_concat_agg(c_long) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C5 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C6 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C7 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING array_concat_agg(DISTINCT c) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C8 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING array_concat_agg(DISTINCT c) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C9 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING array_concat_agg(DISTINCT c_long) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C10 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING array_concat_agg(DISTINCT c_long) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+----------------------+
| col                  |
+----------------------+
| |1|2|3||1|2|3||1|2|3 |
+----------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c_long, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-------------------------------+
| col                           |
+-------------------------------+
| 0|0|0|0|0|1|1|1|1|1|2|2|2|2|2 |
+-------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
| 3|3|3 |
| ||    |
|       |
+-------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+--------+
| col    |
+--------+
| |1|2|3 |
| |1|2|3 |
| |1|2|3 |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c_long, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-------+
| col   |
+-------+
| 0|1|2 |
| 0|1|2 |
| 0|1|2 |
| 0|1|2 |
| 0|1|2 |
+-------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c_long, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----------+
| col       |
+-----------+
| 0|0|0|0|0 |
| 1|1|1|1|1 |
| 2|2|2|2|2 |
+-----------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING string_agg(c, '|') IS NOT NULL;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
| 3|3|3 |
| ||    |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING string_agg(c, '|') IS NOT NULL;
+--------+
| col    |
+--------+
| |1|2|3 |
| |1|2|3 |
| |1|2|3 |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c_long, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING string_agg(c_long, '|') IS NOT NULL;
+-------+
| col   |
+-------+
| 0|1|2 |
| 0|1|2 |
| 0|1|2 |
| 0|1|2 |
| 0|1|2 |
+-------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c_long, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING string_agg(c_long, '|') IS NOT NULL;
+-----------+
| col       |
+-----------+
| 0|0|0|0|0 |
| 1|1|1|1|1 |
| 2|2|2|2|2 |
+-----------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+--------+
| col    |
+--------+
| |1|2|3 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c_long, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-------+
| col   |
+-------+
| 0|1|2 |
+-------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----+
| col |
+-----+
|     |
| 1   |
| 2   |
| 3   |
|     |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+--------+
| col    |
+--------+
| |1|2|3 |
| |1|2|3 |
| |1|2|3 |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c_long, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-------+
| col   |
+-------+
| 0|1|2 |
| 0|1|2 |
| 0|1|2 |
| 0|1|2 |
| 0|1|2 |
+-------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c_long, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+
| col |
+-----+
| 0   |
| 1   |
| 2   |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING string_agg(DISTINCT c, '|') IS NOT NULL;
+-----+
| col |
+-----+
|     |
| 1   |
| 2   |
| 3   |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING string_agg(DISTINCT c, '|') IS NOT NULL;
+--------+
| col    |
+--------+
| |1|2|3 |
| |1|2|3 |
| |1|2|3 |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c_long, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING string_agg(DISTINCT c_long, '|') IS NOT NULL;
+-------+
| col   |
+-------+
| 0|1|2 |
| 0|1|2 |
| 0|1|2 |
| 0|1|2 |
| 0|1|2 |
+-------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c_long, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING string_agg(DISTINCT c_long, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 0   |
| 1   |
| 2   |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|     |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING bit_and(c) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING bit_and(c) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING bit_and(c_long) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING bit_and(c_long) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----+
| col |
+-----+
|   0 |
|   1 |
|   2 |
|   3 |
|     |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+
| col |
+-----+
|   0 |
|   1 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING bit_or(c) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   1 |
|   2 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING bit_or(c) IS NOT NULL;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING bit_or(c_long) IS NOT NULL;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING bit_or(c_long) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   1 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----+
| col |
+-----+
|   0 |
|   1 |
|   2 |
|   3 |
|     |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long;
+-----+
| col |
+-----+
|   0 |
|   1 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING bit_xor(c) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   1 |
|   2 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING bit_xor(c) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c
HAVING bit_xor(c_long) IS NOT NULL;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
GROUP BY c_long
HAVING bit_xor(c_long) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   1 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array['1',
             '2',
             '3'] AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+-----------+
| col       |
+-----------+
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
+-----------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[c,
             c,
             '3'] AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array[c,
            c,
            '3'] IS NOT NULL;
+-----------------+
| col             |
+-----------------+
| [, , 3]         |
| [, , 3]         |
| [, , 3]         |
| [1, 1, 3]       |
| [1, 1, 3]       |
| [1, 1, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [3, 3, 3]       |
| [3, 3, 3]       |
| [3, 3, 3]       |
| [null, null, 3] |
| [null, null, 3] |
| [null, null, 3] |
+-----------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[c,
             cast(c_long AS char),
             '3'] AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array[c,
            cast(c_long AS char),
            '3'] IS NOT NULL;
+--------------+
| col          |
+--------------+
| [, 0, 3]     |
| [, 1, 3]     |
| [, 2, 3]     |
| [1, 0, 3]    |
| [1, 1, 3]    |
| [1, 2, 3]    |
| [2, 0, 3]    |
| [2, 1, 3]    |
| [2, 2, 3]    |
| [3, 0, 3]    |
| [3, 1, 3]    |
| [3, 2, 3]    |
| [null, 0, 3] |
| [null, 1, 3] |
| [null, 2, 3] |
+--------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[cast(c_long AS char),
             c,
             '3'] AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array[cast(c_long AS char),
            c,
            '3'] IS NOT NULL;
+--------------+
| col          |
+--------------+
| [0, , 3]     |
| [0, 1, 3]    |
| [0, 2, 3]    |
| [0, 3, 3]    |
| [0, null, 3] |
| [1, , 3]     |
| [1, 1, 3]    |
| [1, 2, 3]    |
| [1, 3, 3]    |
| [1, null, 3] |
| [2, , 3]     |
| [2, 1, 3]    |
| [2, 2, 3]    |
| [2, 3, 3]    |
| [2, null, 3] |
+--------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[cast(c_long AS char),
             cast(c_long AS char),
             '3'] AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array[cast(c_long AS char),
            cast(c_long AS char),
            '3'] IS NOT NULL;
+-----------+
| col       |
+-----------+
| [0, 0, 3] |
| [0, 0, 3] |
| [0, 0, 3] |
| [0, 0, 3] |
| [0, 0, 3] |
| [1, 1, 3] |
| [1, 1, 3] |
| [1, 1, 3] |
| [1, 1, 3] |
| [1, 1, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
+-----------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (array_length(c) IS NULL
       OR array_length(c) IN (1));
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array_length(c_long) IN (1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(c, 0) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array_offset(c, 0)<>'ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(c_long, 0) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array_offset(c_long, 0)<>'ABCD';
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(c, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array_ordinal(c, 1)<>'ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(c_long, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array_ordinal(c_long, 1)<>'ABCD';
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(c, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (array_contains(c, '1') IS NULL
       OR array_contains(c, '1') IS TRUE
       OR array_contains(c, '1') IS FALSE);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
|       |
|       |
|       |
+-------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(c_long, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (array_contains(c_long, '1') IS NULL
       OR array_contains(c_long, '1') IS TRUE
       OR array_contains(c_long, '1') IS FALSE);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(c, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (array_overlap(c, c) IS NULL
       OR array_overlap(c, c) IS TRUE
       OR array_overlap(c, c) IS FALSE);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
|      |
|      |
|      |
+------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(c, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (array_overlap(c, c_long) IS NULL
       OR array_overlap(c, c_long) IS TRUE
       OR array_overlap(c, c_long) IS FALSE);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(c_long, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (array_overlap(c_long, c) IS NULL
       OR array_overlap(c_long, c) IS TRUE
       OR array_overlap(c_long, c) IS FALSE);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(c_long, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (array_overlap(c_long, c_long) IS NULL
       OR array_overlap(c_long, c_long) IS TRUE
       OR array_overlap(c_long, c_long) IS FALSE);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(c, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (array_offset_of(c, '1') IS NULL
       OR array_offset_of(c, '1') IN (0,
                                      -1));
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(c_long, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array_offset_of(c_long, '1') <>'ABCD';
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (array_ordinal_of(c, '1') IS NULL
       OR array_ordinal_of(c, '1') IN (1,
                                       -1));
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c_long, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array_ordinal_of(c_long, '1') <>'ABCD';
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(c, 'Z') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array_contains(array_prepend(c, 'Z'), 'Z') IS TRUE;
+-----------+
| col       |
+-----------+
| [, Z]     |
| [, Z]     |
| [, Z]     |
| [1, Z]    |
| [1, Z]    |
| [1, Z]    |
| [2, Z]    |
| [2, Z]    |
| [2, Z]    |
| [3, Z]    |
| [3, Z]    |
| [3, Z]    |
| [null, Z] |
| [null, Z] |
| [null, Z] |
+-----------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(c_long, 'Z') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array_contains(array_prepend(c_long, 'Z'), 'Z') IS TRUE;
+--------+
| col    |
+--------+
| [0, Z] |
| [0, Z] |
| [0, Z] |
| [0, Z] |
| [0, Z] |
| [1, Z] |
| [1, Z] |
| [1, Z] |
| [1, Z] |
| [1, Z] |
| [2, Z] |
| [2, Z] |
| [2, Z] |
| [2, Z] |
| [2, Z] |
+--------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append('Z', c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array_contains(array_append('Z', c), 'Z') IS TRUE;
+-----------+
| col       |
+-----------+
| [Z, 1]    |
| [Z, 1]    |
| [Z, 1]    |
| [Z, 2]    |
| [Z, 2]    |
| [Z, 2]    |
| [Z, 3]    |
| [Z, 3]    |
| [Z, 3]    |
| [Z, ]     |
| [Z, ]     |
| [Z, ]     |
| [Z, null] |
| [Z, null] |
| [Z, null] |
+-----------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append('Z', c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array_contains(array_append('Z', c_long), 'Z') IS TRUE;
+--------+
| col    |
+--------+
| [Z, 0] |
| [Z, 0] |
| [Z, 0] |
| [Z, 0] |
| [Z, 0] |
| [Z, 1] |
| [Z, 1] |
| [Z, 1] |
| [Z, 1] |
| [Z, 1] |
| [Z, 2] |
| [Z, 2] |
| [Z, 2] |
| [Z, 2] |
| [Z, 2] |
+--------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(c, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (array_concat(c, c) IS NULL
       OR array_concat(c, c) IS NOT NULL);
+--------+
| col    |
+--------+
| [, ]   |
| [, ]   |
| [, ]   |
| [1, 1] |
| [1, 1] |
| [1, 1] |
| [2, 2] |
| [2, 2] |
| [2, 2] |
| [3, 3] |
| [3, 3] |
| [3, 3] |
|        |
|        |
|        |
+--------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(c, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (array_concat(c, c_long) IS NULL
       OR array_concat(c, c_long) IS NOT NULL);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(c_long, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (array_concat(c_long, c) IS NULL
       OR array_concat(c_long, c) IS NOT NULL);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(c_long, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (array_concat(c_long, c_long) IS NULL
       OR array_concat(c_long, c_long) IS NOT NULL);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(c, 0, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (array_slice(c, 0, 1) IS NULL
       OR array_slice(c, 0, 1) IS NOT NULL);
+-----+
| col |
+-----+
| [1] |
| [1] |
| [1] |
| [2] |
| [2] |
| [2] |
| [3] |
| [3] |
| [3] |
| []  |
| []  |
| []  |
|     |
|     |
|     |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(c_long, 0, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array_slice(c_long, 0, 1)<>'ABCD';
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(c, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array_to_string(c, '|') IN ('',
                                  '1',
                                  '2',
                                  '3');
+-----+
| col |
+-----+
|     |
|     |
|     |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(c_long, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array_to_string(c_long, '|')<>'ABCD';
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(c, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (string_to_array(c, '|') IS NULL
       OR string_to_array(c, '|') IS NOT NULL);
+-----+
| col |
+-----+
| [1] |
| [1] |
| [1] |
| [2] |
| [2] |
| [2] |
| [3] |
| [3] |
| [3] |
| []  |
| []  |
| []  |
|     |
|     |
|     |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(c_long, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (string_to_array(c_long, '|') IS NULL
       OR string_to_array(c_long, '|') IS NOT NULL);
+-----+
| col |
+-----+
| [0] |
| [0] |
| [0] |
| [0] |
| [0] |
| [1] |
| [1] |
| [1] |
| [1] |
| [1] |
| [2] |
| [2] |
| [2] |
| [2] |
| [2] |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array_to_mv(c) IN ('',
                         '1',
                         '2',
                         '3');
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND array_to_mv(c_long)<>'ABCD';
+-----+
| col |
+-----+
+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(c,array['1', '2', '3']) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_filter_only(c,array['1', '2', '3']) IN ('',
                                                 '1',
                                                 '2',
                                                 '3');
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(c, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_filter_only(c, c) IN ('',
                               '1',
                               '2',
                               '3');
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(c, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_filter_only(c, c_long) IN ('',
                                    '1',
                                    '2',
                                    '3');
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(c_long, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_filter_only(c_long, c) IN ('',
                                    '1',
                                    '2',
                                    '3');
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C5 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(c_long, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_filter_only(c_long, c_long) IN ('',
                                         '1',
                                         '2',
                                         '3');
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(c,array['1', '2', '3']) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_filter_none(c,array['1', '2', '3']) IN ('',
                                                 '1',
                                                 '2',
                                                 '3');
+-----+
| col |
+-----+
+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(c, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_filter_none(c, c) IN ('',
                               '1',
                               '2',
                               '3');
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(c, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_filter_none(c, c_long) IN ('',
                                    '1',
                                    '2',
                                    '3');
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(c_long, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_filter_none(c_long, c) IN ('',
                                    '1',
                                    '2',
                                    '3');
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C5 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(c_long, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_filter_none(c_long, c_long) IN ('',
                                         '1',
                                         '2',
                                         '3');
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (mv_length(c) IS NULL
       OR mv_length(c) IN (1));
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_length(c_long) IN (1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(c, 0) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_offset(c, 0)<>'ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(c_long, 0) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_offset(c_long, 0)<>'ABCD';
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(c, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_ordinal(c, 1)<>'ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(c_long, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_ordinal(c_long, 1)<>'ABCD';
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(c, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (mv_contains(c, '1') IS NULL
       OR mv_contains(c, '1') IS TRUE
       OR mv_contains(c, '1') IS FALSE);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
+-------+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(c_long, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (mv_contains(c_long, '1') IS NULL
       OR mv_contains(c_long, '1') IS TRUE
       OR mv_contains(c_long, '1') IS FALSE);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(c, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (mv_overlap(c, c) IS NULL
       OR mv_overlap(c, c) IS TRUE
       OR mv_overlap(c, c) IS FALSE);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| true  |
| true  |
| true  |
| true  |
| true  |
| true  |
| true  |
| true  |
| true  |
| true  |
| true  |
| true  |
+-------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(c, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (mv_overlap(c, c_long) IS NULL
       OR mv_overlap(c, c_long) IS TRUE
       OR mv_overlap(c, c_long) IS FALSE);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
+-------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(c_long, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (mv_overlap(c_long, c) IS NULL
       OR mv_overlap(c_long, c) IS TRUE
       OR mv_overlap(c_long, c) IS FALSE);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(c_long, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (mv_overlap(c_long, c_long) IS NULL
       OR mv_overlap(c_long, c_long) IS TRUE
       OR mv_overlap(c_long, c_long) IS FALSE);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(c, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (mv_offset_of(c, '1') IS NULL
       OR mv_offset_of(c, '1') IN (0,
                                   -1));
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(c_long, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_offset_of(c_long, '1') <>'ABCD';
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(c, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (mv_ordinal_of(c, '1') IS NULL
       OR mv_ordinal_of(c, '1') IN (1,
                                    -1));
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(c_long, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_ordinal_of(c_long, '1') <>'ABCD';
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend(c, 'Z') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_contains(mv_prepend(c, 'Z'), 'Z') IS TRUE;
+------------+
| col        |
+------------+
| ["","Z"]   |
| ["","Z"]   |
| ["","Z"]   |
| ["1","Z"]  |
| ["1","Z"]  |
| ["1","Z"]  |
| ["2","Z"]  |
| ["2","Z"]  |
| ["2","Z"]  |
| ["3","Z"]  |
| ["3","Z"]  |
| ["3","Z"]  |
| [null,"Z"] |
| [null,"Z"] |
| [null,"Z"] |
+------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend(c_long, 'Z') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_contains(mv_prepend(c_long, 'Z'), 'Z') IS TRUE;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append('Z', c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_contains(mv_append('Z', c), 'Z') IS TRUE;
+------------+
| col        |
+------------+
| ["Z",""]   |
| ["Z",""]   |
| ["Z",""]   |
| ["Z","1"]  |
| ["Z","1"]  |
| ["Z","1"]  |
| ["Z","2"]  |
| ["Z","2"]  |
| ["Z","2"]  |
| ["Z","3"]  |
| ["Z","3"]  |
| ["Z","3"]  |
| ["Z",null] |
| ["Z",null] |
| ["Z",null] |
+------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append('Z', c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_contains(mv_append('Z', c_long), 'Z') IS TRUE;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(c, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (mv_concat(c, c) IS NULL
       OR mv_concat(c, c) IS NOT NULL);
+-----------+
| col       |
+-----------+
| ["",""]   |
| ["",""]   |
| ["",""]   |
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
| ["3","3"] |
| ["3","3"] |
| ["3","3"] |
|           |
|           |
|           |
+-----------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(c, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (mv_concat(c, c_long) IS NULL
       OR mv_concat(c, c_long) IS NOT NULL);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(c_long, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (mv_concat(c_long, c) IS NULL
       OR mv_concat(c_long, c) IS NOT NULL);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(c_long, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (mv_concat(c_long, c_long) IS NULL
       OR mv_concat(c_long, c_long) IS NOT NULL);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(c, 0, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (mv_slice(c, 0, 1) IS NULL
       OR mv_slice(c, 0, 1) IS NOT NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
|     |
|     |
|     |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(c_long, 0, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_slice(c_long, 0, 1)<>'ABCD';
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(c, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_to_string(c, '|') IN ('',
                               '1',
                               '2',
                               '3');
+-----+
| col |
+-----+
|     |
|     |
|     |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(c_long, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mv_to_string(c_long, '|')<>'ABCD';
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(c, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (string_to_mv(c, '|') IS NULL
       OR string_to_mv(c, '|') IS NOT NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
|     |
|     |
|     |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(c_long, '|') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (string_to_mv(c_long, '|') IS NULL
       OR string_to_mv(c_long, '|') IS NOT NULL);
+-----+
| col |
+-----+
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(c, '$.') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND json_keys(c, '$.') IS NULL;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(c_long, '$.') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND json_keys(c_long, '$.') IS NULL;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND json_object(KEY 'k' value c) IS NOT NULL;
+------------+
| col        |
+------------+
| {"k":""}   |
| {"k":""}   |
| {"k":""}   |
| {"k":"1"}  |
| {"k":"1"}  |
| {"k":"1"}  |
| {"k":"2"}  |
| {"k":"2"}  |
| {"k":"2"}  |
| {"k":"3"}  |
| {"k":"3"}  |
| {"k":"3"}  |
| {"k":null} |
| {"k":null} |
| {"k":null} |
+------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND json_object(KEY 'k' value c_long) IS NOT NULL;
+---------+
| col     |
+---------+
| {"k":0} |
| {"k":0} |
| {"k":0} |
| {"k":0} |
| {"k":0} |
| {"k":1} |
| {"k":1} |
| {"k":1} |
| {"k":1} |
| {"k":1} |
| {"k":2} |
| {"k":2} |
| {"k":2} |
| {"k":2} |
| {"k":2} |
+---------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND json_paths(c) IS NOT NULL;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND json_paths(c_long) IS NOT NULL;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(c, '$.') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (json_query(c, '$.') IS NULL
       OR json_query(c, '$.') IS NOT NULL);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(c_long, '$.') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (json_query(c_long, '$.') IS NULL
       OR json_query(c_long, '$.') IS NOT NULL);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(c, '$.') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(c_long, '$.') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (json_value(c_long, '$.') IS NULL
       OR json_value(c_long, '$.') IS NOT NULL);
+-----+
| col |
+-----+
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (parse_json(c) IS NULL
       OR parse_json(c) IS NOT NULL);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(cast(c_long AS char)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (parse_json(cast(c_long AS char)) IS NULL
       OR parse_json(cast(c_long AS char)) IS NOT NULL);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (try_parse_json(c) IS NULL
       OR try_parse_json(c) IS NOT NULL);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(cast(c_long AS char)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (try_parse_json(cast(c_long AS char)) IS NULL
       OR try_parse_json(cast(c_long AS char)) IS NOT NULL);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (to_json_string(c) IS NULL
       OR to_json_string(c) IS NOT NULL);
+-----+
| col |
+-----+
| ""  |
| ""  |
| ""  |
| "1" |
| "1" |
| "1" |
| "2" |
| "2" |
| "2" |
| "3" |
| "3" |
| "3" |
|     |
|     |
|     |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (to_json_string(c_long) IS NULL
       OR to_json_string(c_long) IS NOT NULL);
+-----+
| col |
+-----+
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# Total query count 359 Positive tests: 281 Negative tests: 78
#-------------------------------------------------------------------------
