!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/mv&numMergeBuffers=3
!set outputformat mysql
SELECT *
FROM test_unnest;
+-------------------------+-------+--------+---------+----------+------------------------------------------------+------------------------+--------------------------------------+----------------------------------+--------------------------------------+----------------------------------+-----------------------------+
| __time                  | c_str | c_long | c_float | c_double | c_mv_complex                                   | c_mv_num               | c_mv_complex_with_null_and_empty_val | c_mv_num_with_null_and_empty_val | c_mv_complex_with_null_and_empty_row | c_mv_num_with_null_and_empty_row | c_mv_all_null_and_empty_val |
+-------------------------+-------+--------+---------+----------+------------------------------------------------+------------------------+--------------------------------------+----------------------------------+--------------------------------------+----------------------------------+-----------------------------+
| 2022-01-01 00:00:00.000 |       |      1 |     0.1 |      0.1 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            |                                      |                                  | [null,"",null,"",null]      |
| 2022-01-01 00:00:00.000 | str2  |      2 |     0.2 |      0.2 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      |
| 2022-01-01 00:00:00.000 | str3  |      3 |     0.3 |      0.3 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      |
| 2022-01-01 00:00:00.000 | str4  |      4 |     0.4 |      0.4 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            | [null,"",null,"",null]      |
| 2022-01-01 00:00:00.000 |       |      0 |     0.0 |      0.0 | ["my_null","my_empty","1","[2]","[3, [4, 5]]"] | ["-1","0","1","2","3"] | [null,"","1","[2]","[3, [4, 5]]"]    | [null,"","1","2","3"]            |                                      |                                  | [null,"",null,"",null]      |
+-------------------------+-------+--------+---------+----------+------------------------------------------------+------------------------+--------------------------------------+----------------------------------+--------------------------------------+----------------------------------+-----------------------------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT pi+pi AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND pi<>0;
+-------------------+
| col               |
+-------------------+
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
+-------------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT pi AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND pi<>0;
+-------------------+
| col               |
+-------------------+
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
+-------------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT abs(c)+abs(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (abs(c)+abs(c)) IN (0,
                          2,
                          4,
                          6);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
| 6.0 |
| 6.0 |
| 6.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B2_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT abs(c+c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND abs(c+c) IN (0,
                   2,
                   4,
                   6);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
| 6.0 |
| 6.0 |
| 6.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B2_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT abs(c)+abs(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (abs(c)+abs(c_long)) IN (0,
                               1,
                               2,
                               3,
                               4,
                               5);
+-----+
| col |
+-----+
| 1.0 |
| 2.0 |
| 2.0 |
| 3.0 |
| 3.0 |
| 3.0 |
| 4.0 |
| 4.0 |
| 5.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT abs(c+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (abs(c)+abs(c_long)) IN (0,
                               1,
                               2,
                               3,
                               4,
                               5);
+-----+
| col |
+-----+
|   1 |
|   2 |
|   2 |
|   3 |
|   3 |
|   3 |
|   4 |
|   4 |
|   5 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B3_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(c)+ceil(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (ceil(c)+ceil(c)) IN (0,
                            2,
                            4,
                            6);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
| 6.0 |
| 6.0 |
| 6.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B3_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(c+c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND ceil(c+c) IN (0,
                    2,
                    4,
                    6);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
| 6.0 |
| 6.0 |
| 6.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B3_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(c)+ceil(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (ceil(c)+ceil(c_long)) IN (0,
                                 1,
                                 2,
                                 3,
                                 4,
                                 5);
+-----+
| col |
+-----+
| 1.0 |
| 2.0 |
| 2.0 |
| 3.0 |
| 3.0 |
| 3.0 |
| 4.0 |
| 4.0 |
| 5.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B3_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(c+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND ceil(c+c_long) IN (0,
                         1,
                         2,
                         3,
                         4,
                         5);
+-----+
| col |
+-----+
|   1 |
|   2 |
|   2 |
|   3 |
|   3 |
|   3 |
|   4 |
|   4 |
|   5 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B4_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT exp(c)+exp(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (exp(c)+exp(c))<>0;
+--------------------+
| col                |
+--------------------+
|   14.7781121978613 |
|   14.7781121978613 |
|   14.7781121978613 |
| 40.171073846375336 |
| 40.171073846375336 |
| 40.171073846375336 |
|   5.43656365691809 |
|   5.43656365691809 |
|   5.43656365691809 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B4_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT exp(c+c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND exp(c+c)<>0;
+--------------------+
| col                |
+--------------------+
|  403.4287934927351 |
|  403.4287934927351 |
|  403.4287934927351 |
| 54.598150033144236 |
| 54.598150033144236 |
| 54.598150033144236 |
|   7.38905609893065 |
|   7.38905609893065 |
|   7.38905609893065 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B4_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT exp(c)+exp(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (exp(c)+exp(c_long))<>0;
+--------------------+
| col                |
+--------------------+
| 10.107337927389695 |
| 10.107337927389695 |
|   14.7781121978613 |
| 21.085536923187668 |
| 22.803818751646713 |
|  27.47459302211832 |
|  3.718281828459045 |
|   5.43656365691809 |
|   8.38905609893065 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B4_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT exp(c+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND exp(c+c_long)<>0;
+--------------------+
| col                |
+--------------------+
|  148.4131591025766 |
|  2.718281828459045 |
| 20.085536923187668 |
| 20.085536923187668 |
| 20.085536923187668 |
| 54.598150033144236 |
| 54.598150033144236 |
|   7.38905609893065 |
|   7.38905609893065 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B5_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT floor(c)+floor(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (floor(c)+floor(c)) IN (0,
                              2,
                              4,
                              6);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
| 6.0 |
| 6.0 |
| 6.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B5_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT floor(c+c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND floor(c+c) IN (0,
                     2,
                     4,
                     6);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
| 6.0 |
| 6.0 |
| 6.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B5_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT floor(c)+floor(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (floor(c)+floor(c_long)) IN (0,
                                   1,
                                   2,
                                   3,
                                   4,
                                   5);
+-----+
| col |
+-----+
| 1.0 |
| 2.0 |
| 2.0 |
| 3.0 |
| 3.0 |
| 3.0 |
| 4.0 |
| 4.0 |
| 5.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B5_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT floor(c+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND floor(c+c_long) IN (0,
                          1,
                          2,
                          3,
                          4,
                          5);
+-----+
| col |
+-----+
|   1 |
|   2 |
|   2 |
|   3 |
|   3 |
|   3 |
|   4 |
|   4 |
|   5 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B6_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ln(c)+ln(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (ln(c)+ln(c))<>99999;
+--------------------+
| col                |
+--------------------+
|                0.0 |
|                0.0 |
|                0.0 |
| 1.3862943611198906 |
| 1.3862943611198906 |
| 1.3862943611198906 |
| 2.1972245773362196 |
| 2.1972245773362196 |
| 2.1972245773362196 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B6_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ln(c+c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND ln(c+c)<>99999;
+--------------------+
| col                |
+--------------------+
| 0.6931471805599453 |
| 0.6931471805599453 |
| 0.6931471805599453 |
| 1.3862943611198906 |
| 1.3862943611198906 |
| 1.3862943611198906 |
|  1.791759469228055 |
|  1.791759469228055 |
|  1.791759469228055 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B6_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ln(c)+ln(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (ln(c)+ln(c_long))<>99999;
+--------------------+
| col                |
+--------------------+
|          -Infinity |
|          -Infinity |
|          -Infinity |
|                0.0 |
| 0.6931471805599453 |
| 0.6931471805599453 |
| 1.0986122886681098 |
| 1.3862943611198906 |
|  1.791759469228055 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B6_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ln(c+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND ln(c+c_long)<>99999;
+--------------------+
| col                |
+--------------------+
|                0.0 |
| 0.6931471805599453 |
| 0.6931471805599453 |
| 1.0986122886681098 |
| 1.0986122886681098 |
| 1.0986122886681098 |
| 1.3862943611198906 |
| 1.3862943611198906 |
| 1.6094379124341003 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B7_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT log10(c)+log10(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (log10(c)+log10(c))<>99999;
+--------------------+
| col                |
+--------------------+
|                0.0 |
|                0.0 |
|                0.0 |
| 0.6020599913279624 |
| 0.6020599913279624 |
| 0.6020599913279624 |
| 0.9542425094393249 |
| 0.9542425094393249 |
| 0.9542425094393249 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B7_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT log10(c+c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND log10(c+c)<>99999;
+--------------------+
| col                |
+--------------------+
| 0.3010299956639812 |
| 0.3010299956639812 |
| 0.3010299956639812 |
| 0.6020599913279624 |
| 0.6020599913279624 |
| 0.6020599913279624 |
| 0.7781512503836436 |
| 0.7781512503836436 |
| 0.7781512503836436 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B7_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT log10(c)+log10(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (log10(c)+log10(c_long))<>99999;
+---------------------+
| col                 |
+---------------------+
|           -Infinity |
|           -Infinity |
|           -Infinity |
|                 0.0 |
|  0.3010299956639812 |
|  0.3010299956639812 |
| 0.47712125471966244 |
|  0.6020599913279624 |
|  0.7781512503836436 |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B7_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT log10(c+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND log10(c+c_long)<>99999;
+---------------------+
| col                 |
+---------------------+
|                 0.0 |
|  0.3010299956639812 |
|  0.3010299956639812 |
| 0.47712125471966244 |
| 0.47712125471966244 |
| 0.47712125471966244 |
|  0.6020599913279624 |
|  0.6020599913279624 |
|  0.6989700043360189 |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B8_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT power(c, 1)+power(c, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (power(c, 1)+power(c, 1)) IN (0,
                                    2,
                                    4,
                                    6);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
| 6.0 |
| 6.0 |
| 6.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B8_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT power(c+c, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND power(c+c, 1) IN (0,
                        2,
                        4,
                        6);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
| 6.0 |
| 6.0 |
| 6.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B8_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT power(c, 1)+power(c_long, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (power(c, 1)+power(c_long, 1)) IN (0,
                                         1,
                                         2,
                                         3,
                                         4,
                                         5);
+-----+
| col |
+-----+
| 1.0 |
| 2.0 |
| 2.0 |
| 3.0 |
| 3.0 |
| 3.0 |
| 4.0 |
| 4.0 |
| 5.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B8_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT power(c+c_long, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND power(c+c_long, 1) IN (0,
                             1,
                             2,
                             3,
                             4,
                             5);
+-----+
| col |
+-----+
| 1.0 |
| 2.0 |
| 2.0 |
| 3.0 |
| 3.0 |
| 3.0 |
| 4.0 |
| 4.0 |
| 5.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B9_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(c)+sqrt(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (sqrt(c)+sqrt(c))<>99999;
+--------------------+
| col                |
+--------------------+
|                2.0 |
|                2.0 |
|                2.0 |
| 2.8284271247461903 |
| 2.8284271247461903 |
| 2.8284271247461903 |
| 3.4641016151377544 |
| 3.4641016151377544 |
| 3.4641016151377544 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B9_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(c+c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND sqrt(c+c)<>99999;
+--------------------+
| col                |
+--------------------+
| 1.4142135623730951 |
| 1.4142135623730951 |
| 1.4142135623730951 |
|                2.0 |
|                2.0 |
|                2.0 |
|  2.449489742783178 |
|  2.449489742783178 |
|  2.449489742783178 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B9_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(c)+sqrt(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (sqrt(c)+sqrt(c_long))<>99999;
+--------------------+
| col                |
+--------------------+
|                1.0 |
| 1.4142135623730951 |
| 1.7320508075688772 |
|                2.0 |
|  2.414213562373095 |
|  2.414213562373095 |
|  2.732050807568877 |
| 2.8284271247461903 |
| 3.1462643699419726 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B9_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(c+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND sqrt(c+c_long)<>99999;
+--------------------+
| col                |
+--------------------+
|                1.0 |
| 1.4142135623730951 |
| 1.4142135623730951 |
| 1.7320508075688772 |
| 1.7320508075688772 |
| 1.7320508075688772 |
|                2.0 |
|                2.0 |
|   2.23606797749979 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B10_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(cast(c AS decimal), 1)+truncate(cast(c AS decimal), 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (truncate(cast(c AS decimal), 1)+truncate(cast(c AS decimal), 1)) IN (0,
                                                                            2,
                                                                            4,
                                                                            6);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
| 6.0 |
| 6.0 |
| 6.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B10_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(cast(c AS decimal)+cast(c AS decimal), 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND truncate(cast(c AS decimal)+cast(c AS decimal), 1) IN (0,
                                                             2,
                                                             4,
                                                             6);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
| 6.0 |
| 6.0 |
| 6.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B10_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(cast(c AS decimal), 1)+truncate(c_long, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (truncate(cast(c AS decimal), 1)+truncate(c_long, 1)) IN (0,
                                                                1,
                                                                2,
                                                                3,
                                                                4,
                                                                5);
+-----+
| col |
+-----+
| 1.0 |
| 2.0 |
| 2.0 |
| 3.0 |
| 3.0 |
| 3.0 |
| 4.0 |
| 4.0 |
| 5.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B10_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(cast(c AS decimal)+c_long, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND truncate(cast(c AS decimal)+c_long, 1) IN (0,
                                                 1,
                                                 2,
                                                 3,
                                                 4,
                                                 5);
+-----+
| col |
+-----+
| 1.0 |
| 2.0 |
| 2.0 |
| 3.0 |
| 3.0 |
| 3.0 |
| 4.0 |
| 4.0 |
| 5.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B11_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(cast(c AS decimal), 1)+trunc(cast(c AS decimal), 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (trunc(cast(c AS decimal), 1)+trunc(cast(c AS decimal), 1)) IN (0,
                                                                      2,
                                                                      4,
                                                                      6);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
| 6.0 |
| 6.0 |
| 6.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B11_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(cast(c AS decimal)+cast(c AS decimal), 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND trunc(cast(c AS decimal)+cast(c AS decimal), 1) IN (0,
                                                          2,
                                                          4,
                                                          6);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
| 6.0 |
| 6.0 |
| 6.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B11_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(cast(c AS decimal), 1)+trunc(c_long, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (trunc(cast(c AS decimal), 1)+trunc(c_long, 1)) IN (0,
                                                          1,
                                                          2,
                                                          3,
                                                          4,
                                                          5);
+-----+
| col |
+-----+
| 1.0 |
| 2.0 |
| 2.0 |
| 3.0 |
| 3.0 |
| 3.0 |
| 4.0 |
| 4.0 |
| 5.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B11_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(cast(c AS decimal)+c_long, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND trunc(cast(c AS decimal)+c_long, 1) IN (0,
                                              1,
                                              2,
                                              3,
                                              4,
                                              5);
+-----+
| col |
+-----+
| 1.0 |
| 2.0 |
| 2.0 |
| 3.0 |
| 3.0 |
| 3.0 |
| 4.0 |
| 4.0 |
| 5.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B12_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT round(cast(c AS decimal), 1)+round(cast(c AS decimal), 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (round(cast(c AS decimal), 1)+round(cast(c AS decimal), 1)) IN (0,
                                                                      2,
                                                                      4,
                                                                      6);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
| 6.0 |
| 6.0 |
| 6.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B12_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT round(cast(c AS decimal)+cast(c AS decimal), 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND round(cast(c AS decimal)+cast(c AS decimal), 1) IN (0,
                                                          2,
                                                          4,
                                                          6);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
| 6.0 |
| 6.0 |
| 6.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B12_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT round(cast(c AS decimal), 1)+round(c_long, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (round(cast(c AS decimal), 1)+round(c_long, 1)) IN (0,
                                                          1,
                                                          2,
                                                          3,
                                                          4,
                                                          5);
+-----+
| col |
+-----+
| 1.0 |
| 2.0 |
| 2.0 |
| 3.0 |
| 3.0 |
| 3.0 |
| 4.0 |
| 4.0 |
| 5.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B12_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT round(cast(c AS decimal)+c_long, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND round(cast(c AS decimal)+c_long, 1) IN (0,
                                              1,
                                              2,
                                              3,
                                              4,
                                              5);
+-----+
| col |
+-----+
| 1.0 |
| 2.0 |
| 2.0 |
| 3.0 |
| 3.0 |
| 3.0 |
| 4.0 |
| 4.0 |
| 5.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B13_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mod(c, 2)+mod(c, 2) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (mod(c, 2)+mod(c, 2)) IN (0,
                                2);
+-----+
| col |
+-----+
| 0.0 |
| 0.0 |
| 0.0 |
| 2.0 |
| 2.0 |
| 2.0 |
| 2.0 |
| 2.0 |
| 2.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B13_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mod(c, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mod(c, c)<>99999;
+-----+
| col |
+-----+
| 0.0 |
| 0.0 |
| 0.0 |
| 0.0 |
| 0.0 |
| 0.0 |
| 0.0 |
| 0.0 |
| 0.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B13_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mod(c, 2)+mod(c_long, 2) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (mod(c, 2)+mod(c_long, 2)) IN (0,
                                     1,
                                     2);
+-----+
| col |
+-----+
| 0.0 |
| 0.0 |
| 1.0 |
| 1.0 |
| 1.0 |
| 1.0 |
| 1.0 |
| 2.0 |
| 2.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B13_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mod(c, c_long+1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND mod(c, c_long+1) IN (0,
                           1,
                           2);
+-----+
| col |
+-----+
| 0.0 |
| 0.0 |
| 0.0 |
| 0.0 |
| 0.0 |
| 1.0 |
| 1.0 |
| 1.0 |
| 2.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B14_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sin(c)+sin(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (sin(c)+sin(c))<>99999;
+--------------------+
| col                |
+--------------------+
| 0.2822400161197344 |
| 0.2822400161197344 |
| 0.2822400161197344 |
|  1.682941969615793 |
|  1.682941969615793 |
|  1.682941969615793 |
| 1.8185948536513634 |
| 1.8185948536513634 |
| 1.8185948536513634 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B14_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sin(c+c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND sin(c+c)<>99999;
+----------------------+
| col                  |
+----------------------+
| -0.27941549819892586 |
| -0.27941549819892586 |
| -0.27941549819892586 |
|  -0.7568024953079282 |
|  -0.7568024953079282 |
|  -0.7568024953079282 |
|   0.9092974268256817 |
|   0.9092974268256817 |
|   0.9092974268256817 |
+----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B14_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sin(c)+sin(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (sin(c)+sin(c_long))<>99999;
+--------------------+
| col                |
+--------------------+
| 0.1411200080598672 |
| 0.8414709848078965 |
| 0.9092974268256817 |
| 0.9825909928677637 |
| 1.0504174348855488 |
|  1.682941969615793 |
| 1.7507684116335782 |
| 1.7507684116335782 |
| 1.8185948536513634 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B14_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sin(c+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND sin(c+c_long)<>99999;
+---------------------+
| col                 |
+---------------------+
| -0.7568024953079282 |
| -0.7568024953079282 |
| -0.9589242746631385 |
|  0.1411200080598672 |
|  0.1411200080598672 |
|  0.1411200080598672 |
|  0.8414709848078965 |
|  0.9092974268256817 |
|  0.9092974268256817 |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B15_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cos(c)+cos(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (cos(c)+cos(c))<>99999;
+---------------------+
| col                 |
+---------------------+
| -0.8322936730942848 |
| -0.8322936730942848 |
| -0.8322936730942848 |
| -1.9799849932008908 |
| -1.9799849932008908 |
| -1.9799849932008908 |
|  1.0806046117362795 |
|  1.0806046117362795 |
|  1.0806046117362795 |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B15_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cos(c+c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND cos(c+c)<>99999;
+---------------------+
| col                 |
+---------------------+
| -0.4161468365471424 |
| -0.4161468365471424 |
| -0.4161468365471424 |
| -0.6536436208636119 |
| -0.6536436208636119 |
| -0.6536436208636119 |
|   0.960170286650366 |
|   0.960170286650366 |
|   0.960170286650366 |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B15_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cos(c)+cos(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (cos(c)+cos(c_long))<>99999;
+----------------------+
| col                  |
+----------------------+
| -0.44969019073230565 |
|  -0.8322936730942848 |
|  -1.4061393331475878 |
| 0.010007503399554585 |
|  0.12415546932099736 |
|  0.12415546932099736 |
|   0.5838531634528576 |
|   1.0806046117362795 |
|   1.5403023058681398 |
+----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B15_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cos(c+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND cos(c+c_long)<>99999;
+---------------------+
| col                 |
+---------------------+
| -0.4161468365471424 |
| -0.4161468365471424 |
| -0.6536436208636119 |
| -0.6536436208636119 |
| -0.9899924966004454 |
| -0.9899924966004454 |
| -0.9899924966004454 |
| 0.28366218546322625 |
|  0.5403023058681398 |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B16_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT tan(c)+tan(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (tan(c)+tan(c))<>99999;
+---------------------+
| col                 |
+---------------------+
| -0.2850930861485556 |
| -0.2850930861485556 |
| -0.2850930861485556 |
|  -4.370079726523038 |
|  -4.370079726523038 |
|  -4.370079726523038 |
|  3.1148154493098046 |
|  3.1148154493098046 |
|  3.1148154493098046 |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B16_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT tan(c+c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND tan(c+c)<>99999;
+----------------------+
| col                  |
+----------------------+
| -0.29100619138474915 |
| -0.29100619138474915 |
| -0.29100619138474915 |
|   -2.185039863261519 |
|   -2.185039863261519 |
|   -2.185039863261519 |
|   1.1578212823495775 |
|   1.1578212823495775 |
|   1.1578212823495775 |
+----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B16_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT tan(c)+tan(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (tan(c)+tan(c_long))<>99999;
+---------------------+
| col                 |
+---------------------+
| -0.1425465430742778 |
| -0.6276321386066166 |
| -0.6276321386066166 |
|  -2.185039863261519 |
| -2.3275864063357967 |
|  -4.370079726523038 |
|  1.4148611815806245 |
|  1.5574077246549023 |
|  3.1148154493098046 |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B16_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT tan(c+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND tan(c+c_long)<>99999;
+---------------------+
| col                 |
+---------------------+
| -0.1425465430742778 |
| -0.1425465430742778 |
| -0.1425465430742778 |
|  -2.185039863261519 |
|  -2.185039863261519 |
|  -3.380515006246586 |
|  1.1578212823495775 |
|  1.1578212823495775 |
|  1.5574077246549023 |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B17_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cot(c)+cot(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (cot(c)+cot(c))<>99999;
+---------------------+
| col                 |
+---------------------+
| -0.9153151087205715 |
| -0.9153151087205715 |
| -0.9153151087205715 |
| -14.030505102869068 |
| -14.030505102869068 |
| -14.030505102869068 |
|  1.2841852318686615 |
|  1.2841852318686615 |
|  1.2841852318686615 |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B17_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cot(c+c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND cot(c+c)<>99999;
+----------------------+
| col                  |
+----------------------+
| -0.45765755436028577 |
| -0.45765755436028577 |
| -0.45765755436028577 |
|   -3.436353004180128 |
|   -3.436353004180128 |
|   -3.436353004180128 |
|   0.8636911544506167 |
|   0.8636911544506167 |
|   0.8636911544506167 |
+----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B17_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cot(c)+cot(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (cot(c)+cot(c_long))<>99999;
+---------------------+
| col                 |
+---------------------+
| -0.9153151087205715 |
|  -6.373159935500203 |
|   -7.47291010579482 |
|   0.184435061574045 |
|   0.184435061574045 |
|  1.2841852318686615 |
|            Infinity |
|            Infinity |
|            Infinity |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B17_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cot(c+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND cot(c+c_long)<>99999;
+----------------------+
| col                  |
+----------------------+
|  -0.2958129155327455 |
| -0.45765755436028577 |
| -0.45765755436028577 |
|   -7.015252551434534 |
|   -7.015252551434534 |
|   -7.015252551434534 |
|   0.6420926159343308 |
|   0.8636911544506167 |
|   0.8636911544506167 |
+----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B18_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT asin(c)+asin(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (asin(c)+asin(c))<>99999;
+-------------------+
| col               |
+-------------------+
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
|               NaN |
|               NaN |
|               NaN |
|               NaN |
|               NaN |
|               NaN |
+-------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B18_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT asin(c+c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND asin(c+c)<>99999;
+-----+
| col |
+-----+
| NaN |
| NaN |
| NaN |
| NaN |
| NaN |
| NaN |
| NaN |
| NaN |
| NaN |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B18_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT asin(c)+asin(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (asin(c)+asin(c_long))<>99999;
+--------------------+
| col                |
+--------------------+
| 1.5707963267948966 |
|  3.141592653589793 |
|                NaN |
|                NaN |
|                NaN |
|                NaN |
|                NaN |
|                NaN |
|                NaN |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B18_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT asin(c+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND asin(c+c_long)<>99999;
+--------------------+
| col                |
+--------------------+
| 1.5707963267948966 |
|                NaN |
|                NaN |
|                NaN |
|                NaN |
|                NaN |
|                NaN |
|                NaN |
|                NaN |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B19_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT acos(c)+acos(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (acos(c)+acos(c))<>99999;
+-----+
| col |
+-----+
| 0.0 |
| 0.0 |
| 0.0 |
| NaN |
| NaN |
| NaN |
| NaN |
| NaN |
| NaN |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B19_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT acos(c+c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND acos(c+c)<>99999;
+-----+
| col |
+-----+
| NaN |
| NaN |
| NaN |
| NaN |
| NaN |
| NaN |
| NaN |
| NaN |
| NaN |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B19_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT acos(c)+acos(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (acos(c)+acos(c_long))<>99999;
+--------------------+
| col                |
+--------------------+
|                0.0 |
| 1.5707963267948966 |
|                NaN |
|                NaN |
|                NaN |
|                NaN |
|                NaN |
|                NaN |
|                NaN |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B19_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT acos(c+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND acos(c+c_long)<>99999;
+-----+
| col |
+-----+
| 0.0 |
| NaN |
| NaN |
| NaN |
| NaN |
| NaN |
| NaN |
| NaN |
| NaN |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B20_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT atan(c)+atan(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (atan(c)+atan(c))<>99999;
+--------------------+
| col                |
+--------------------+
| 1.5707963267948966 |
| 1.5707963267948966 |
| 1.5707963267948966 |
|  2.214297435588181 |
|  2.214297435588181 |
|  2.214297435588181 |
|  2.498091544796509 |
|  2.498091544796509 |
|  2.498091544796509 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B20_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT atan(c+c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND atan(c+c)<>99999;
+--------------------+
| col                |
+--------------------+
| 1.1071487177940904 |
| 1.1071487177940904 |
| 1.1071487177940904 |
| 1.3258176636680326 |
| 1.3258176636680326 |
| 1.3258176636680326 |
| 1.4056476493802699 |
| 1.4056476493802699 |
| 1.4056476493802699 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B20_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT atan(c)+atan(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (atan(c)+atan(c_long))<>99999;
+--------------------+
| col                |
+--------------------+
| 0.7853981633974483 |
| 1.1071487177940904 |
| 1.2490457723982544 |
| 1.5707963267948966 |
| 1.8925468811915387 |
| 1.8925468811915387 |
| 2.0344439357957027 |
|  2.214297435588181 |
|  2.356194490192345 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B20_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT atan(c+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND atan(c+c_long)<>99999;
+--------------------+
| col                |
+--------------------+
| 0.7853981633974483 |
| 1.1071487177940904 |
| 1.1071487177940904 |
| 1.2490457723982544 |
| 1.2490457723982544 |
| 1.2490457723982544 |
| 1.3258176636680326 |
| 1.3258176636680326 |
|  1.373400766945016 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B21_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(c, 1)+atan2(c, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (atan2(c, 1)+atan2(c, 1))<>99999;
+--------------------+
| col                |
+--------------------+
| 1.5707963267948966 |
| 1.5707963267948966 |
| 1.5707963267948966 |
|  2.214297435588181 |
|  2.214297435588181 |
|  2.214297435588181 |
|  2.498091544796509 |
|  2.498091544796509 |
|  2.498091544796509 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B21_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(c, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND atan2(c, c)<>99999;
+--------------------+
| col                |
+--------------------+
| 0.7853981633974483 |
| 0.7853981633974483 |
| 0.7853981633974483 |
| 0.7853981633974483 |
| 0.7853981633974483 |
| 0.7853981633974483 |
| 0.7853981633974483 |
| 0.7853981633974483 |
| 0.7853981633974483 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B21_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(c, 1)+atan2(c_long, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (atan2(c, 1)+atan2(c_long, 1))<>99999;
+--------------------+
| col                |
+--------------------+
| 0.7853981633974483 |
| 1.1071487177940904 |
| 1.2490457723982544 |
| 1.5707963267948966 |
| 1.8925468811915387 |
| 1.8925468811915387 |
| 2.0344439357957027 |
|  2.214297435588181 |
|  2.356194490192345 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B21_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(c, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND atan2(c, c_long)<>99999;
+--------------------+
| col                |
+--------------------+
| 0.4636476090008061 |
| 0.7853981633974483 |
| 0.7853981633974483 |
|  0.982793723247329 |
| 1.1071487177940904 |
| 1.2490457723982544 |
| 1.5707963267948966 |
| 1.5707963267948966 |
| 1.5707963267948966 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B22_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(c)+degrees(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (degrees(c)+degrees(c))<>99999;
+--------------------+
| col                |
+--------------------+
| 114.59155902616465 |
| 114.59155902616465 |
| 114.59155902616465 |
|  229.1831180523293 |
|  229.1831180523293 |
|  229.1831180523293 |
| 343.77467707849394 |
| 343.77467707849394 |
| 343.77467707849394 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B22_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(c+c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND degrees(c+c)<>99999;
+--------------------+
| col                |
+--------------------+
| 114.59155902616465 |
| 114.59155902616465 |
| 114.59155902616465 |
|  229.1831180523293 |
|  229.1831180523293 |
|  229.1831180523293 |
| 343.77467707849394 |
| 343.77467707849394 |
| 343.77467707849394 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B22_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(c)+degrees(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (degrees(c)+degrees(c_long))<>99999;
+--------------------+
| col                |
+--------------------+
| 114.59155902616465 |
| 114.59155902616465 |
| 171.88733853924697 |
| 171.88733853924697 |
| 171.88733853924697 |
|  229.1831180523293 |
|  229.1831180523293 |
|  286.4788975654116 |
|  57.29577951308232 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B22_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(c+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND degrees(c+c_long)<>99999;
+--------------------+
| col                |
+--------------------+
| 114.59155902616465 |
| 114.59155902616465 |
| 171.88733853924697 |
| 171.88733853924697 |
| 171.88733853924697 |
|  229.1831180523293 |
|  229.1831180523293 |
|  286.4788975654116 |
|  57.29577951308232 |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B23_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT radians(c)+radians(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (radians(c)+radians(c))<>99999;
+---------------------+
| col                 |
+---------------------+
| 0.03490658503988659 |
| 0.03490658503988659 |
| 0.03490658503988659 |
| 0.06981317007977318 |
| 0.06981317007977318 |
| 0.06981317007977318 |
| 0.10471975511965978 |
| 0.10471975511965978 |
| 0.10471975511965978 |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B23_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT radians(c+c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND radians(c+c)<>99999;
+---------------------+
| col                 |
+---------------------+
| 0.03490658503988659 |
| 0.03490658503988659 |
| 0.03490658503988659 |
| 0.06981317007977318 |
| 0.06981317007977318 |
| 0.06981317007977318 |
| 0.10471975511965978 |
| 0.10471975511965978 |
| 0.10471975511965978 |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B23_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT radians(c)+radians(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (radians(c)+radians(c_long))<>99999;
+----------------------+
| col                  |
+----------------------+
| 0.017453292519943295 |
|  0.03490658503988659 |
|  0.03490658503988659 |
|  0.05235987755982989 |
|  0.05235987755982989 |
|  0.05235987755982989 |
|  0.06981317007977318 |
|  0.06981317007977318 |
|  0.08726646259971649 |
+----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B23_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT radians(c+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND radians(c+c_long)<>99999;
+----------------------+
| col                  |
+----------------------+
| 0.017453292519943295 |
|  0.03490658503988659 |
|  0.03490658503988659 |
|  0.05235987755982989 |
|  0.05235987755982989 |
|  0.05235987755982989 |
|  0.06981317007977318 |
|  0.06981317007977318 |
|  0.08726646259971647 |
+----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B24_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(cast(c AS int), 1)+bitwise_and(cast(c AS int), 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (bitwise_and(cast(c AS int), 1)+bitwise_and(cast(c AS int), 1)) IN (0,
                                                                          2);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   2 |
|   2 |
|   2 |
|   2 |
|   2 |
|   2 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B24_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(cast(c AS int), cast(c AS int)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND bitwise_and(cast(c AS int), cast(c AS int)) IN (0,
                                                      1,
                                                      2,
                                                      3);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B24_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(cast(c AS int), 1)+bitwise_and(c_long, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (bitwise_and(cast(c AS int), 1)+bitwise_and(c_long, 1)) IN (0,
                                                                  1,
                                                                  2);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B24_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(cast(c AS int), c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND bitwise_and(cast(c AS int), c_long) IN (0,
                                              1,
                                              2);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B25_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(cast(c AS int))+bitwise_complement(cast(c AS int)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (bitwise_complement(cast(c AS int))+bitwise_complement(cast(c AS int))) IN (-2,
                                                                                  -4,
                                                                                  -6,
                                                                                  -8);
+-----+
| col |
+-----+
|  -4 |
|  -4 |
|  -4 |
|  -6 |
|  -6 |
|  -6 |
|  -8 |
|  -8 |
|  -8 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B25_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(cast(c AS int)+cast(c AS int)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND bitwise_complement(cast(c AS int)+cast(c AS int)) IN (-1,
                                                            -3,
                                                            -5,
                                                            -7);
+-----+
| col |
+-----+
|  -3 |
|  -3 |
|  -3 |
|  -5 |
|  -5 |
|  -5 |
|  -7 |
|  -7 |
|  -7 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B25_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(cast(c AS int))+bitwise_complement(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (bitwise_complement(cast(c AS int))+bitwise_complement(c_long)) IN (-2,
                                                                          -3,
                                                                          -4,
                                                                          -5,
                                                                          -6,
                                                                          -7);
+-----+
| col |
+-----+
|  -3 |
|  -4 |
|  -4 |
|  -5 |
|  -5 |
|  -5 |
|  -6 |
|  -6 |
|  -7 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B25_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(cast(c AS int)+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND bitwise_complement(cast(c AS int)+c_long) IN (-1,
                                                    -2,
                                                    -3,
                                                    -4,
                                                    -5,
                                                    -6);
+-----+
| col |
+-----+
|  -2 |
|  -3 |
|  -3 |
|  -4 |
|  -4 |
|  -4 |
|  -5 |
|  -5 |
|  -6 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B26_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(cast(c AS DOUBLE))+bitwise_convert_double_to_long_bits(cast(c AS DOUBLE)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (bitwise_convert_double_to_long_bits(cast(c AS DOUBLE))+bitwise_convert_double_to_long_bits(cast(c AS DOUBLE)))<>99999;
+----------------------+
| col                  |
+----------------------+
| -9218868437227405312 |
| -9218868437227405312 |
| -9218868437227405312 |
| -9223372036854775808 |
| -9223372036854775808 |
| -9223372036854775808 |
|  9214364837600034816 |
|  9214364837600034816 |
|  9214364837600034816 |
+----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B26_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(cast(c AS DOUBLE)+cast(c AS DOUBLE)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND bitwise_convert_double_to_long_bits(cast(c AS DOUBLE)+cast(c AS DOUBLE))<>99999;
+---------------------+
| col                 |
+---------------------+
| 4611686018427387904 |
| 4611686018427387904 |
| 4611686018427387904 |
| 4616189618054758400 |
| 4616189618054758400 |
| 4616189618054758400 |
| 4618441417868443648 |
| 4618441417868443648 |
| 4618441417868443648 |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B26_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(cast(c AS DOUBLE))+bitwise_convert_double_to_long_bits(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (bitwise_convert_double_to_long_bits(cast(c AS DOUBLE))+bitwise_convert_double_to_long_bits(c_long))<>99999;
+----------------------+
| col                  |
+----------------------+
| -9221120237041090560 |
| -9223372036854775808 |
|  4607182418800017408 |
|  4611686018427387904 |
|  4613937818241073152 |
|  9214364837600034816 |
|  9218868437227405312 |
|  9218868437227405312 |
|  9221120237041090560 |
+----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B26_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(cast(c AS DOUBLE)+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND bitwise_convert_double_to_long_bits(cast(c AS DOUBLE)+c_long)<>99999;
+---------------------+
| col                 |
+---------------------+
| 4607182418800017408 |
| 4611686018427387904 |
| 4611686018427387904 |
| 4613937818241073152 |
| 4613937818241073152 |
| 4613937818241073152 |
| 4616189618054758400 |
| 4616189618054758400 |
| 4617315517961601024 |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B27_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT bitwise_convert_long_bits_to_double(cast(c AS int))+bitwise_convert_long_bits_to_double(cast(c AS int)) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
     AND (bitwise_convert_long_bits_to_double(cast(c AS int))+bitwise_convert_long_bits_to_double(cast(c AS int)))<>99999);
+-----+
| cnt |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B27_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT bitwise_convert_long_bits_to_double(cast(c AS int)+cast(c AS int)) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
     AND bitwise_convert_long_bits_to_double(cast(c AS int)+cast(c AS int))<>99999);
+-----+
| cnt |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B27_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT bitwise_convert_long_bits_to_double(cast(c AS int))+bitwise_convert_long_bits_to_double(c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
     AND (bitwise_convert_long_bits_to_double(cast(c AS int))+bitwise_convert_long_bits_to_double(c_long))<>99999);
+-----+
| cnt |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B27_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT bitwise_convert_long_bits_to_double(cast(c AS int)+c_long) AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
     AND bitwise_convert_long_bits_to_double(cast(c AS int)+c_long)<>99999);
+-----+
| cnt |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B28_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(cast(c AS int), 1)+bitwise_or(cast(c AS int), 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (bitwise_or(cast(c AS int), 1)+bitwise_or(cast(c AS int), 1)) IN (2,
                                                                        6);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   6 |
|   6 |
|   6 |
|   6 |
|   6 |
|   6 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B28_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(cast(c AS int), cast(c AS int)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND bitwise_or(cast(c AS int), cast(c AS int)) IN (0,
                                                     1,
                                                     2,
                                                     3);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B28_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(cast(c AS int), 1)+bitwise_or(c_long, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (bitwise_or(cast(c AS int), 1)+bitwise_or(c_long, 1)) IN (2,
                                                                4,
                                                                6);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   4 |
|   4 |
|   4 |
|   4 |
|   4 |
|   6 |
|   6 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B28_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(cast(c AS int), c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND bitwise_or(cast(c AS int), c_long) IN (0,
                                             1,
                                             2,
                                             3);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B29_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(cast(c AS int), 1)+bitwise_shift_left(cast(c AS int), 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (bitwise_shift_left(cast(c AS int), 1)+bitwise_shift_left(cast(c AS int), 1)) IN (0,
                                                                                        4,
                                                                                        8,
                                                                                        12);
+-----+
| col |
+-----+
|  12 |
|  12 |
|  12 |
|   4 |
|   4 |
|   4 |
|   8 |
|   8 |
|   8 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B29_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(cast(c AS int), cast(c AS int)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND bitwise_shift_left(cast(c AS int), cast(c AS int)) IN (0,
                                                             2,
                                                             8,
                                                             24);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|  24 |
|  24 |
|  24 |
|   8 |
|   8 |
|   8 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B29_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(cast(c AS int), 1)+bitwise_shift_left(c_long, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (bitwise_shift_left(cast(c AS int), 1)+bitwise_shift_left(c_long, 1)) IN (0,
                                                                                2,
                                                                                4,
                                                                                6,
                                                                                8,
                                                                                10);
+-----+
| col |
+-----+
|  10 |
|   2 |
|   4 |
|   4 |
|   6 |
|   6 |
|   6 |
|   8 |
|   8 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B29_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(cast(c AS int), c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND bitwise_shift_left(cast(c AS int), c_long) IN (0,
                                                     1,
                                                     2,
                                                     3,
                                                     4,
                                                     6,
                                                     8,
                                                     12);
+-----+
| col |
+-----+
|   1 |
|  12 |
|   2 |
|   2 |
|   3 |
|   4 |
|   4 |
|   6 |
|   8 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B30_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(cast(c AS int), 1)+bitwise_shift_right(cast(c AS int), 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (bitwise_shift_right(cast(c AS int), 1)+bitwise_shift_right(cast(c AS int), 1)) IN (0,
                                                                                          2);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   2 |
|   2 |
|   2 |
|   2 |
|   2 |
|   2 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B30_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(cast(c AS int), cast(c AS int)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND bitwise_shift_right(cast(c AS int), cast(c AS int)) IN (0);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B30_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(cast(c AS int), 1)+bitwise_shift_right(c_long, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (bitwise_shift_right(cast(c AS int), 1)+bitwise_shift_right(c_long, 1)) IN (0,
                                                                                  1,
                                                                                  2);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B30_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(cast(c AS int), c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND bitwise_shift_right(cast(c AS int), c_long) IN (0,
                                                      1,
                                                      2,
                                                      3);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   1 |
|   1 |
|   1 |
|   2 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B31_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(cast(c AS int), 1)+bitwise_xor(cast(c AS int), 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (bitwise_xor(cast(c AS int), 1)+bitwise_xor(cast(c AS int), 1)) IN (0,
                                                                          2,
                                                                          4,
                                                                          6);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   4 |
|   4 |
|   4 |
|   6 |
|   6 |
|   6 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B31_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(cast(c AS int), cast(c AS int)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND bitwise_xor(cast(c AS int), cast(c AS int)) IN (0);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B31_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(cast(c AS int), 1)+bitwise_xor(c_long, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (bitwise_xor(cast(c AS int), 1)+bitwise_xor(c_long, 1)) IN (0,
                                                                  1,
                                                                  2,
                                                                  3,
                                                                  4,
                                                                  5,
                                                                  6);
+-----+
| col |
+-----+
|   0 |
|   1 |
|   2 |
|   3 |
|   3 |
|   3 |
|   4 |
|   5 |
|   6 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B31_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(cast(c AS int), c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND bitwise_xor(cast(c AS int), c_long) IN (0,
                                              1,
                                              2,
                                              3);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   1 |
|   1 |
|   2 |
|   2 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B33_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(cast(c AS int))+human_readable_binary_byte_format(cast(c AS int)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (human_readable_binary_byte_format(cast(c AS int))+human_readable_binary_byte_format(cast(c AS int)))<>99999;
+-----+
| col |
+-----+
+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B33_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(cast(c AS int)+cast(c AS int)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND human_readable_binary_byte_format(cast(c AS int)+cast(c AS int)) IS NOT NULL;
+-----+
| col |
+-----+
| 2 B |
| 2 B |
| 2 B |
| 4 B |
| 4 B |
| 4 B |
| 6 B |
| 6 B |
| 6 B |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B33_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(cast(c AS int))+human_readable_binary_byte_format(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (human_readable_binary_byte_format(cast(c AS int))+human_readable_binary_byte_format(c_long))<>99999;
+-----+
| col |
+-----+
+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B33_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(cast(c AS int)+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND human_readable_binary_byte_format(c+c_long) IS NOT NULL;
+-----+
| col |
+-----+
| 1 B |
| 2 B |
| 2 B |
| 3 B |
| 3 B |
| 3 B |
| 4 B |
| 4 B |
| 5 B |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B34_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(cast(c AS int))+human_readable_decimal_byte_format(cast(c AS int)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (human_readable_decimal_byte_format(cast(c AS int))+human_readable_decimal_byte_format(cast(c AS int)))<>99999;
+-----+
| col |
+-----+
+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B34_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(cast(c AS int)+cast(c AS int)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND human_readable_decimal_byte_format(cast(c AS int)+cast(c AS int)) IS NOT NULL;
+-----+
| col |
+-----+
| 2 B |
| 2 B |
| 2 B |
| 4 B |
| 4 B |
| 4 B |
| 6 B |
| 6 B |
| 6 B |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B34_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(cast(c AS int))+human_readable_decimal_byte_format(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (human_readable_decimal_byte_format(cast(c AS int))+human_readable_decimal_byte_format(c_long))<>99999;
+-----+
| col |
+-----+
+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B34_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(cast(c AS int)+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND human_readable_decimal_byte_format(cast(c AS int)+c_long) IS NOT NULL;
+-----+
| col |
+-----+
| 1 B |
| 2 B |
| 2 B |
| 3 B |
| 3 B |
| 3 B |
| 4 B |
| 4 B |
| 5 B |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B35_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(cast(c AS int))+human_readable_decimal_format(cast(c AS int)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (human_readable_decimal_format(cast(c AS int))+human_readable_decimal_format(cast(c AS int))) IN (0,
                                                                                                        2,
                                                                                                        4,
                                                                                                        6);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
| 6.0 |
| 6.0 |
| 6.0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B35_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(cast(c AS int)+cast(c AS int)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND human_readable_decimal_format(cast(c AS int)+cast(c AS int)) IN (0,
                                                                       2,
                                                                       4,
                                                                       6);
+-----+
| col |
+-----+
| 2   |
| 2   |
| 2   |
| 4   |
| 4   |
| 4   |
| 6   |
| 6   |
| 6   |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B35_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(cast(c AS int))+ceil(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND human_readable_decimal_format(cast(c AS int))+ceil(c_long) IN (0,
                                                                     1,
                                                                     2,
                                                                     3,
                                                                     4,
                                                                     5);
+-----+
| col |
+-----+
|   1 |
|   2 |
|   2 |
|   3 |
|   3 |
|   3 |
|   4 |
|   4 |
|   5 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B35_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(cast(c AS int)+c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND human_readable_decimal_format(cast(c AS int)+c_long) IN (0,
                                                               1,
                                                               2,
                                                               3,
                                                               4,
                                                               5);
+-----+
| col |
+-----+
| 1   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
| 4   |
| 4   |
| 5   |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B36_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(cast(c AS int), 0)+safe_divide(cast(c AS int), 0) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (safe_divide(cast(c AS int), 0)+safe_divide(cast(c AS int), 0)) IN (0);
+-----+
| col |
+-----+
+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B36_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(cast(c AS int), cast(c AS int)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND safe_divide(cast(c AS int), cast(c AS int)) IN (0,
                                                      1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B36_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(cast(c AS int), 0)+safe_divide(c_long, 0) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (safe_divide(cast(c AS int), 0)+safe_divide(c_long, 0)) IN (0);
+-----+
| col |
+-----+
+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B36_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(cast(c AS int), c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND safe_divide(cast(c AS int), c_long) IN (0,
                                              1,
                                              2,
                                              3);
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
|   1 |
|   2 |
|   3 |
+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT concat(c, c)||concat(c, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (concat(c, c)||concat(c, c)) IN ('',
                                       '1111',
                                       '2222',
                                       '3333');
+------+
| col  |
+------+
|      |
|      |
|      |
| 1111 |
| 1111 |
| 1111 |
| 2222 |
| 2222 |
| 2222 |
| 3333 |
| 3333 |
| 3333 |
+------+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT concat(c, c_long)||concat(c, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (concat(c, c_long)||concat(c, c_long)) IN ('00',
                                                 '1010',
                                                 '2020',
                                                 '3030',
                                                 '11',
                                                 '1111',
                                                 '2121',
                                                 '3131',
                                                 '22',
                                                 '1212',
                                                 '2222',
                                                 '3232');
+------+
| col  |
+------+
| 00   |
| 1010 |
| 11   |
| 1111 |
| 1212 |
| 2020 |
| 2121 |
| 22   |
| 2222 |
| 3030 |
| 3131 |
| 3232 |
+------+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(c, c)||textcat(c, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (textcat(c, c)||textcat(c, c)) IN ('',
                                         '1111',
                                         '2222',
                                         '3333');
+------+
| col  |
+------+
|      |
|      |
|      |
| 1111 |
| 1111 |
| 1111 |
| 2222 |
| 2222 |
| 2222 |
| 3333 |
| 3333 |
| 3333 |
+------+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B2_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(c, cast(c_long AS char))||textcat(c, cast(c_long AS char)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (textcat(c, cast(c_long AS char))||textcat(c, cast(c_long AS char))) IN ('00',
                                                                               '1010',
                                                                               '2020',
                                                                               '3030',
                                                                               '11',
                                                                               '1111',
                                                                               '2121',
                                                                               '3131',
                                                                               '22',
                                                                               '1212',
                                                                               '2222',
                                                                               '3232');
+------+
| col  |
+------+
| 00   |
| 1010 |
| 11   |
| 1111 |
| 1212 |
| 2020 |
| 2121 |
| 22   |
| 2222 |
| 3030 |
| 3131 |
| 3232 |
+------+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B3_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_format('%sZ', c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND string_format('%sZ', c) IN ('nullZ',
                                  '1Z',
                                  '2Z',
                                  '3Z');
+-------+
| col   |
+-------+
| 1Z    |
| 1Z    |
| 1Z    |
| 2Z    |
| 2Z    |
| 2Z    |
| 3Z    |
| 3Z    |
| 3Z    |
| nullZ |
| nullZ |
| nullZ |
+-------+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B3_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_format('%sZ', c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND string_format('%sZ', c_long) IN ('0Z',
                                       '1Z',
                                       '2Z');
+-----+
| col |
+-----+
| 0Z  |
| 0Z  |
| 0Z  |
| 0Z  |
| 0Z  |
| 1Z  |
| 1Z  |
| 1Z  |
| 1Z  |
| 1Z  |
| 2Z  |
| 2Z  |
| 2Z  |
| 2Z  |
| 2Z  |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B4_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT length(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND length(c) IN (0,
                    1);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B4_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT length(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND length(c_long) IN (1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B5_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND char_length(c) IN (0,
                         1);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B5_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND char_length(c_long) IN (1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B6_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND character_length(c) IN (0,
                              1);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B6_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND character_length(c_long) IN (1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B7_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND strlen(c) IN (0,
                    1);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B7_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND strlen(c_long) IN (1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B8_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT lower(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND lower(c)!='ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B8_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT lower(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND lower(c_long) IN ('0',
                        '1',
                        '2');
+-----+
| col |
+-----+
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B9_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT upper(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND upper(c)!='ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B9_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT upper(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND upper(c_long) IN ('0',
                        '1',
                        '2');
+-----+
| col |
+-----+
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B10_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND parse_long(c) IN (0,
                        1,
                        2,
                        3);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B10_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(cast(c_long AS char)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND parse_long(cast(c_long AS char)) IN (0,
                                           1,
                                           2);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|   2 |
|   2 |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B11_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT position(c IN c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND position(c IN c) IN (1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B11_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT position(c_long IN c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND position(c_long IN c) IN (0,
                                1);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   1 |
|   1 |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B11_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT position(c IN c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND position(c IN c_long) IN (0,
                                1);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B11_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT position(c_long IN c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND position(c_long IN c_long) IN (1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B12_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(c, '.*') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND regexp_extract(c, '.*')!='ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B12_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(cast(c_long AS char), '.*') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND regexp_extract(cast(c_long AS char), '.*')!='ABCD';
+-----+
| col |
+-----+
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B13_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(c, '.*') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
|      |
|      |
|      |
+------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B13_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(cast(c_long AS char), '.*') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND regexp_like(cast(c_long AS char), '.*') IS TRUE;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B14_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(c, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (contains_string(c, '1') IS TRUE
       OR contains_string(c, '1') IS FALSE);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
+-------+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B14_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(cast(c_long AS char), '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (contains_string(cast(c_long AS char), '1') IS TRUE
       OR contains_string(cast(c_long AS char), '1') IS FALSE);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
| true  |
| true  |
+-------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B15_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(c, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (icontains_string(c, '1') IS TRUE
       OR icontains_string(c, '1') IS FALSE);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
+-------+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B15_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(cast(c_long AS char), '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (icontains_string(cast(c_long AS char), '1') IS TRUE
       OR icontains_string(cast(c_long AS char), '1') IS FALSE);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
| true  |
| true  |
+-------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B16_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT replace(c, '1', 'Z') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND replace(c, '1', 'Z')<>'ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
| Z   |
| Z   |
| Z   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B16_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT replace(c_long, '1', 'Z') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND replace(c_long, '1', 'Z')<>'ABCD';
+-----+
| col |
+-----+
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
| Z   |
| Z   |
| Z   |
| Z   |
| Z   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B17_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(c, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND strpos(c, c) IN (1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B17_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(cast(c_long AS char), c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND strpos(cast(c_long AS char), c) IN (0,
                                          1);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B17_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(c, cast(c_long AS char)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND strpos(c, cast(c_long AS char)) IN (0,
                                          1);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   1 |
|   1 |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B17_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(cast(c_long AS char), cast(c_long AS char)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND strpos(cast(c_long AS char), cast(c_long AS char)) IN (1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B18_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT substring(c, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND substring(c, 1)<>'ABCD';
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B18_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT substring(cast(c_long AS char), 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND substring(cast(c_long AS char), 1) IN ('0',
                                             '1',
                                             '2');
+-----+
| col |
+-----+
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B19_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT right(c, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND right(c, 1)<>'ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B19_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT right(cast(c_long AS char), 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND right(cast(c_long AS char), 1) IN ('0',
                                         '1',
                                         '2');
+-----+
| col |
+-----+
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B20_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT left(c, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND left(c, 1)<>'ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B20_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT left(cast(c_long AS char), 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND left(cast(c_long AS char), 1) IN ('0',
                                        '1',
                                        '2');
+-----+
| col |
+-----+
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B21_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT substr(c, 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND substr(c, 1)<>'ABCD';
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B21_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT substr(cast(c_long AS char), 1) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND substr(cast(c_long AS char), 1) IN ('0',
                                          '1',
                                          '2');
+-----+
| col |
+-----+
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B22_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT trim(BOTH '1'
            FROM c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND trim(BOTH '1'
           FROM c)<>'ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B22_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT trim(BOTH '1'
            FROM c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND trim(BOTH '1'
           FROM c_long)<>'ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B23_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(c, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND btrim(c, '1')<>'ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B23_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(cast(c_long AS char), '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND btrim(cast(c_long AS char), '1')<>'ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B24_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(c, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND ltrim(c, '1')<>'ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B24_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(cast(c_long AS char), '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND ltrim(cast(c_long AS char), '1')<>'ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B25_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(c, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND rtrim(c, '1')<>'ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B25_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(cast(c_long AS char), '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND rtrim(cast(c_long AS char), '1')<>'ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B26_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND reverse(c)<>'ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B26_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(cast(c_long AS char)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND reverse(cast(c_long AS char)) IN ('0',
                                        '1',
                                        '2');
+-----+
| col |
+-----+
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B27_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(c, 2) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND repeat(c, 2)<>'ABCD';
+-----+
| col |
+-----+
|     |
|     |
|     |
| 11  |
| 11  |
| 11  |
| 22  |
| 22  |
| 22  |
| 33  |
| 33  |
| 33  |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B27_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(cast(c_long AS char), 2) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND repeat(cast(c_long AS char), 2) IN ('00',
                                          '11',
                                          '22');
+-----+
| col |
+-----+
| 00  |
| 00  |
| 00  |
| 00  |
| 00  |
| 11  |
| 11  |
| 11  |
| 11  |
| 11  |
| 22  |
| 22  |
| 22  |
| 22  |
| 22  |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B28_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(c, 3, 'Z') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND lpad(c, 3, 'Z')<>'ABCD';
+-----+
| col |
+-----+
| ZZ1 |
| ZZ1 |
| ZZ1 |
| ZZ2 |
| ZZ2 |
| ZZ2 |
| ZZ3 |
| ZZ3 |
| ZZ3 |
| ZZZ |
| ZZZ |
| ZZZ |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B28_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(cast(c_long AS char), 3, 'Z') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND lpad(cast(c_long AS char), 3, 'Z') IN ('ZZ0',
                                             'ZZ1',
                                             'ZZ2');
+-----+
| col |
+-----+
| ZZ0 |
| ZZ0 |
| ZZ0 |
| ZZ0 |
| ZZ0 |
| ZZ1 |
| ZZ1 |
| ZZ1 |
| ZZ1 |
| ZZ1 |
| ZZ2 |
| ZZ2 |
| ZZ2 |
| ZZ2 |
| ZZ2 |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B29_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(c, 3, 'Z') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND rpad(c, 3, 'Z')<>'ABCD';
+-----+
| col |
+-----+
| 1ZZ |
| 1ZZ |
| 1ZZ |
| 2ZZ |
| 2ZZ |
| 2ZZ |
| 3ZZ |
| 3ZZ |
| 3ZZ |
| ZZZ |
| ZZZ |
| ZZZ |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B29_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(cast(c_long AS char), 3, 'Z') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND rpad(cast(c_long AS char), 3, 'Z') IN ('0ZZ',
                                             '1ZZ',
                                             '2ZZ');
+-----+
| col |
+-----+
| 0ZZ |
| 0ZZ |
| 0ZZ |
| 0ZZ |
| 0ZZ |
| 1ZZ |
| 1ZZ |
| 1ZZ |
| 1ZZ |
| 1ZZ |
| 2ZZ |
| 2ZZ |
| 2ZZ |
| 2ZZ |
| 2ZZ |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT CURRENT_TIMESTAMP AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
     AND CURRENT_TIMESTAMP IS NOT NULL);
+-----+
| cnt |
+-----+
|  15 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT CURRENT_DATE AS col
   FROM test_unnest,
        unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
   WHERE c_long IN (0,
                    1,
                    2)
     AND CURRENT_DATE IS NOT NULL);
+-----+
| cnt |
+-----+
|  15 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B3_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND date_trunc('year', c) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B3_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND date_trunc('year', c_long) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B4_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(c, 'P1D') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND time_ceil(c, 'P1D') IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B4_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(c_long, 'P1D') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND time_ceil(c_long, 'P1D') IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B5_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(c, 'P1D') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND time_floor(c, 'P1D') IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B5_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(c_long, 'P1D') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND time_floor(c_long, 'P1D') IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B6_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(c, 'P1D') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND time_shift(c, 'P1D') IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B6_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(c_long, 'P1D') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND time_shift(c_long, 'P1D') IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B7_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(c, 'HOUR') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND time_extract(c, 'HOUR') IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B7_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(c_long, 'HOUR') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND time_extract(c_long, 'HOUR') IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B8_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND time_parse(c) IS NOT NULL;
+-------------------------+
| col                     |
+-------------------------+
| 0001-01-01 00:00:00.000 |
| 0001-01-01 00:00:00.000 |
| 0001-01-01 00:00:00.000 |
| 0002-01-01 00:00:00.000 |
| 0002-01-01 00:00:00.000 |
| 0002-01-01 00:00:00.000 |
| 0003-01-01 00:00:00.000 |
| 0003-01-01 00:00:00.000 |
| 0003-01-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B8_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(cast(c_long AS char)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND time_parse(cast(c_long AS char)) IS NOT NULL;
+-------------------------+
| col                     |
+-------------------------+
| 0000-01-01 00:00:00.000 |
| 0000-01-01 00:00:00.000 |
| 0000-01-01 00:00:00.000 |
| 0000-01-01 00:00:00.000 |
| 0000-01-01 00:00:00.000 |
| 0001-01-01 00:00:00.000 |
| 0001-01-01 00:00:00.000 |
| 0001-01-01 00:00:00.000 |
| 0001-01-01 00:00:00.000 |
| 0001-01-01 00:00:00.000 |
| 0002-01-01 00:00:00.000 |
| 0002-01-01 00:00:00.000 |
| 0002-01-01 00:00:00.000 |
| 0002-01-01 00:00:00.000 |
| 0002-01-01 00:00:00.000 |
+-------------------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B9_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(c, '2001-01-01/P1D') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND time_in_interval(c, '2001-01-01/P1D') IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B9_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(c_long, '2001-01-01/P1D') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND time_in_interval(c, '2001-01-01/P1D') IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B10_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(cast(c AS int)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND millis_to_timestamp(cast(c AS int))<>'2000-01-01T00:00:00.000Z';
+-------------------------+
| col                     |
+-------------------------+
| 1970-01-01 00:00:00.001 |
| 1970-01-01 00:00:00.001 |
| 1970-01-01 00:00:00.001 |
| 1970-01-01 00:00:00.002 |
| 1970-01-01 00:00:00.002 |
| 1970-01-01 00:00:00.002 |
| 1970-01-01 00:00:00.003 |
| 1970-01-01 00:00:00.003 |
| 1970-01-01 00:00:00.003 |
|                         |
|                         |
|                         |
+-------------------------+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B10_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND millis_to_timestamp(c_long)<>'2000-01-01T00:00:00.000Z';
+-------------------------+
| col                     |
+-------------------------+
| 1970-01-01 00:00:00.000 |
| 1970-01-01 00:00:00.000 |
| 1970-01-01 00:00:00.000 |
| 1970-01-01 00:00:00.000 |
| 1970-01-01 00:00:00.000 |
| 1970-01-01 00:00:00.001 |
| 1970-01-01 00:00:00.001 |
| 1970-01-01 00:00:00.001 |
| 1970-01-01 00:00:00.001 |
| 1970-01-01 00:00:00.001 |
| 1970-01-01 00:00:00.002 |
| 1970-01-01 00:00:00.002 |
| 1970-01-01 00:00:00.002 |
| 1970-01-01 00:00:00.002 |
| 1970-01-01 00:00:00.002 |
+-------------------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B11_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND timestamp_to_millis(c) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B11_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND timestamp_to_millis(c_long) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B12_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND extract(DAY
              FROM c) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B12_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND extract(DAY
              FROM c_long) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B13_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(c TO DAY) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND floor(c TO DAY) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B13_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(c_long TO DAY) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND floor(c_long TO DAY) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B14_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(c TO DAY) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND ceil(c TO DAY) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B14_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(c_long TO DAY) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND ceil(c_long TO DAY) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B15_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND timestampadd(DAY, 1, c) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B15_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND timestampadd(DAY, 1, c_long) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B16_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, c, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND timestampdiff(DAY, c, c) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B16_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, c_long, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND timestampdiff(DAY, c_long, c) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B16_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, c, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND timestampdiff(DAY, c, c_long) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B16_C4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, c_long, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND timestampdiff(DAY, c_long, c_long) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_reduction_funcs TEST_ID: A1_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(c, c, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND greatest(c, c, '1') IN ('1',
                              '2',
                              '3');
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_reduction_funcs TEST_ID: A1_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(c, c_long, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND greatest(c, c_long, '1') IN ('1',
                                   '2',
                                   '3');
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_reduction_funcs TEST_ID: A1_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT least(c, c, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND least(c, c, '1') IN ('1');
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_reduction_funcs TEST_ID: A1_B2_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT least(c, c_long, '1') AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND least(c, c_long, '1') IN ('0',
                                '1');
+-----+
| col |
+-----+
| 0   |
| 0   |
| 0   |
| 0   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_ipaddr_funcs TEST_ID: A1_B1_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ip4_match(c, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND ip4_match(c, c) IS TRUE;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_ipaddr_funcs TEST_ID: A1_B1_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ip4_match(c, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND ip4_match(c, c_long) IS TRUE;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_ipaddr_funcs TEST_ID: A1_B2_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ip4_parse(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND ip4_parse(c) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_ipaddr_funcs TEST_ID: A1_B2_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ip4_parse(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND ip4_parse(c_long) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_ipaddr_funcs TEST_ID: A1_B3_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ip4_stringify(c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND ip4_stringify(c) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_ipaddr_funcs TEST_ID: A1_B3_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ip4_stringify(c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND ip4_stringify(c_long) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(c AS int) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (c IS NULL
       OR cast(c AS int) IN (1,
                             2,
                             3));
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|   3 |
|   3 |
|   3 |
|     |
|     |
|     |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(c_long AS char) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND cast(c_long AS char) IN ('0',
                               '1',
                               '2');
+-----+
| col |
+-----+
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE c
            WHEN '1' THEN 'V1'
            ELSE 'V2'
        END) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (CASE c
           WHEN '1' THEN 'V1'
           ELSE 'V2'
       END) IN ('V1',
                'V2');
+-----+
| col |
+-----+
| V1  |
| V1  |
| V1  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B2_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE c_long
            WHEN 1 THEN 'V1'
            ELSE 'V2'
        END) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (CASE c_long
           WHEN 1 THEN 'V1'
           ELSE 'V2'
       END) IN ('V1',
                'V2');
+-----+
| col |
+-----+
| V1  |
| V1  |
| V1  |
| V1  |
| V1  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B3_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN c='1' THEN 'V1'
            ELSE 'V2'
        END) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (CASE
           WHEN c='1' THEN 'V1'
           ELSE 'V2'
       END) IN ('V1',
                'V2');
+-----+
| col |
+-----+
| V1  |
| V1  |
| V1  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B3_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN c_long=1 THEN 'V1'
            ELSE 'V2'
        END) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND (CASE
           WHEN c_long=1 THEN 'V1'
           ELSE 'V2'
       END) IN ('V1',
                'V2');
+-----+
| col |
+-----+
| V1  |
| V1  |
| V1  |
| V1  |
| V1  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
| V2  |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B4_C1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(c, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND nullif(c, c) IN ('',
                       '1',
                       '2',
                       '3');
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B4_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(c, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND nullif(c, c_long) IN ('',
                            '1',
                            '2',
                            '3');
+-----+
| col |
+-----+
|     |
|     |
|     |
| 1   |
| 1   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(10 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B4_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(c_long, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND cast(nullif(c_long, c) AS char) IN ('',
                                          '0',
                                          '1',
                                          '2');
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   1 |
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|   2 |
+-----+
(13 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B4_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(c_long, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND nullif(c_long, c_long) IS NULL;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B5_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(c, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND coalesce(c, c) IN ('',
                         '1',
                         '2',
                         '3');
+-----+
| col |
+-----+
|     |
|     |
|     |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B5_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(c, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND coalesce(c, c_long) IN (0,
                              1,
                              2,
                              3);
+-----+
| col |
+-----+
| 0   |
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B5_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(c_long, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND coalesce(c_long, c) IN (0,
                              1,
                              2);
+-----+
| col |
+-----+
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B5_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(c_long, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND coalesce(c_long, c_long) IN (0,
                                   1,
                                   2);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|   2 |
|   2 |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B6_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(c, c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND nvl(c, c) IN ('',
                    '1',
                    '2',
                    '3');
+-----+
| col |
+-----+
|     |
|     |
|     |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B6_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(c, cast(c_long AS char)) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND nvl(c, cast(c_long AS char)) IN (1,
                                       2,
                                       3);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 2   |
| 3   |
| 3   |
| 3   |
+-----+
(11 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B6_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(cast(c_long AS char), c) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND nvl(cast(c_long AS char), c) IN (0,
                                       1,
                                       2);
+-----+
| col |
+-----+
| 0   |
| 0   |
| 0   |
| 0   |
| 0   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
| 2   |
| 2   |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B6_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(c_long, c_long) AS col
FROM test_unnest,
     unnest(mv_to_array(c_mv_num_with_null_and_empty_val)) AS u(c)
WHERE c_long IN (0,
                 1,
                 2)
  AND nvl(c_long, c_long) IN (0,
                              1,
                              2);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|   2 |
|   2 |
+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# Total query count 261 Positive tests: 228 Negative tests: 33
#-------------------------------------------------------------------------
