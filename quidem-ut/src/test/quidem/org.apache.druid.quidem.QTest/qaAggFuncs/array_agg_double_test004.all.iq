!set dartQueryId 00000000-0000-0000-0000-000000000000
!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardAndMSQComponentSupplier&datasets=sql/src/test/quidem/qatests/qaAggFuncs
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: SEL_DATASOURCE
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_agg_funcs;
+-----+
| cnt |
+-----+
|  18 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A01
#-------------------------------------------------------------------------
SELECT array_agg(111.1111111, 100000);
org.apache.calcite.avatica.AvaticaSqlException: Error -1 (00000) : Error while executing SQL "SELECT array_agg(111.1111111, 100000)": Remote driver error: QueryInterruptedException: Query could not be planned. A possible reason is [Aggregation [ARRAY_AGG($0, $1)] is not supported] -> DruidException: Query could not be planned. A possible reason is [Aggregation [ARRAY_AGG($0, $1)] is not supported] -> CannotPlanException: There are not enough rules to produce a node with desired properties: convention=DRUID, sort=[].
Missing conversion is LogicalAggregate[convention: NONE -> DRUID]
There is 1 empty subset: rel#82282:RelSubset#1.DRUID.[], the relevant part of the original plan is as follows
82280:LogicalAggregate(group=[{}], EXPR$0=[ARRAY_AGG($0, $1)])
  82265:LogicalValues(subset=[rel#82279:RelSubset#0.NONE.[]], tuples=[[{ 111.1111111, 100000 }]])

Root: rel#82282:RelSubset#1.DRUID.[]
Original rel:
LogicalAggregate(subset=[rel#82282:RelSubset#1.DRUID.[]], group=[{}], EXPR$0=[ARRAY_AGG($0, $1)]): rowcount = 1.0, cumulative cost = {1.125 rows, 0.0 cpu, 0.0 io}, id = 82280
  LogicalValues(subset=[rel#82279:RelSubset#0.NONE.[]], tuples=[[{ 111.1111111, 100000 }]]): rowcount = 1.0, cumulative cost = {1.0 rows, 1.0 cpu, 0.0 io}, id = 82265

	at org.apache.calcite.avatica.Helper.createException(Helper.java:54)
	at org.apache.calcite.avatica.Helper.createException(Helper.java:41)
	at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:164)
	at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:228)
	at net.hydromatic.quidem.Quidem.checkResult(Quidem.java:299)
	at net.hydromatic.quidem.Quidem.access$2600(Quidem.java:57)
	at net.hydromatic.quidem.Quidem$ContextImpl.checkResult(Quidem.java:1636)
	at net.hydromatic.quidem.Quidem$CheckResultCommand.execute(Quidem.java:941)
	at net.hydromatic.quidem.Quidem$CompositeCommand.execute(Quidem.java:1437)
	at net.hydromatic.quidem.Quidem.execute(Quidem.java:190)
	at org.apache.druid.quidem.DruidQuidemTestBase$DruidQuidemRunner.run(DruidQuidemTestBase.java:306)
	at org.apache.druid.quidem.DruidQuidemTestBase.test(DruidQuidemTestBase.java:247)
	at jdk.internal.reflect.GeneratedMethodAccessor238.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:728)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestTemplateMethod(TimeoutExtension.java:94)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:218)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:214)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:139)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:142)
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:110)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:110)
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:44)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
QueryInterruptedException{msg=Query could not be planned. A possible reason is [Aggregation [ARRAY_AGG($0, $1)] is not supported], code=Unknown exception, class=org.apache.druid.error.DruidException, host=null}
	at org.apache.druid.query.QueryInterruptedException.wrapIfNeeded(QueryInterruptedException.java:113)
	at org.apache.druid.sql.avatica.ErrorHandler.sanitize(ErrorHandler.java:82)
	at org.apache.druid.sql.avatica.DruidMeta.mapException(DruidMeta.java:395)
	at org.apache.druid.sql.avatica.DruidMeta.prepareAndExecute(DruidMeta.java:362)
	at org.apache.calcite.avatica.remote.LocalService.apply(LocalService.java:212)
	at org.apache.calcite.avatica.remote.Service$PrepareAndExecuteRequest.accept(Service.java:952)
	at org.apache.calcite.avatica.remote.Service$PrepareAndExecuteRequest.accept(Service.java:904)
	at org.apache.calcite.avatica.remote.AbstractHandler.apply(AbstractHandler.java:94)
	at org.apache.calcite.avatica.remote.JsonHandler.apply(JsonHandler.java:52)
	at org.apache.calcite.avatica.server.AvaticaJsonHandler.handle(AvaticaJsonHandler.java:133)
	at org.apache.druid.sql.avatica.DruidAvaticaJsonHandler.handle(DruidAvaticaJsonHandler.java:61)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:487)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:732)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:479)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:277)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:338)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:315)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:173)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:131)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:409)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:883)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:1034)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.apache.druid.error.DruidException: Query could not be planned. A possible reason is [Aggregation [ARRAY_AGG($0, $1)] is not supported]
	at org.apache.druid.sql.calcite.planner.QueryHandler.buildSQLPlanningError(QueryHandler.java:687)
	at org.apache.druid.sql.calcite.planner.QueryHandler.plan(QueryHandler.java:213)
	at org.apache.druid.sql.calcite.planner.DruidPlanner.plan(DruidPlanner.java:277)
	at org.apache.druid.sql.DirectStatement.createPlan(DirectStatement.java:261)
	at org.apache.druid.sql.DirectStatement.plan(DirectStatement.java:218)
	at org.apache.druid.sql.DirectStatement.execute(DirectStatement.java:184)
	at org.apache.druid.sql.avatica.DruidJdbcResultSet.lambda$execute$0(DruidJdbcResultSet.java:239)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	... 1 more
Caused by: org.apache.calcite.plan.RelOptPlanner$CannotPlanException: There are not enough rules to produce a node with desired properties: convention=DRUID, sort=[].
Missing conversion is LogicalAggregate[convention: NONE -> DRUID]
There is 1 empty subset: rel#82282:RelSubset#1.DRUID.[], the relevant part of the original plan is as follows
82280:LogicalAggregate(group=[{}], EXPR$0=[ARRAY_AGG($0, $1)])
  82265:LogicalValues(subset=[rel#82279:RelSubset#0.NONE.[]], tuples=[[{ 111.1111111, 100000 }]])

Root: rel#82282:RelSubset#1.DRUID.[]
Original rel:
LogicalAggregate(subset=[rel#82282:RelSubset#1.DRUID.[]], group=[{}], EXPR$0=[ARRAY_AGG($0, $1)]): rowcount = 1.0, cumulative cost = {1.125 rows, 0.0 cpu, 0.0 io}, id = 82280
  LogicalValues(subset=[rel#82279:RelSubset#0.NONE.[]], tuples=[[{ 111.1111111, 100000 }]]): rowcount = 1.0, cumulative cost = {1.0 rows, 1.0 cpu, 0.0 io}, id = 82265

	at org.apache.calcite.plan.volcano.RelSubset$CheapestPlanReplacer.visit(RelSubset.java:718)
	at org.apache.calcite.plan.volcano.RelSubset.buildCheapestPlan(RelSubset.java:391)
	at org.apache.calcite.plan.volcano.VolcanoPlanner.findBestExp(VolcanoPlanner.java:534)
	at org.apache.calcite.tools.Programs$RuleSetProgram.run(Programs.java:328)
	at org.apache.calcite.tools.Programs$SequenceProgram.run(Programs.java:348)
	at org.apache.druid.sql.calcite.planner.CalcitePlanner.transform(CalcitePlanner.java:456)
	at org.apache.druid.sql.calcite.planner.QueryHandler.planWithDruidConvention(QueryHandler.java:586)
	at org.apache.druid.sql.calcite.planner.QueryHandler$SelectHandler.planForDruid(QueryHandler.java:739)
	at org.apache.druid.sql.calcite.planner.QueryHandler.plan(QueryHandler.java:209)
	... 9 more

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A02
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT array_agg(tab0d0, 100000) AS col
   FROM test_agg_funcs)
WHERE NOT array_contains(col, 99999)
  OR col IS NULL;
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A03
#-------------------------------------------------------------------------
SELECT array_length(array_agg(tab0d0, 100000)) AS col
FROM test_agg_funcs;
+-----+
| col |
+-----+
|  18 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A04
#-------------------------------------------------------------------------
SELECT array_offset(array_agg(tab0d0, 100000), 100) AS col
FROM test_agg_funcs
WHERE tab0d0>111
  AND tab0d0<222;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A05
#-------------------------------------------------------------------------
SELECT array_ordinal(array_agg(tab0d0, 100000), 100) AS col
FROM test_agg_funcs
WHERE tab0d0>222;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A06
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT array_contains(array_agg(tab0d0, 100000), 111.1111111) AS col
   FROM test_agg_funcs)
WHERE col IS TRUE
  OR col IS FALSE
  OR col IS NULL;
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A07
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT array_contains(array_agg(tab0d0, 100000), array[111.1111111, 222.2222222]) AS col
   FROM test_agg_funcs)
WHERE col IS TRUE
  OR col IS FALSE
  OR col IS NULL;
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A08
#-------------------------------------------------------------------------
SELECT array_contains(array_agg(tab0d0, 100000), 333.3333333) AS col
FROM test_agg_funcs;
+-------+
| col   |
+-------+
| false |
+-------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A09
#-------------------------------------------------------------------------
SELECT array_contains(array_agg(tab0d0, 100000), array[111.1111111, 333.3333333]) AS col
FROM test_agg_funcs;
+-------+
| col   |
+-------+
| false |
+-------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A10
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT array_overlap(array_agg(tab0d0, 100000), array[111.1111111, 333.3333333]) AS col
   FROM test_agg_funcs)
WHERE col IS TRUE
  OR col IS FALSE
  OR col IS NULL;
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A11
#-------------------------------------------------------------------------
SELECT array_overlap(array_agg(tab0d0, 100000), array[333.3333333, 444.4444444]) AS col
FROM test_agg_funcs;
+-------+
| col   |
+-------+
| false |
+-------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A12
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT array_overlap(array_agg(tab0d0, 100000), array_agg(tab0d0, 100000)) AS col
   FROM test_agg_funcs)
WHERE col IS TRUE
  OR col IS FALSE
  OR col IS NULL;
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A13
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT array_offset_of(array_agg(tab0d0, 100000), 111.1111111) AS col
   FROM test_agg_funcs
   WHERE tab0d0>111
     AND tab0d0<222)
WHERE col != 99999
  OR col IS NULL;
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A14
#-------------------------------------------------------------------------
SELECT array_offset_of(array_agg(tab0d0, 100000), 333.3333333) AS col
FROM test_agg_funcs
WHERE tab0d0>111
  AND tab0d0<222;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A15
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT array_ordinal_of(array_agg(tab0d0, 100000), 111.1111111) AS col
   FROM test_agg_funcs
   WHERE tab0d0>111
     AND tab0d0<222)
WHERE col != 99999
  OR col IS NULL;
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A16
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array_agg(tab0d0, 100000), 333.3333333) AS col
FROM test_agg_funcs
WHERE tab0d0>111
  AND tab0d0<222;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A17
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT array_to_string(array_agg(tab0d0, 100000), '|') AS col
   FROM test_agg_funcs)
WHERE col != 'ABCD'
  OR col IS NULL;
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A18
#-------------------------------------------------------------------------
SELECT contains_string(array_to_string(array_agg(tab0d0, 100000), '|'), '111.')
AND contains_string(array_to_string(array_agg(tab0d0, 100000), '|'), '|') AS col
FROM test_agg_funcs;
+------+
| col  |
+------+
| true |
+------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A19
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT array_prepend(333.3333333, array_agg(tab0d0, 100000)) AS col
   FROM test_agg_funcs)
WHERE NOT array_contains(col, 99999)
  OR col IS NULL;
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A20
#-------------------------------------------------------------------------
SELECT array_length(array_prepend(333.3333333, array_agg(tab0d0, 100000))) AS col
FROM test_agg_funcs;
+-----+
| col |
+-----+
|  19 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A21
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT array_append(array_agg(tab0d0, 100000), 333.3333333) AS col
   FROM test_agg_funcs)
WHERE NOT array_contains(col, 99999)
  OR col IS NULL;
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A22
#-------------------------------------------------------------------------
SELECT array_length(array_append(array_agg(tab0d0, 100000), 333.3333333)) AS col
FROM test_agg_funcs;
+-----+
| col |
+-----+
|  19 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A23
#-------------------------------------------------------------------------
SELECT array_length(array_concat(array_agg(tab0d0, 100000), array[333.3333333])) AS col
FROM test_agg_funcs;
+-----+
| col |
+-----+
|  19 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A24
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT array_concat(array_agg(tab0d0, 100000), array_agg(tab0d0, 100000)) AS col
   FROM test_agg_funcs)
WHERE NOT array_contains(col, 99999)
  OR col IS NULL;
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A25
#-------------------------------------------------------------------------
SELECT array_length(array_concat(array_agg(tab0d0, 100000), array_agg(tab0d0, 100000))) AS col
FROM test_agg_funcs;
+-----+
| col |
+-----+
|  36 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A26
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT array_slice(array_agg(tab0d0, 100000), 0, 1) AS col
   FROM test_agg_funcs
   WHERE tab0d0>111
     AND tab0d0<222)
WHERE NOT array_contains(col, 99999)
  OR col IS NULL;
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A27
#-------------------------------------------------------------------------
SELECT array_slice(array_agg(tab0d0, 100000), 100, 101) AS col
FROM test_agg_funcs
WHERE tab0d0>111
  AND tab0d0<222;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A28
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT array_agg(t0.tab0d0, 100000) AS col
   FROM test_agg_funcs t0,
        test_agg_funcs t1,
        test_agg_funcs t2
   WHERE t0.tab0d0 IS NOT NULL)
WHERE NOT array_contains(col, 99999)
  OR col IS NULL;
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A29
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT array_to_string(array_agg(t0.tab0d0, 100000), '') AS col
   FROM test_agg_funcs t0,
        test_agg_funcs t1,
        test_agg_funcs t2
   WHERE t0.tab0d0 IS NOT NULL)
WHERE col != 'ABCD'
  OR col IS NULL;
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A30
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT length(array_to_string(array_agg(t0.tab0d0, 100000), '')) AS col
   FROM test_agg_funcs t0,
        test_agg_funcs t1,
        test_agg_funcs t2
   WHERE t0.tab0d0 IS NOT NULL)
WHERE col != 99999
  OR col IS NULL;
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A31
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT array_agg(t0.tab0d0, 100000) AS col
   FROM test_agg_funcs t0,
        test_agg_funcs t1,
        test_agg_funcs t2
   GROUP BY t0.tab0d0)
WHERE NOT array_contains(col, 99999)
  OR col IS NULL;
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A32
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT array_to_string(array_agg(t0.tab0d0, 100000), '') AS col
   FROM test_agg_funcs t0,
        test_agg_funcs t1,
        test_agg_funcs t2
   GROUP BY t0.tab0d0)
WHERE col != 'ABCD'
  OR col IS NULL;
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test004 TEST_ID: A33
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT length(array_to_string(array_agg(t0.tab0d0, 100000), '')) AS col
   FROM test_agg_funcs t0,
        test_agg_funcs t1,
        test_agg_funcs t2
   GROUP BY t0.tab0d0)
WHERE col != 99999
  OR col IS NULL;
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

