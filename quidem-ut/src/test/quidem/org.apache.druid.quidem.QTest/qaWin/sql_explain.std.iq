!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardComponentSupplier&datasets=sql/src/test/quidem/qatests/qaWin
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_sql_test_explain TEST_ID: SEL_DATASOURCE
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_win
WHERE client_ip IN ('107.13.54.103',
                    '99.9.55.22');
+-----+
| cnt |
+-----+
| 768 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_sql_test_explain TEST_ID: A1_G1_Q1
#-------------------------------------------------------------------------

SELECT server_ip,
       client_ip,
       timezone,
       cast(time_floor(__time, 'PT12H') AS char) t,
       first_value(timezone) OVER (PARTITION BY client_ip
                                   ORDER BY server_ip ASC, length(server_ip) ASC, cast(length(server_ip) AS DOUBLE)+0.123 ASC) FIRST,
                                                                                                                               last_value(timezone) OVER (PARTITION BY client_ip
                                                                                                                                                          ORDER BY server_ip ASC, length(server_ip) ASC, cast(length(server_ip) AS DOUBLE)+0.123 ASC) LAST,
                                                                                                                                                                                                                                                      count(timezone) OVER (PARTITION BY client_ip
                                                                                                                                                                                                                                                                            ORDER BY server_ip ASC, length(server_ip) ASC, cast(length(server_ip) AS DOUBLE)+0.123 ASC) cnt
FROM
  (SELECT server_ip,
          client_ip,
          timezone,
          time_floor(__time, 'PT12H') __time
   FROM test_win
   GROUP BY server_ip,
            client_ip,
            timezone,
            time_floor(__time, 'PT12H'))
WHERE client_ip IN ('107.13.54.103',
                    '99.9.55.22');
+--------------+---------------+----------+---------------------+-------+------+-----+
| server_ip    | client_ip     | timezone | t                   | FIRST | LAST | cnt |
+--------------+---------------+----------+---------------------+-------+------+-----+
| 172.31.11.5  | 107.13.54.103 | EDT      | 2019-08-25 00:00:00 | EDT   | EDT  |   3 |
| 172.31.11.5  | 107.13.54.103 | EDT      | 2019-08-25 12:00:00 | EDT   | EDT  |   3 |
| 172.31.11.5  | 107.13.54.103 | N/A      | 2019-08-25 12:00:00 | EDT   | N/A  |   3 |
| 172.31.11.5  | 99.9.55.22    | N/A      | 2019-08-25 12:00:00 | N/A   | N/A  |   1 |
| 172.31.57.89 | 107.13.54.103 | EDT      | 2019-08-25 00:00:00 | EDT   | EDT  |   6 |
| 172.31.57.89 | 107.13.54.103 | EDT      | 2019-08-25 12:00:00 | EDT   | EDT  |   6 |
| 172.31.57.89 | 107.13.54.103 | N/A      | 2019-08-25 12:00:00 | EDT   | N/A  |   6 |
| 172.31.57.89 | 99.9.55.22    | N/A      | 2019-08-25 12:00:00 | N/A   | N/A  |   2 |
+--------------+---------------+----------+---------------------+-------+------+-----+
(8 rows)

!ok

{
  "queryType" : "windowOperator",
  "dataSource" : {
    "type" : "query",
    "query" : {
      "queryType" : "groupBy",
      "dataSource" : {
        "type" : "table",
        "name" : "test_win"
      },
      "intervals" : {
        "type" : "intervals",
        "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
      },
      "virtualColumns" : [ {
        "type" : "expression",
        "name" : "v0",
        "expression" : "timestamp_floor(\"__time\",'PT12H',null,'UTC')",
        "outputType" : "LONG"
      } ],
      "filter" : {
        "type" : "inType",
        "column" : "client_ip",
        "matchValueType" : "STRING",
        "sortedValues" : [ "107.13.54.103", "99.9.55.22" ]
      },
      "granularity" : {
        "type" : "all"
      },
      "dimensions" : [ {
        "type" : "default",
        "dimension" : "server_ip",
        "outputName" : "d0",
        "outputType" : "STRING"
      }, {
        "type" : "default",
        "dimension" : "client_ip",
        "outputName" : "d1",
        "outputType" : "STRING"
      }, {
        "type" : "default",
        "dimension" : "timezone",
        "outputName" : "d2",
        "outputType" : "STRING"
      }, {
        "type" : "default",
        "dimension" : "v0",
        "outputName" : "d3",
        "outputType" : "LONG"
      } ],
      "postAggregations" : [ {
        "type" : "expression",
        "name" : "p0",
        "expression" : "timestamp_format(timestamp_floor(\"d3\",'PT12H',null,'UTC'),'yyyy-MM-dd HH:mm:ss','UTC')",
        "outputType" : "STRING"
      }, {
        "type" : "expression",
        "name" : "p1",
        "expression" : "strlen(\"d0\")",
        "outputType" : "LONG"
      }, {
        "type" : "expression",
        "name" : "p2",
        "expression" : "(CAST(strlen(\"d0\"), 'DOUBLE') + 0.123)",
        "outputType" : "DOUBLE"
      } ],
      "limitSpec" : {
        "type" : "NoopLimitSpec"
      }
    }
  },
  "intervals" : {
    "type" : "LegacySegmentSpec",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "outputSignature" : [ {
    "name" : "d0",
    "type" : "STRING"
  }, {
    "name" : "d1",
    "type" : "STRING"
  }, {
    "name" : "d2",
    "type" : "STRING"
  }, {
    "name" : "p0",
    "type" : "STRING"
  }, {
    "name" : "w0",
    "type" : "STRING"
  }, {
    "name" : "w1",
    "type" : "STRING"
  }, {
    "name" : "w2",
    "type" : "LONG"
  } ],
  "operatorDefinition" : [ {
    "type" : "naiveSort",
    "columns" : [ {
      "column" : "d1",
      "direction" : "ASC"
    }, {
      "column" : "d0",
      "direction" : "ASC"
    }, {
      "column" : "p1",
      "direction" : "ASC"
    }, {
      "column" : "p2",
      "direction" : "ASC"
    } ]
  }, {
    "type" : "naivePartition",
    "partitionColumns" : [ "d1" ]
  }, {
    "type" : "window",
    "processor" : {
      "type" : "composing",
      "processors" : [ {
        "type" : "first",
        "inputColumn" : "d2",
        "outputColumn" : "w0"
      }, {
        "type" : "offset",
        "inputColumn" : "d2",
        "outputColumn" : "w1",
        "offset" : 0
      }, {
        "type" : "framedAgg",
        "frame" : {
          "type" : "groups",
          "lowerOffset" : null,
          "upperOffset" : 0,
          "orderByColumns" : [ "d0", "p1", "p2" ]
        },
        "aggregations" : [ {
          "type" : "filtered",
          "aggregator" : {
            "type" : "count",
            "name" : "w2"
          },
          "filter" : {
            "type" : "not",
            "field" : {
              "type" : "null",
              "column" : "d2"
            }
          },
          "name" : "w2"
        } ]
      } ]
    }
  } ],
  "leafOperators" : [ ],
  "granularity" : {
    "type" : "all"
  }
}
!nativePlan

#-------------------------------------------------------------------------
# TESTCASE: test_sql_test_explain TEST_ID: A1_G1_Q2
#-------------------------------------------------------------------------

SELECT server_ip,
       client_ip,
       timezone,
       cast(time_floor(__time, 'PT12H') AS char) t,
       first_value(timezone) OVER w FIRST,
                                    last_value(timezone) OVER w LAST,
                                                                count(timezone) OVER w cnt
FROM
  (SELECT server_ip,
          client_ip,
          timezone,
          time_floor(__time, 'PT12H') __time
   FROM test_win
   GROUP BY server_ip,
            client_ip,
            timezone,
            time_floor(__time, 'PT12H'))
WHERE client_ip IN ('107.13.54.103',
                    '99.9.55.22') WINDOW w AS (PARTITION BY client_ip
                                               ORDER BY server_ip ASC,
                                                        length(server_ip) ASC, cast(length(server_ip) AS DOUBLE)+0.123 ASC);
+--------------+---------------+----------+---------------------+-------+------+-----+
| server_ip    | client_ip     | timezone | t                   | FIRST | LAST | cnt |
+--------------+---------------+----------+---------------------+-------+------+-----+
| 172.31.11.5  | 107.13.54.103 | EDT      | 2019-08-25 00:00:00 | EDT   | EDT  |   3 |
| 172.31.11.5  | 107.13.54.103 | EDT      | 2019-08-25 12:00:00 | EDT   | EDT  |   3 |
| 172.31.11.5  | 107.13.54.103 | N/A      | 2019-08-25 12:00:00 | EDT   | N/A  |   3 |
| 172.31.11.5  | 99.9.55.22    | N/A      | 2019-08-25 12:00:00 | N/A   | N/A  |   1 |
| 172.31.57.89 | 107.13.54.103 | EDT      | 2019-08-25 00:00:00 | EDT   | EDT  |   6 |
| 172.31.57.89 | 107.13.54.103 | EDT      | 2019-08-25 12:00:00 | EDT   | EDT  |   6 |
| 172.31.57.89 | 107.13.54.103 | N/A      | 2019-08-25 12:00:00 | EDT   | N/A  |   6 |
| 172.31.57.89 | 99.9.55.22    | N/A      | 2019-08-25 12:00:00 | N/A   | N/A  |   2 |
+--------------+---------------+----------+---------------------+-------+------+-----+
(8 rows)

!ok

{
  "queryType" : "windowOperator",
  "dataSource" : {
    "type" : "query",
    "query" : {
      "queryType" : "groupBy",
      "dataSource" : {
        "type" : "table",
        "name" : "test_win"
      },
      "intervals" : {
        "type" : "intervals",
        "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
      },
      "virtualColumns" : [ {
        "type" : "expression",
        "name" : "v0",
        "expression" : "timestamp_floor(\"__time\",'PT12H',null,'UTC')",
        "outputType" : "LONG"
      } ],
      "filter" : {
        "type" : "inType",
        "column" : "client_ip",
        "matchValueType" : "STRING",
        "sortedValues" : [ "107.13.54.103", "99.9.55.22" ]
      },
      "granularity" : {
        "type" : "all"
      },
      "dimensions" : [ {
        "type" : "default",
        "dimension" : "server_ip",
        "outputName" : "d0",
        "outputType" : "STRING"
      }, {
        "type" : "default",
        "dimension" : "client_ip",
        "outputName" : "d1",
        "outputType" : "STRING"
      }, {
        "type" : "default",
        "dimension" : "timezone",
        "outputName" : "d2",
        "outputType" : "STRING"
      }, {
        "type" : "default",
        "dimension" : "v0",
        "outputName" : "d3",
        "outputType" : "LONG"
      } ],
      "postAggregations" : [ {
        "type" : "expression",
        "name" : "p0",
        "expression" : "timestamp_format(timestamp_floor(\"d3\",'PT12H',null,'UTC'),'yyyy-MM-dd HH:mm:ss','UTC')",
        "outputType" : "STRING"
      }, {
        "type" : "expression",
        "name" : "p1",
        "expression" : "strlen(\"d0\")",
        "outputType" : "LONG"
      }, {
        "type" : "expression",
        "name" : "p2",
        "expression" : "(CAST(strlen(\"d0\"), 'DOUBLE') + 0.123)",
        "outputType" : "DOUBLE"
      } ],
      "limitSpec" : {
        "type" : "NoopLimitSpec"
      }
    }
  },
  "intervals" : {
    "type" : "LegacySegmentSpec",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "outputSignature" : [ {
    "name" : "d0",
    "type" : "STRING"
  }, {
    "name" : "d1",
    "type" : "STRING"
  }, {
    "name" : "d2",
    "type" : "STRING"
  }, {
    "name" : "p0",
    "type" : "STRING"
  }, {
    "name" : "w0",
    "type" : "STRING"
  }, {
    "name" : "w1",
    "type" : "STRING"
  }, {
    "name" : "w2",
    "type" : "LONG"
  } ],
  "operatorDefinition" : [ {
    "type" : "naiveSort",
    "columns" : [ {
      "column" : "d1",
      "direction" : "ASC"
    }, {
      "column" : "d0",
      "direction" : "ASC"
    }, {
      "column" : "p1",
      "direction" : "ASC"
    }, {
      "column" : "p2",
      "direction" : "ASC"
    } ]
  }, {
    "type" : "naivePartition",
    "partitionColumns" : [ "d1" ]
  }, {
    "type" : "window",
    "processor" : {
      "type" : "composing",
      "processors" : [ {
        "type" : "first",
        "inputColumn" : "d2",
        "outputColumn" : "w0"
      }, {
        "type" : "offset",
        "inputColumn" : "d2",
        "outputColumn" : "w1",
        "offset" : 0
      }, {
        "type" : "framedAgg",
        "frame" : {
          "type" : "groups",
          "lowerOffset" : null,
          "upperOffset" : 0,
          "orderByColumns" : [ "d0", "p1", "p2" ]
        },
        "aggregations" : [ {
          "type" : "filtered",
          "aggregator" : {
            "type" : "count",
            "name" : "w2"
          },
          "filter" : {
            "type" : "not",
            "field" : {
              "type" : "null",
              "column" : "d2"
            }
          },
          "name" : "w2"
        } ]
      } ]
    }
  } ],
  "leafOperators" : [ ],
  "granularity" : {
    "type" : "all"
  }
}
!nativePlan

#-------------------------------------------------------------------------
# TESTCASE: test_sql_test_explain TEST_ID: A1_G2_Q1
#-------------------------------------------------------------------------

SELECT server_ip,
       client_ip,
       timezone,
       cast(time_floor(__time, 'PT12H') AS char) t,
       first_value(timezone) OVER (PARTITION BY client_ip
                                   ORDER BY server_ip ASC, length(server_ip) ASC, cast(length(server_ip) AS DOUBLE)+0.123 ASC) FIRST,
                                                                                                                               last_value(timezone) OVER (PARTITION BY client_ip
                                                                                                                                                          ORDER BY server_ip ASC, length(server_ip) ASC, cast(length(server_ip) AS DOUBLE)+0.123 ASC) LAST,
                                                                                                                                                                                                                                                      count(timezone) OVER (PARTITION BY client_ip
                                                                                                                                                                                                                                                                            ORDER BY server_ip ASC, length(server_ip) ASC, cast(length(server_ip) AS DOUBLE)+0.123 ASC) cnt
FROM test_win
WHERE client_ip IN ('107.13.54.103',
                    '99.9.55.22')
GROUP BY server_ip,
         client_ip,
         timezone,
         time_floor(__time, 'PT12H');
+--------------+---------------+----------+---------------------+-------+------+-----+
| server_ip    | client_ip     | timezone | t                   | FIRST | LAST | cnt |
+--------------+---------------+----------+---------------------+-------+------+-----+
| 172.31.11.5  | 107.13.54.103 | EDT      | 2019-08-25 00:00:00 | EDT   | EDT  |   3 |
| 172.31.11.5  | 107.13.54.103 | EDT      | 2019-08-25 12:00:00 | EDT   | EDT  |   3 |
| 172.31.11.5  | 107.13.54.103 | N/A      | 2019-08-25 12:00:00 | EDT   | N/A  |   3 |
| 172.31.11.5  | 99.9.55.22    | N/A      | 2019-08-25 12:00:00 | N/A   | N/A  |   1 |
| 172.31.57.89 | 107.13.54.103 | EDT      | 2019-08-25 00:00:00 | EDT   | EDT  |   6 |
| 172.31.57.89 | 107.13.54.103 | EDT      | 2019-08-25 12:00:00 | EDT   | EDT  |   6 |
| 172.31.57.89 | 107.13.54.103 | N/A      | 2019-08-25 12:00:00 | EDT   | N/A  |   6 |
| 172.31.57.89 | 99.9.55.22    | N/A      | 2019-08-25 12:00:00 | N/A   | N/A  |   2 |
+--------------+---------------+----------+---------------------+-------+------+-----+
(8 rows)

!ok

{
  "queryType" : "windowOperator",
  "dataSource" : {
    "type" : "query",
    "query" : {
      "queryType" : "groupBy",
      "dataSource" : {
        "type" : "table",
        "name" : "test_win"
      },
      "intervals" : {
        "type" : "intervals",
        "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
      },
      "virtualColumns" : [ {
        "type" : "expression",
        "name" : "v0",
        "expression" : "timestamp_floor(\"__time\",'PT12H',null,'UTC')",
        "outputType" : "LONG"
      } ],
      "filter" : {
        "type" : "inType",
        "column" : "client_ip",
        "matchValueType" : "STRING",
        "sortedValues" : [ "107.13.54.103", "99.9.55.22" ]
      },
      "granularity" : {
        "type" : "all"
      },
      "dimensions" : [ {
        "type" : "default",
        "dimension" : "server_ip",
        "outputName" : "d0",
        "outputType" : "STRING"
      }, {
        "type" : "default",
        "dimension" : "client_ip",
        "outputName" : "d1",
        "outputType" : "STRING"
      }, {
        "type" : "default",
        "dimension" : "timezone",
        "outputName" : "d2",
        "outputType" : "STRING"
      }, {
        "type" : "default",
        "dimension" : "v0",
        "outputName" : "d3",
        "outputType" : "LONG"
      } ],
      "postAggregations" : [ {
        "type" : "expression",
        "name" : "p0",
        "expression" : "timestamp_format(\"d3\",'yyyy-MM-dd HH:mm:ss','UTC')",
        "outputType" : "STRING"
      }, {
        "type" : "expression",
        "name" : "p1",
        "expression" : "strlen(\"d0\")",
        "outputType" : "LONG"
      }, {
        "type" : "expression",
        "name" : "p2",
        "expression" : "(CAST(strlen(\"d0\"), 'DOUBLE') + 0.123)",
        "outputType" : "DOUBLE"
      } ],
      "limitSpec" : {
        "type" : "NoopLimitSpec"
      }
    }
  },
  "intervals" : {
    "type" : "LegacySegmentSpec",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "outputSignature" : [ {
    "name" : "d0",
    "type" : "STRING"
  }, {
    "name" : "d1",
    "type" : "STRING"
  }, {
    "name" : "d2",
    "type" : "STRING"
  }, {
    "name" : "p0",
    "type" : "STRING"
  }, {
    "name" : "w0",
    "type" : "STRING"
  }, {
    "name" : "w1",
    "type" : "STRING"
  }, {
    "name" : "w2",
    "type" : "LONG"
  } ],
  "operatorDefinition" : [ {
    "type" : "naiveSort",
    "columns" : [ {
      "column" : "d1",
      "direction" : "ASC"
    }, {
      "column" : "d0",
      "direction" : "ASC"
    }, {
      "column" : "p1",
      "direction" : "ASC"
    }, {
      "column" : "p2",
      "direction" : "ASC"
    } ]
  }, {
    "type" : "naivePartition",
    "partitionColumns" : [ "d1" ]
  }, {
    "type" : "window",
    "processor" : {
      "type" : "composing",
      "processors" : [ {
        "type" : "first",
        "inputColumn" : "d2",
        "outputColumn" : "w0"
      }, {
        "type" : "offset",
        "inputColumn" : "d2",
        "outputColumn" : "w1",
        "offset" : 0
      }, {
        "type" : "framedAgg",
        "frame" : {
          "type" : "groups",
          "lowerOffset" : null,
          "upperOffset" : 0,
          "orderByColumns" : [ "d0", "p1", "p2" ]
        },
        "aggregations" : [ {
          "type" : "filtered",
          "aggregator" : {
            "type" : "count",
            "name" : "w2"
          },
          "filter" : {
            "type" : "not",
            "field" : {
              "type" : "null",
              "column" : "d2"
            }
          },
          "name" : "w2"
        } ]
      } ]
    }
  } ],
  "leafOperators" : [ ],
  "granularity" : {
    "type" : "all"
  }
}
!nativePlan

#-------------------------------------------------------------------------
# TESTCASE: test_sql_test_explain TEST_ID: A1_G2_Q2
#-------------------------------------------------------------------------

SELECT server_ip,
       client_ip,
       timezone,
       cast(time_floor(__time, 'PT12H') AS char) t,
       first_value(timezone) OVER w FIRST,
                                    last_value(timezone) OVER w LAST,
                                                                count(timezone) OVER w cnt
FROM test_win
WHERE client_ip IN ('107.13.54.103',
                    '99.9.55.22')
GROUP BY server_ip,
         client_ip,
         timezone,
         time_floor(__time, 'PT12H') WINDOW w AS (PARTITION BY client_ip
                                                  ORDER BY server_ip ASC,
                                                           length(server_ip) ASC, cast(length(server_ip) AS DOUBLE)+0.123 ASC);
+--------------+---------------+----------+---------------------+-------+------+-----+
| server_ip    | client_ip     | timezone | t                   | FIRST | LAST | cnt |
+--------------+---------------+----------+---------------------+-------+------+-----+
| 172.31.11.5  | 107.13.54.103 | EDT      | 2019-08-25 00:00:00 | EDT   | EDT  |   3 |
| 172.31.11.5  | 107.13.54.103 | EDT      | 2019-08-25 12:00:00 | EDT   | EDT  |   3 |
| 172.31.11.5  | 107.13.54.103 | N/A      | 2019-08-25 12:00:00 | EDT   | N/A  |   3 |
| 172.31.11.5  | 99.9.55.22    | N/A      | 2019-08-25 12:00:00 | N/A   | N/A  |   1 |
| 172.31.57.89 | 107.13.54.103 | EDT      | 2019-08-25 00:00:00 | EDT   | EDT  |   6 |
| 172.31.57.89 | 107.13.54.103 | EDT      | 2019-08-25 12:00:00 | EDT   | EDT  |   6 |
| 172.31.57.89 | 107.13.54.103 | N/A      | 2019-08-25 12:00:00 | EDT   | N/A  |   6 |
| 172.31.57.89 | 99.9.55.22    | N/A      | 2019-08-25 12:00:00 | N/A   | N/A  |   2 |
+--------------+---------------+----------+---------------------+-------+------+-----+
(8 rows)

!ok

{
  "queryType" : "windowOperator",
  "dataSource" : {
    "type" : "query",
    "query" : {
      "queryType" : "groupBy",
      "dataSource" : {
        "type" : "table",
        "name" : "test_win"
      },
      "intervals" : {
        "type" : "intervals",
        "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
      },
      "virtualColumns" : [ {
        "type" : "expression",
        "name" : "v0",
        "expression" : "timestamp_floor(\"__time\",'PT12H',null,'UTC')",
        "outputType" : "LONG"
      } ],
      "filter" : {
        "type" : "inType",
        "column" : "client_ip",
        "matchValueType" : "STRING",
        "sortedValues" : [ "107.13.54.103", "99.9.55.22" ]
      },
      "granularity" : {
        "type" : "all"
      },
      "dimensions" : [ {
        "type" : "default",
        "dimension" : "server_ip",
        "outputName" : "d0",
        "outputType" : "STRING"
      }, {
        "type" : "default",
        "dimension" : "client_ip",
        "outputName" : "d1",
        "outputType" : "STRING"
      }, {
        "type" : "default",
        "dimension" : "timezone",
        "outputName" : "d2",
        "outputType" : "STRING"
      }, {
        "type" : "default",
        "dimension" : "v0",
        "outputName" : "d3",
        "outputType" : "LONG"
      } ],
      "postAggregations" : [ {
        "type" : "expression",
        "name" : "p0",
        "expression" : "timestamp_format(\"d3\",'yyyy-MM-dd HH:mm:ss','UTC')",
        "outputType" : "STRING"
      }, {
        "type" : "expression",
        "name" : "p1",
        "expression" : "strlen(\"d0\")",
        "outputType" : "LONG"
      }, {
        "type" : "expression",
        "name" : "p2",
        "expression" : "(CAST(strlen(\"d0\"), 'DOUBLE') + 0.123)",
        "outputType" : "DOUBLE"
      } ],
      "limitSpec" : {
        "type" : "NoopLimitSpec"
      }
    }
  },
  "intervals" : {
    "type" : "LegacySegmentSpec",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "outputSignature" : [ {
    "name" : "d0",
    "type" : "STRING"
  }, {
    "name" : "d1",
    "type" : "STRING"
  }, {
    "name" : "d2",
    "type" : "STRING"
  }, {
    "name" : "p0",
    "type" : "STRING"
  }, {
    "name" : "w0",
    "type" : "STRING"
  }, {
    "name" : "w1",
    "type" : "STRING"
  }, {
    "name" : "w2",
    "type" : "LONG"
  } ],
  "operatorDefinition" : [ {
    "type" : "naiveSort",
    "columns" : [ {
      "column" : "d1",
      "direction" : "ASC"
    }, {
      "column" : "d0",
      "direction" : "ASC"
    }, {
      "column" : "p1",
      "direction" : "ASC"
    }, {
      "column" : "p2",
      "direction" : "ASC"
    } ]
  }, {
    "type" : "naivePartition",
    "partitionColumns" : [ "d1" ]
  }, {
    "type" : "window",
    "processor" : {
      "type" : "composing",
      "processors" : [ {
        "type" : "first",
        "inputColumn" : "d2",
        "outputColumn" : "w0"
      }, {
        "type" : "offset",
        "inputColumn" : "d2",
        "outputColumn" : "w1",
        "offset" : 0
      }, {
        "type" : "framedAgg",
        "frame" : {
          "type" : "groups",
          "lowerOffset" : null,
          "upperOffset" : 0,
          "orderByColumns" : [ "d0", "p1", "p2" ]
        },
        "aggregations" : [ {
          "type" : "filtered",
          "aggregator" : {
            "type" : "count",
            "name" : "w2"
          },
          "filter" : {
            "type" : "not",
            "field" : {
              "type" : "null",
              "column" : "d2"
            }
          },
          "name" : "w2"
        } ]
      } ]
    }
  } ],
  "leafOperators" : [ ],
  "granularity" : {
    "type" : "all"
  }
}
!nativePlan

