!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/array&numMergeBuffers=3
!set outputformat mysql
SELECT *
FROM test_unnest;
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| __time                  | s_int | s_null | a_bool       | a_int        | a_float          | a_str          | a_null             | a_empty | a_mixed                  | a_nested                                                                                                                                                                                                                                                                                                                      |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 2022-01-01 00:00:00.000 |     1 |        | [1, 0, null] | [1, 2, null] | [0.1, 0.2, null] | [S1, S2, null] | [null, null, null] | []      | [true, 1, 0.1, S1, null] | [[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null]]]] |
| 2022-02-01 00:00:00.000 |     2 |        | [null, 1, 0] | [null, 1, 2] | [null, 0.1, 0.2] | [null, S1, S2] | [null, null, null] | []      | [null, true, 1, 0.1, S1] | [[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"]]]] |
| 2022-03-01 00:00:00.000 |       |        | [0, null, 1] | [2, null, 1] | [0.2, null, 0.1] | [S2, null, S1] | [null, null, null] | []      | [S1, null, true, 1, 0.1] | [[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1]]]] |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(doesnt_exist) AS u(c);
not found
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(doesnt_exist) AS u(c)
GROUP BY c;
not found
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT *
FROM test_unnest,
     unnest(a_int) AS u(a_int);
is ambiguous
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT *
FROM test_unnest,
     unnest(a_int) AS u(a_int)
GROUP BY c;
is ambiguous
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B5 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int0
FROM test_unnest,
     unnest(a_int) AS u(s_int);
not found in any table
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT u.s_int
FROM test_unnest,
     unnest(a_int) AS u(s_int);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT u.s_int
   FROM test_unnest,
        unnest(a_int) AS u(s_int));
+--------+
| EXPR$0 |
+--------+
|      9 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM test_unnest,
     unnest(a_int) AS u(s_int);
+--------+
| EXPR$0 |
+--------+
|      9 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int0
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(s_int));
+--------+
| s_int0 |
+--------+
|      1 |
|      1 |
|      1 |
|      2 |
|      2 |
|      2 |
|        |
|        |
|        |
+--------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(s_int));
+-----+
| cnt |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B11 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT u.s_int
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(s_int));
not found
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int0,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(s_int)
GROUP BY s_int0;
not found in any table
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT u.s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(s_int)
GROUP BY u.s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     strlen(unnest(a_int)) AS u(c);
unexpected token
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     strlen(unnest(a_int)) AS u(c)
GROUP BY c;
unexpected token
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B16 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(array_slice(a_int, 0, 2)) AS u(c);
+---+
| c |
+---+
| 1 |
| 1 |
| 2 |
| 2 |
|   |
|   |
+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(array_slice(a_int, 0, 2)) AS u(c)
GROUP BY c;
+---+
| c |
+---+
| 1 |
| 2 |
|   |
+---+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(array_append(a_int, 9)) AS u(c);
+---+
| c |
+---+
| 1 |
| 1 |
| 1 |
| 2 |
| 2 |
| 2 |
| 9 |
| 9 |
| 9 |
|   |
|   |
|   |
+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B19 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(array_append(a_int, 9)) AS u(c)
GROUP BY c;
+---+
| c |
+---+
| 1 |
| 2 |
| 9 |
|   |
+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (c || 'Z') col
FROM test_unnest,
     unnest(a_int) AS u(c);
+-----+
| col |
+-----+
| 1Z  |
| 1Z  |
| 1Z  |
| 2Z  |
| 2Z  |
| 2Z  |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (c || 'Z') col
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY c;
+-----+
| col |
+-----+
| 1Z  |
| 2Z  |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT length(c) col
FROM test_unnest,
     unnest(a_int) AS u(c);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT length(c) col
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT length(c || 'Z') col
FROM test_unnest,
     unnest(a_int) AS u(c);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT length(c || 'Z') col
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY c;
+-----+
| col |
+-----+
|   2 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT length(c || c) col
FROM test_unnest,
     unnest(a_int) AS u(c);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT length(c || c) col
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY c;
+-----+
| col |
+-----+
|   2 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B28 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       a_int AS new_col
FROM test_unnest,
     unnest(new_col) AS u(c);
not found in any table
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT a_int AS new_col
   FROM test_unnest) t1,
     unnest(new_col) AS u(c);
+---+
| c |
+---+
| 1 |
| 1 |
| 1 |
| 2 |
| 2 |
| 2 |
|   |
|   |
|   |
+---+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_general TEST_ID: A1_B30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c AS new_col
FROM test_unnest,
     unnest(a_int) AS u(c);
+---------+
| new_col |
+---------+
|       1 |
|       1 |
|       1 |
|       2 |
|       2 |
|       2 |
|         |
|         |
|         |
+---------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A1_B1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(s_int) AS u(c);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A1_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(s_int) AS u(c)
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A2_B1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(s_null) AS u(c);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A2_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(s_null) AS u(c)
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A3_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_null) AS u(c);
+---+
| c |
+---+
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
+---+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A3_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_null) AS u(c)
GROUP BY c;
+---+
| c |
+---+
|   |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A4_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_empty) AS u(c);
+---+
| c |
+---+
+---+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A4_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_empty) AS u(c)
GROUP BY c;
+---+
| c |
+---+
+---+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A5_B1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_nested) AS u(c);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A5_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_nested) AS u(c)
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A6_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM unnest(array[NULL, 1, 2]) AS u(c);
+---+
| c |
+---+
| 1 |
| 2 |
|   |
+---+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A6_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM unnest(array[NULL, 1, 2]) AS u(c)
GROUP BY c;
+---+-----+
| c | cnt |
+---+-----+
| 1 |   1 |
| 2 |   1 |
|   |   1 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A7_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(array_append(a_int, 9)) AS u(c);
+---+
| c |
+---+
| 1 |
| 1 |
| 1 |
| 2 |
| 2 |
| 2 |
| 9 |
| 9 |
| 9 |
|   |
|   |
|   |
+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A7_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(array_append(a_int, 9)) AS u(c)
GROUP BY c;
+---+
| c |
+---+
| 1 |
| 2 |
| 9 |
|   |
+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A8_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(array_concat(a_int, a_int)) AS u(c);
+---+
| c |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
| 1 |
| 1 |
| 2 |
| 2 |
| 2 |
| 2 |
| 2 |
| 2 |
|   |
|   |
|   |
|   |
|   |
|   |
+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A8_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(array_concat(a_int, a_int)) AS u(c)
GROUP BY c;
+---+
| c |
+---+
| 1 |
| 2 |
|   |
+---+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A9_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(array_slice(a_int, 0, 2)) AS u(c);
+---+
| c |
+---+
| 1 |
| 1 |
| 2 |
| 2 |
|   |
|   |
+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A9_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(array_slice(a_int, 0, 2)) AS u(c)
GROUP BY c;
+---+
| c |
+---+
| 1 |
| 2 |
|   |
+---+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A10_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_bool) AS u(c);
+---+
| c |
+---+
| 0 |
| 0 |
| 0 |
| 1 |
| 1 |
| 1 |
|   |
|   |
|   |
+---+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A10_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY c;
+---+
| c |
+---+
| 0 |
| 1 |
|   |
+---+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A11_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_int) AS u(c);
+---+
| c |
+---+
| 1 |
| 1 |
| 1 |
| 2 |
| 2 |
| 2 |
|   |
|   |
|   |
+---+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A11_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY c;
+---+
| c |
+---+
| 1 |
| 2 |
|   |
+---+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A12_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_float) AS u(c);
+-----+
| c   |
+-----+
| 0.1 |
| 0.1 |
| 0.1 |
| 0.2 |
| 0.2 |
| 0.2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A12_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY c;
+-----+
| c   |
+-----+
| 0.1 |
| 0.2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A13_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_str) AS u(c);
+----+
| c  |
+----+
| S1 |
| S1 |
| S1 |
| S2 |
| S2 |
| S2 |
|    |
|    |
|    |
+----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A13_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY c;
+----+
| c  |
+----+
| S1 |
| S2 |
|    |
+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A14_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_mixed) AS u(c);
+------+
| c    |
+------+
| 0.1  |
| 0.1  |
| 0.1  |
| 1    |
| 1    |
| 1    |
| S1   |
| S1   |
| S1   |
| true |
| true |
| true |
|      |
|      |
|      |
+------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A14_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY c;
+------+
| c    |
+------+
| 0.1  |
| 1    |
| S1   |
| true |
|      |
+------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A15_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c);
+-------+
| c     |
+-------+
| false |
| false |
| false |
| true  |
| true  |
| true  |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A15_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY c;
+-------+
| c     |
+-------+
| false |
| true  |
|       |
+-------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A16_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c);
+---+
| c |
+---+
| 1 |
| 1 |
| 1 |
| 2 |
| 2 |
| 2 |
|   |
|   |
|   |
+---+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A16_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY c;
+---+
| c |
+---+
| 1 |
| 2 |
|   |
+---+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A17_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c);
+-----+
| c   |
+-----+
| 0.1 |
| 0.1 |
| 0.1 |
| 0.2 |
| 0.2 |
| 0.2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A17_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY c;
+-----+
| c   |
+-----+
| 0.1 |
| 0.2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A18_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c);
+----+
| c  |
+----+
| S1 |
| S1 |
| S1 |
| S2 |
| S2 |
| S2 |
|    |
|    |
|    |
+----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A18_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY c;
+----+
| c  |
+----+
| S1 |
| S2 |
|    |
+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A19_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c);
+---+
| c |
+---+
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
+---+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A19_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY c;
+---+
| c |
+---+
|   |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A20_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c);
+---+
| c |
+---+
+---+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A20_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY c;
+---+
| c |
+---+
+---+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A21_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c);
+------+
| c    |
+------+
| 0.1  |
| 0.1  |
| 0.1  |
| 1    |
| 1    |
| 1    |
| S1   |
| S1   |
| S1   |
| true |
| true |
| true |
|      |
|      |
|      |
+------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_col_datatype_array TEST_ID: A21_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY c;
+------+
| c    |
+------+
| 0.1  |
| 1    |
| S1   |
| true |
|      |
+------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_explain TEST_ID: A1_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------

SELECT c
FROM test_unnest,
     unnest(a_int) AS u(c);
+---+
| c |
+---+
| 1 |
| 1 |
| 1 |
| 2 |
| 2 |
| 2 |
|   |
|   |
|   |
+---+
(9 rows)

!ok

{
  "queryType" : "scan",
  "dataSource" : {
    "type" : "unnest",
    "base" : {
      "type" : "table",
      "name" : "test_unnest"
    },
    "virtualColumn" : {
      "type" : "expression",
      "name" : "j0.unnest",
      "expression" : "\"a_int\"",
      "outputType" : "ARRAY<LONG>"
    },
    "unnestFilter" : null
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "resultFormat" : "compactedList",
  "columns" : [ "j0.unnest" ],
  "columnTypes" : [ "LONG" ],
  "granularity" : {
    "type" : "all"
  },
  "legacy" : false
}
!nativePlan

#-------------------------------------------------------------------------
# TESTCASE: test_explain TEST_ID: A1_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------

SELECT *
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c));
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---+
| __time                  | s_int | s_null | a_bool       | a_int        | a_float          | a_str          | a_null             | a_empty | a_mixed                  | a_nested                                                                                                                                                                                                                                                                                                                      | c |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---+
| 2022-01-01 00:00:00.000 |     1 |        | [1, 0, null] | [1, 2, null] | [0.1, 0.2, null] | [S1, S2, null] | [null, null, null] | []      | [true, 1, 0.1, S1, null] | [[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null]]]] | 1 |
| 2022-01-01 00:00:00.000 |     1 |        | [1, 0, null] | [1, 2, null] | [0.1, 0.2, null] | [S1, S2, null] | [null, null, null] | []      | [true, 1, 0.1, S1, null] | [[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null]]]] | 2 |
| 2022-01-01 00:00:00.000 |     1 |        | [1, 0, null] | [1, 2, null] | [0.1, 0.2, null] | [S1, S2, null] | [null, null, null] | []      | [true, 1, 0.1, S1, null] | [[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null]]]] |   |
| 2022-02-01 00:00:00.000 |     2 |        | [null, 1, 0] | [null, 1, 2] | [null, 0.1, 0.2] | [null, S1, S2] | [null, null, null] | []      | [null, true, 1, 0.1, S1] | [[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"]]]] | 1 |
| 2022-02-01 00:00:00.000 |     2 |        | [null, 1, 0] | [null, 1, 2] | [null, 0.1, 0.2] | [null, S1, S2] | [null, null, null] | []      | [null, true, 1, 0.1, S1] | [[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"]]]] | 2 |
| 2022-02-01 00:00:00.000 |     2 |        | [null, 1, 0] | [null, 1, 2] | [null, 0.1, 0.2] | [null, S1, S2] | [null, null, null] | []      | [null, true, 1, 0.1, S1] | [[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"]]]] |   |
| 2022-03-01 00:00:00.000 |       |        | [0, null, 1] | [2, null, 1] | [0.2, null, 0.1] | [S2, null, S1] | [null, null, null] | []      | [S1, null, true, 1, 0.1] | [[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1]]]] | 1 |
| 2022-03-01 00:00:00.000 |       |        | [0, null, 1] | [2, null, 1] | [0.2, null, 0.1] | [S2, null, S1] | [null, null, null] | []      | [S1, null, true, 1, 0.1] | [[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1]]]] | 2 |
| 2022-03-01 00:00:00.000 |       |        | [0, null, 1] | [2, null, 1] | [0.2, null, 0.1] | [S2, null, S1] | [null, null, null] | []      | [S1, null, true, 1, 0.1] | [[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1]]]] |   |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---+
(9 rows)

!ok

{
  "queryType" : "scan",
  "dataSource" : {
    "type" : "unnest",
    "base" : {
      "type" : "table",
      "name" : "test_unnest"
    },
    "virtualColumn" : {
      "type" : "expression",
      "name" : "j0.unnest",
      "expression" : "\"a_int\"",
      "outputType" : "ARRAY<LONG>"
    },
    "unnestFilter" : null
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "resultFormat" : "compactedList",
  "columns" : [ "__time", "s_int", "s_null", "a_bool", "a_int", "a_float", "a_str", "a_null", "a_empty", "a_mixed", "a_nested", "j0.unnest" ],
  "columnTypes" : [ "LONG", "LONG", "STRING", "ARRAY<LONG>", "ARRAY<LONG>", "ARRAY<DOUBLE>", "ARRAY<STRING>", "ARRAY<LONG>", "ARRAY<LONG>", "ARRAY<STRING>", "COMPLEX<json>", "LONG" ],
  "granularity" : {
    "type" : "all"
  },
  "legacy" : false
}
!nativePlan

#-------------------------------------------------------------------------
# TESTCASE: test_explain TEST_ID: A1_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------

SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY c;
+---+-----+
| c | cnt |
+---+-----+
| 1 |   3 |
| 2 |   3 |
|   |   3 |
+---+-----+
(3 rows)

!ok

{
  "queryType" : "groupBy",
  "dataSource" : {
    "type" : "unnest",
    "base" : {
      "type" : "table",
      "name" : "test_unnest"
    },
    "virtualColumn" : {
      "type" : "expression",
      "name" : "j0.unnest",
      "expression" : "\"a_int\"",
      "outputType" : "ARRAY<LONG>"
    },
    "unnestFilter" : null
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "granularity" : {
    "type" : "all"
  },
  "dimensions" : [ {
    "type" : "default",
    "dimension" : "j0.unnest",
    "outputName" : "d0",
    "outputType" : "LONG"
  } ],
  "aggregations" : [ {
    "type" : "count",
    "name" : "a0"
  } ],
  "limitSpec" : {
    "type" : "NoopLimitSpec"
  }
}
!nativePlan

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A1_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c);
+-----+
| cnt |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A1_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(c) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c);
+-----+
| cnt |
+-----+
|   6 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A1_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A2_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c);
+-----+
| cnt |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A2_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(c) cnt
FROM test_unnest,
     unnest(a_int) AS u(c);
+-----+
| cnt |
+-----+
|   6 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A2_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) cnt
FROM test_unnest,
     unnest(a_int) AS u(c);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A3_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c);
+-----+
| cnt |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A3_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(c) cnt
FROM test_unnest,
     unnest(a_float) AS u(c);
+-----+
| cnt |
+-----+
|   6 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A3_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) cnt
FROM test_unnest,
     unnest(a_float) AS u(c);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A4_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c);
+-----+
| cnt |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A4_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(c) cnt
FROM test_unnest,
     unnest(a_str) AS u(c);
+-----+
| cnt |
+-----+
|   6 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A4_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) cnt
FROM test_unnest,
     unnest(a_str) AS u(c);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A5_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c);
+-----+
| cnt |
+-----+
|  15 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A5_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(c) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c);
+-----+
| cnt |
+-----+
|  12 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A5_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c);
+-----+
| cnt |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A6_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c);
+-----+
| cnt |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A6_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(c) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c);
+-----+
| cnt |
+-----+
|   6 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A6_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A7_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c);
+-----+
| cnt |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A7_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(c) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c);
+-----+
| cnt |
+-----+
|   6 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A7_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A8_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c);
+-----+
| cnt |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A8_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(c) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c);
+-----+
| cnt |
+-----+
|   6 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A8_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A9_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c);
+-----+
| cnt |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A9_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(c) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c);
+-----+
| cnt |
+-----+
|   6 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A9_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A10_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c);
+-----+
| cnt |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A10_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(c) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A10_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A11_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A11_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(c) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A11_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A12_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c);
+-----+
| cnt |
+-----+
|  15 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A12_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(c) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c);
+-----+
| cnt |
+-----+
|  12 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_count TEST_ID: A12_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c);
+-----+
| cnt |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A1_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(a_bool) AS u(c);
+---+
| c |
+---+
| 0 |
| 1 |
|   |
+---+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A1_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY c;
+---+
| c |
+---+
| 0 |
| 1 |
|   |
+---+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A2_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(a_int) AS u(c);
+---+
| c |
+---+
| 1 |
| 2 |
|   |
+---+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A2_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY c;
+---+
| c |
+---+
| 1 |
| 2 |
|   |
+---+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A3_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(a_float) AS u(c);
+-----+
| c   |
+-----+
| 0.1 |
| 0.2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A3_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY c;
+-----+
| c   |
+-----+
| 0.1 |
| 0.2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A4_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(a_str) AS u(c);
+----+
| c  |
+----+
| S1 |
| S2 |
|    |
+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A4_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY c;
+----+
| c  |
+----+
| S1 |
| S2 |
|    |
+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A5_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(a_mixed) AS u(c);
+------+
| c    |
+------+
| 0.1  |
| 1    |
| S1   |
| true |
|      |
+------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A5_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY c;
+------+
| c    |
+------+
| 0.1  |
| 1    |
| S1   |
| true |
|      |
+------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A6_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c);
+-------+
| c     |
+-------+
| false |
| true  |
|       |
+-------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A6_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY c;
+-------+
| c     |
+-------+
| false |
| true  |
|       |
+-------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A7_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c);
+---+
| c |
+---+
| 1 |
| 2 |
|   |
+---+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A7_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY c;
+---+
| c |
+---+
| 1 |
| 2 |
|   |
+---+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A8_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c);
+-----+
| c   |
+-----+
| 0.1 |
| 0.2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A8_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY c;
+-----+
| c   |
+-----+
| 0.1 |
| 0.2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A9_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c);
+----+
| c  |
+----+
| S1 |
| S2 |
|    |
+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A9_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY c;
+----+
| c  |
+----+
| S1 |
| S2 |
|    |
+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A10_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c);
+---+
| c |
+---+
|   |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A10_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY c;
+---+
| c |
+---+
|   |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A11_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c);
+---+
| c |
+---+
+---+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A11_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY c;
+---+
| c |
+---+
+---+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A12_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c);
+------+
| c    |
+------+
| 0.1  |
| 1    |
| S1   |
| true |
|      |
+------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_select_distinct TEST_ID: A12_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT DISTINCT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY c;
+------+
| c    |
+------+
| 0.1  |
| 1    |
| S1   |
| true |
|      |
+------+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A6_B6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u1(c1),
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u2(c2);
+-------+-------+
| c1    | c2    |
+-------+-------+
| false | false |
| false | false |
| false | false |
| false | true  |
| false | true  |
| false | true  |
| false |       |
| false |       |
| false |       |
| true  | false |
| true  | false |
| true  | false |
| true  | true  |
| true  | true  |
| true  | true  |
| true  |       |
| true  |       |
| true  |       |
|       | false |
|       | false |
|       | false |
|       | true  |
|       | true  |
|       | true  |
|       |       |
|       |       |
|       |       |
+-------+-------+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A6_B7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u1(c1),
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u2(c2);
+-------+----+
| c1    | c2 |
+-------+----+
| false |  1 |
| false |  1 |
| false |  1 |
| false |  2 |
| false |  2 |
| false |  2 |
| false |    |
| false |    |
| false |    |
| true  |  1 |
| true  |  1 |
| true  |  1 |
| true  |  2 |
| true  |  2 |
| true  |  2 |
| true  |    |
| true  |    |
| true  |    |
|       |  1 |
|       |  1 |
|       |  1 |
|       |  2 |
|       |  2 |
|       |  2 |
|       |    |
|       |    |
|       |    |
+-------+----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A6_B8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u1(c1),
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u2(c2);
+-------+-----+
| c1    | c2  |
+-------+-----+
| false | 0.1 |
| false | 0.1 |
| false | 0.1 |
| false | 0.2 |
| false | 0.2 |
| false | 0.2 |
| false |     |
| false |     |
| false |     |
| true  | 0.1 |
| true  | 0.1 |
| true  | 0.1 |
| true  | 0.2 |
| true  | 0.2 |
| true  | 0.2 |
| true  |     |
| true  |     |
| true  |     |
|       | 0.1 |
|       | 0.1 |
|       | 0.1 |
|       | 0.2 |
|       | 0.2 |
|       | 0.2 |
|       |     |
|       |     |
|       |     |
+-------+-----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A6_B9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u1(c1),
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u2(c2);
+-------+----+
| c1    | c2 |
+-------+----+
| false | S1 |
| false | S1 |
| false | S1 |
| false | S2 |
| false | S2 |
| false | S2 |
| false |    |
| false |    |
| false |    |
| true  | S1 |
| true  | S1 |
| true  | S1 |
| true  | S2 |
| true  | S2 |
| true  | S2 |
| true  |    |
| true  |    |
| true  |    |
|       | S1 |
|       | S1 |
|       | S1 |
|       | S2 |
|       | S2 |
|       | S2 |
|       |    |
|       |    |
|       |    |
+-------+----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A6_B10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u1(c1),
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u2(c2);
+-------+----+
| c1    | c2 |
+-------+----+
| false |    |
| false |    |
| false |    |
| false |    |
| false |    |
| false |    |
| false |    |
| false |    |
| false |    |
| true  |    |
| true  |    |
| true  |    |
| true  |    |
| true  |    |
| true  |    |
| true  |    |
| true  |    |
| true  |    |
|       |    |
|       |    |
|       |    |
|       |    |
|       |    |
|       |    |
|       |    |
|       |    |
|       |    |
+-------+----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A6_B11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u1(c1),
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
+----+----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A6_B12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u1(c1),
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u2(c2);
+-------+------+
| c1    | c2   |
+-------+------+
| false | 0.1  |
| false | 0.1  |
| false | 0.1  |
| false | 1    |
| false | 1    |
| false | 1    |
| false | S1   |
| false | S1   |
| false | S1   |
| false | true |
| false | true |
| false | true |
| false |      |
| false |      |
| false |      |
| true  | 0.1  |
| true  | 0.1  |
| true  | 0.1  |
| true  | 1    |
| true  | 1    |
| true  | 1    |
| true  | S1   |
| true  | S1   |
| true  | S1   |
| true  | true |
| true  | true |
| true  | true |
| true  |      |
| true  |      |
| true  |      |
|       | 0.1  |
|       | 0.1  |
|       | 0.1  |
|       | 1    |
|       | 1    |
|       | 1    |
|       | S1   |
|       | S1   |
|       | S1   |
|       | true |
|       | true |
|       | true |
|       |      |
|       |      |
|       |      |
+-------+------+
(45 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A7_B6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1),
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u2(c2);
+----+-------+
| c1 | c2    |
+----+-------+
|  1 | false |
|  1 | false |
|  1 | false |
|  1 | true  |
|  1 | true  |
|  1 | true  |
|  1 |       |
|  1 |       |
|  1 |       |
|  2 | false |
|  2 | false |
|  2 | false |
|  2 | true  |
|  2 | true  |
|  2 | true  |
|  2 |       |
|  2 |       |
|  2 |       |
|    | false |
|    | false |
|    | false |
|    | true  |
|    | true  |
|    | true  |
|    |       |
|    |       |
|    |       |
+----+-------+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A7_B7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1),
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
|  1 |  1 |
|  1 |  1 |
|  1 |  1 |
|  1 |  2 |
|  1 |  2 |
|  1 |  2 |
|  1 |    |
|  1 |    |
|  1 |    |
|  2 |  1 |
|  2 |  1 |
|  2 |  1 |
|  2 |  2 |
|  2 |  2 |
|  2 |  2 |
|  2 |    |
|  2 |    |
|  2 |    |
|    |  1 |
|    |  1 |
|    |  1 |
|    |  2 |
|    |  2 |
|    |  2 |
|    |    |
|    |    |
|    |    |
+----+----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A7_B8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1),
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u2(c2);
+----+-----+
| c1 | c2  |
+----+-----+
|  1 | 0.1 |
|  1 | 0.1 |
|  1 | 0.1 |
|  1 | 0.2 |
|  1 | 0.2 |
|  1 | 0.2 |
|  1 |     |
|  1 |     |
|  1 |     |
|  2 | 0.1 |
|  2 | 0.1 |
|  2 | 0.1 |
|  2 | 0.2 |
|  2 | 0.2 |
|  2 | 0.2 |
|  2 |     |
|  2 |     |
|  2 |     |
|    | 0.1 |
|    | 0.1 |
|    | 0.1 |
|    | 0.2 |
|    | 0.2 |
|    | 0.2 |
|    |     |
|    |     |
|    |     |
+----+-----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A7_B9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1),
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
|  1 | S1 |
|  1 | S1 |
|  1 | S1 |
|  1 | S2 |
|  1 | S2 |
|  1 | S2 |
|  1 |    |
|  1 |    |
|  1 |    |
|  2 | S1 |
|  2 | S1 |
|  2 | S1 |
|  2 | S2 |
|  2 | S2 |
|  2 | S2 |
|  2 |    |
|  2 |    |
|  2 |    |
|    | S1 |
|    | S1 |
|    | S1 |
|    | S2 |
|    | S2 |
|    | S2 |
|    |    |
|    |    |
|    |    |
+----+----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A7_B10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1),
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
|  1 |    |
|  1 |    |
|  1 |    |
|  1 |    |
|  1 |    |
|  1 |    |
|  1 |    |
|  1 |    |
|  1 |    |
|  2 |    |
|  2 |    |
|  2 |    |
|  2 |    |
|  2 |    |
|  2 |    |
|  2 |    |
|  2 |    |
|  2 |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
+----+----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A7_B11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1),
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
+----+----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A7_B12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1),
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u2(c2);
+----+------+
| c1 | c2   |
+----+------+
|  1 | 0.1  |
|  1 | 0.1  |
|  1 | 0.1  |
|  1 | 1    |
|  1 | 1    |
|  1 | 1    |
|  1 | S1   |
|  1 | S1   |
|  1 | S1   |
|  1 | true |
|  1 | true |
|  1 | true |
|  1 |      |
|  1 |      |
|  1 |      |
|  2 | 0.1  |
|  2 | 0.1  |
|  2 | 0.1  |
|  2 | 1    |
|  2 | 1    |
|  2 | 1    |
|  2 | S1   |
|  2 | S1   |
|  2 | S1   |
|  2 | true |
|  2 | true |
|  2 | true |
|  2 |      |
|  2 |      |
|  2 |      |
|    | 0.1  |
|    | 0.1  |
|    | 0.1  |
|    | 1    |
|    | 1    |
|    | 1    |
|    | S1   |
|    | S1   |
|    | S1   |
|    | true |
|    | true |
|    | true |
|    |      |
|    |      |
|    |      |
+----+------+
(45 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A8_B6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u1(c1),
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u2(c2);
+-----+-------+
| c1  | c2    |
+-----+-------+
| 0.1 | false |
| 0.1 | false |
| 0.1 | false |
| 0.1 | true  |
| 0.1 | true  |
| 0.1 | true  |
| 0.1 |       |
| 0.1 |       |
| 0.1 |       |
| 0.2 | false |
| 0.2 | false |
| 0.2 | false |
| 0.2 | true  |
| 0.2 | true  |
| 0.2 | true  |
| 0.2 |       |
| 0.2 |       |
| 0.2 |       |
|     | false |
|     | false |
|     | false |
|     | true  |
|     | true  |
|     | true  |
|     |       |
|     |       |
|     |       |
+-----+-------+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A8_B7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u1(c1),
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u2(c2);
+-----+----+
| c1  | c2 |
+-----+----+
| 0.1 |  1 |
| 0.1 |  1 |
| 0.1 |  1 |
| 0.1 |  2 |
| 0.1 |  2 |
| 0.1 |  2 |
| 0.1 |    |
| 0.1 |    |
| 0.1 |    |
| 0.2 |  1 |
| 0.2 |  1 |
| 0.2 |  1 |
| 0.2 |  2 |
| 0.2 |  2 |
| 0.2 |  2 |
| 0.2 |    |
| 0.2 |    |
| 0.2 |    |
|     |  1 |
|     |  1 |
|     |  1 |
|     |  2 |
|     |  2 |
|     |  2 |
|     |    |
|     |    |
|     |    |
+-----+----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A8_B8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u1(c1),
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u2(c2);
+-----+-----+
| c1  | c2  |
+-----+-----+
| 0.1 | 0.1 |
| 0.1 | 0.1 |
| 0.1 | 0.1 |
| 0.1 | 0.2 |
| 0.1 | 0.2 |
| 0.1 | 0.2 |
| 0.1 |     |
| 0.1 |     |
| 0.1 |     |
| 0.2 | 0.1 |
| 0.2 | 0.1 |
| 0.2 | 0.1 |
| 0.2 | 0.2 |
| 0.2 | 0.2 |
| 0.2 | 0.2 |
| 0.2 |     |
| 0.2 |     |
| 0.2 |     |
|     | 0.1 |
|     | 0.1 |
|     | 0.1 |
|     | 0.2 |
|     | 0.2 |
|     | 0.2 |
|     |     |
|     |     |
|     |     |
+-----+-----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A8_B9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u1(c1),
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u2(c2);
+-----+----+
| c1  | c2 |
+-----+----+
| 0.1 | S1 |
| 0.1 | S1 |
| 0.1 | S1 |
| 0.1 | S2 |
| 0.1 | S2 |
| 0.1 | S2 |
| 0.1 |    |
| 0.1 |    |
| 0.1 |    |
| 0.2 | S1 |
| 0.2 | S1 |
| 0.2 | S1 |
| 0.2 | S2 |
| 0.2 | S2 |
| 0.2 | S2 |
| 0.2 |    |
| 0.2 |    |
| 0.2 |    |
|     | S1 |
|     | S1 |
|     | S1 |
|     | S2 |
|     | S2 |
|     | S2 |
|     |    |
|     |    |
|     |    |
+-----+----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A8_B10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u1(c1),
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u2(c2);
+-----+----+
| c1  | c2 |
+-----+----+
| 0.1 |    |
| 0.1 |    |
| 0.1 |    |
| 0.1 |    |
| 0.1 |    |
| 0.1 |    |
| 0.1 |    |
| 0.1 |    |
| 0.1 |    |
| 0.2 |    |
| 0.2 |    |
| 0.2 |    |
| 0.2 |    |
| 0.2 |    |
| 0.2 |    |
| 0.2 |    |
| 0.2 |    |
| 0.2 |    |
|     |    |
|     |    |
|     |    |
|     |    |
|     |    |
|     |    |
|     |    |
|     |    |
|     |    |
+-----+----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A8_B11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u1(c1),
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
+----+----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A8_B12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u1(c1),
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u2(c2);
+-----+------+
| c1  | c2   |
+-----+------+
| 0.1 | 0.1  |
| 0.1 | 0.1  |
| 0.1 | 0.1  |
| 0.1 | 1    |
| 0.1 | 1    |
| 0.1 | 1    |
| 0.1 | S1   |
| 0.1 | S1   |
| 0.1 | S1   |
| 0.1 | true |
| 0.1 | true |
| 0.1 | true |
| 0.1 |      |
| 0.1 |      |
| 0.1 |      |
| 0.2 | 0.1  |
| 0.2 | 0.1  |
| 0.2 | 0.1  |
| 0.2 | 1    |
| 0.2 | 1    |
| 0.2 | 1    |
| 0.2 | S1   |
| 0.2 | S1   |
| 0.2 | S1   |
| 0.2 | true |
| 0.2 | true |
| 0.2 | true |
| 0.2 |      |
| 0.2 |      |
| 0.2 |      |
|     | 0.1  |
|     | 0.1  |
|     | 0.1  |
|     | 1    |
|     | 1    |
|     | 1    |
|     | S1   |
|     | S1   |
|     | S1   |
|     | true |
|     | true |
|     | true |
|     |      |
|     |      |
|     |      |
+-----+------+
(45 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A9_B6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u2(c2);
+----+-------+
| c1 | c2    |
+----+-------+
| S1 | false |
| S1 | false |
| S1 | false |
| S1 | true  |
| S1 | true  |
| S1 | true  |
| S1 |       |
| S1 |       |
| S1 |       |
| S2 | false |
| S2 | false |
| S2 | false |
| S2 | true  |
| S2 | true  |
| S2 | true  |
| S2 |       |
| S2 |       |
| S2 |       |
|    | false |
|    | false |
|    | false |
|    | true  |
|    | true  |
|    | true  |
|    |       |
|    |       |
|    |       |
+----+-------+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A9_B7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
| S1 |  1 |
| S1 |  1 |
| S1 |  1 |
| S1 |  2 |
| S1 |  2 |
| S1 |  2 |
| S1 |    |
| S1 |    |
| S1 |    |
| S2 |  1 |
| S2 |  1 |
| S2 |  1 |
| S2 |  2 |
| S2 |  2 |
| S2 |  2 |
| S2 |    |
| S2 |    |
| S2 |    |
|    |  1 |
|    |  1 |
|    |  1 |
|    |  2 |
|    |  2 |
|    |  2 |
|    |    |
|    |    |
|    |    |
+----+----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A9_B8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u2(c2);
+----+-----+
| c1 | c2  |
+----+-----+
| S1 | 0.1 |
| S1 | 0.1 |
| S1 | 0.1 |
| S1 | 0.2 |
| S1 | 0.2 |
| S1 | 0.2 |
| S1 |     |
| S1 |     |
| S1 |     |
| S2 | 0.1 |
| S2 | 0.1 |
| S2 | 0.1 |
| S2 | 0.2 |
| S2 | 0.2 |
| S2 | 0.2 |
| S2 |     |
| S2 |     |
| S2 |     |
|    | 0.1 |
|    | 0.1 |
|    | 0.1 |
|    | 0.2 |
|    | 0.2 |
|    | 0.2 |
|    |     |
|    |     |
|    |     |
+----+-----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A9_B9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
| S1 | S1 |
| S1 | S1 |
| S1 | S1 |
| S1 | S2 |
| S1 | S2 |
| S1 | S2 |
| S1 |    |
| S1 |    |
| S1 |    |
| S2 | S1 |
| S2 | S1 |
| S2 | S1 |
| S2 | S2 |
| S2 | S2 |
| S2 | S2 |
| S2 |    |
| S2 |    |
| S2 |    |
|    | S1 |
|    | S1 |
|    | S1 |
|    | S2 |
|    | S2 |
|    | S2 |
|    |    |
|    |    |
|    |    |
+----+----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A9_B10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
| S1 |    |
| S1 |    |
| S1 |    |
| S1 |    |
| S1 |    |
| S1 |    |
| S1 |    |
| S1 |    |
| S1 |    |
| S2 |    |
| S2 |    |
| S2 |    |
| S2 |    |
| S2 |    |
| S2 |    |
| S2 |    |
| S2 |    |
| S2 |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
+----+----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A9_B11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
+----+----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A9_B12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u2(c2);
+----+------+
| c1 | c2   |
+----+------+
| S1 | 0.1  |
| S1 | 0.1  |
| S1 | 0.1  |
| S1 | 1    |
| S1 | 1    |
| S1 | 1    |
| S1 | S1   |
| S1 | S1   |
| S1 | S1   |
| S1 | true |
| S1 | true |
| S1 | true |
| S1 |      |
| S1 |      |
| S1 |      |
| S2 | 0.1  |
| S2 | 0.1  |
| S2 | 0.1  |
| S2 | 1    |
| S2 | 1    |
| S2 | 1    |
| S2 | S1   |
| S2 | S1   |
| S2 | S1   |
| S2 | true |
| S2 | true |
| S2 | true |
| S2 |      |
| S2 |      |
| S2 |      |
|    | 0.1  |
|    | 0.1  |
|    | 0.1  |
|    | 1    |
|    | 1    |
|    | 1    |
|    | S1   |
|    | S1   |
|    | S1   |
|    | true |
|    | true |
|    | true |
|    |      |
|    |      |
|    |      |
+----+------+
(45 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A10_B6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u2(c2);
+----+-------+
| c1 | c2    |
+----+-------+
|    | false |
|    | false |
|    | false |
|    | false |
|    | false |
|    | false |
|    | false |
|    | false |
|    | false |
|    | true  |
|    | true  |
|    | true  |
|    | true  |
|    | true  |
|    | true  |
|    | true  |
|    | true  |
|    | true  |
|    |       |
|    |       |
|    |       |
|    |       |
|    |       |
|    |       |
|    |       |
|    |       |
|    |       |
+----+-------+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A10_B7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
|    |  1 |
|    |  1 |
|    |  1 |
|    |  1 |
|    |  1 |
|    |  1 |
|    |  1 |
|    |  1 |
|    |  1 |
|    |  2 |
|    |  2 |
|    |  2 |
|    |  2 |
|    |  2 |
|    |  2 |
|    |  2 |
|    |  2 |
|    |  2 |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
+----+----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A10_B8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u2(c2);
+----+-----+
| c1 | c2  |
+----+-----+
|    | 0.1 |
|    | 0.1 |
|    | 0.1 |
|    | 0.1 |
|    | 0.1 |
|    | 0.1 |
|    | 0.1 |
|    | 0.1 |
|    | 0.1 |
|    | 0.2 |
|    | 0.2 |
|    | 0.2 |
|    | 0.2 |
|    | 0.2 |
|    | 0.2 |
|    | 0.2 |
|    | 0.2 |
|    | 0.2 |
|    |     |
|    |     |
|    |     |
|    |     |
|    |     |
|    |     |
|    |     |
|    |     |
|    |     |
+----+-----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A10_B9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
|    | S1 |
|    | S1 |
|    | S1 |
|    | S1 |
|    | S1 |
|    | S1 |
|    | S1 |
|    | S1 |
|    | S1 |
|    | S2 |
|    | S2 |
|    | S2 |
|    | S2 |
|    | S2 |
|    | S2 |
|    | S2 |
|    | S2 |
|    | S2 |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
+----+----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A10_B10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
|    |    |
+----+----+
(27 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A10_B11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
+----+----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A10_B12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u2(c2);
+----+------+
| c1 | c2   |
+----+------+
|    | 0.1  |
|    | 0.1  |
|    | 0.1  |
|    | 0.1  |
|    | 0.1  |
|    | 0.1  |
|    | 0.1  |
|    | 0.1  |
|    | 0.1  |
|    | 1    |
|    | 1    |
|    | 1    |
|    | 1    |
|    | 1    |
|    | 1    |
|    | 1    |
|    | 1    |
|    | 1    |
|    | S1   |
|    | S1   |
|    | S1   |
|    | S1   |
|    | S1   |
|    | S1   |
|    | S1   |
|    | S1   |
|    | S1   |
|    | true |
|    | true |
|    | true |
|    | true |
|    | true |
|    | true |
|    | true |
|    | true |
|    | true |
|    |      |
|    |      |
|    |      |
|    |      |
|    |      |
|    |      |
|    |      |
|    |      |
|    |      |
+----+------+
(45 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A11_B6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
+----+----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A11_B7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
+----+----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A11_B8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
+----+----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A11_B9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
+----+----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A11_B10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
+----+----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A11_B11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
+----+----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A11_B12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
+----+----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A12_B6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u2(c2);
+------+-------+
| c1   | c2    |
+------+-------+
| 0.1  | false |
| 0.1  | false |
| 0.1  | false |
| 0.1  | true  |
| 0.1  | true  |
| 0.1  | true  |
| 0.1  |       |
| 0.1  |       |
| 0.1  |       |
| 1    | false |
| 1    | false |
| 1    | false |
| 1    | true  |
| 1    | true  |
| 1    | true  |
| 1    |       |
| 1    |       |
| 1    |       |
| S1   | false |
| S1   | false |
| S1   | false |
| S1   | true  |
| S1   | true  |
| S1   | true  |
| S1   |       |
| S1   |       |
| S1   |       |
| true | false |
| true | false |
| true | false |
| true | true  |
| true | true  |
| true | true  |
| true |       |
| true |       |
| true |       |
|      | false |
|      | false |
|      | false |
|      | true  |
|      | true  |
|      | true  |
|      |       |
|      |       |
|      |       |
+------+-------+
(45 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A12_B7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u2(c2);
+------+----+
| c1   | c2 |
+------+----+
| 0.1  |  1 |
| 0.1  |  1 |
| 0.1  |  1 |
| 0.1  |  2 |
| 0.1  |  2 |
| 0.1  |  2 |
| 0.1  |    |
| 0.1  |    |
| 0.1  |    |
| 1    |  1 |
| 1    |  1 |
| 1    |  1 |
| 1    |  2 |
| 1    |  2 |
| 1    |  2 |
| 1    |    |
| 1    |    |
| 1    |    |
| S1   |  1 |
| S1   |  1 |
| S1   |  1 |
| S1   |  2 |
| S1   |  2 |
| S1   |  2 |
| S1   |    |
| S1   |    |
| S1   |    |
| true |  1 |
| true |  1 |
| true |  1 |
| true |  2 |
| true |  2 |
| true |  2 |
| true |    |
| true |    |
| true |    |
|      |  1 |
|      |  1 |
|      |  1 |
|      |  2 |
|      |  2 |
|      |  2 |
|      |    |
|      |    |
|      |    |
+------+----+
(45 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A12_B8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u2(c2);
+------+-----+
| c1   | c2  |
+------+-----+
| 0.1  | 0.1 |
| 0.1  | 0.1 |
| 0.1  | 0.1 |
| 0.1  | 0.2 |
| 0.1  | 0.2 |
| 0.1  | 0.2 |
| 0.1  |     |
| 0.1  |     |
| 0.1  |     |
| 1    | 0.1 |
| 1    | 0.1 |
| 1    | 0.1 |
| 1    | 0.2 |
| 1    | 0.2 |
| 1    | 0.2 |
| 1    |     |
| 1    |     |
| 1    |     |
| S1   | 0.1 |
| S1   | 0.1 |
| S1   | 0.1 |
| S1   | 0.2 |
| S1   | 0.2 |
| S1   | 0.2 |
| S1   |     |
| S1   |     |
| S1   |     |
| true | 0.1 |
| true | 0.1 |
| true | 0.1 |
| true | 0.2 |
| true | 0.2 |
| true | 0.2 |
| true |     |
| true |     |
| true |     |
|      | 0.1 |
|      | 0.1 |
|      | 0.1 |
|      | 0.2 |
|      | 0.2 |
|      | 0.2 |
|      |     |
|      |     |
|      |     |
+------+-----+
(45 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A12_B9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u2(c2);
+------+----+
| c1   | c2 |
+------+----+
| 0.1  | S1 |
| 0.1  | S1 |
| 0.1  | S1 |
| 0.1  | S2 |
| 0.1  | S2 |
| 0.1  | S2 |
| 0.1  |    |
| 0.1  |    |
| 0.1  |    |
| 1    | S1 |
| 1    | S1 |
| 1    | S1 |
| 1    | S2 |
| 1    | S2 |
| 1    | S2 |
| 1    |    |
| 1    |    |
| 1    |    |
| S1   | S1 |
| S1   | S1 |
| S1   | S1 |
| S1   | S2 |
| S1   | S2 |
| S1   | S2 |
| S1   |    |
| S1   |    |
| S1   |    |
| true | S1 |
| true | S1 |
| true | S1 |
| true | S2 |
| true | S2 |
| true | S2 |
| true |    |
| true |    |
| true |    |
|      | S1 |
|      | S1 |
|      | S1 |
|      | S2 |
|      | S2 |
|      | S2 |
|      |    |
|      |    |
|      |    |
+------+----+
(45 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A12_B10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u2(c2);
+------+----+
| c1   | c2 |
+------+----+
| 0.1  |    |
| 0.1  |    |
| 0.1  |    |
| 0.1  |    |
| 0.1  |    |
| 0.1  |    |
| 0.1  |    |
| 0.1  |    |
| 0.1  |    |
| 1    |    |
| 1    |    |
| 1    |    |
| 1    |    |
| 1    |    |
| 1    |    |
| 1    |    |
| 1    |    |
| 1    |    |
| S1   |    |
| S1   |    |
| S1   |    |
| S1   |    |
| S1   |    |
| S1   |    |
| S1   |    |
| S1   |    |
| S1   |    |
| true |    |
| true |    |
| true |    |
| true |    |
| true |    |
| true |    |
| true |    |
| true |    |
| true |    |
|      |    |
|      |    |
|      |    |
|      |    |
|      |    |
|      |    |
|      |    |
|      |    |
|      |    |
+------+----+
(45 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A12_B11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u2(c2);
+----+----+
| c1 | c2 |
+----+----+
+----+----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_multi_unnests TEST_ID: A12_B12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c1,
       c2
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u1(c1),
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u2(c2);
+------+------+
| c1   | c2   |
+------+------+
| 0.1  | 0.1  |
| 0.1  | 0.1  |
| 0.1  | 0.1  |
| 0.1  | 1    |
| 0.1  | 1    |
| 0.1  | 1    |
| 0.1  | S1   |
| 0.1  | S1   |
| 0.1  | S1   |
| 0.1  | true |
| 0.1  | true |
| 0.1  | true |
| 0.1  |      |
| 0.1  |      |
| 0.1  |      |
| 1    | 0.1  |
| 1    | 0.1  |
| 1    | 0.1  |
| 1    | 1    |
| 1    | 1    |
| 1    | 1    |
| 1    | S1   |
| 1    | S1   |
| 1    | S1   |
| 1    | true |
| 1    | true |
| 1    | true |
| 1    |      |
| 1    |      |
| 1    |      |
| S1   | 0.1  |
| S1   | 0.1  |
| S1   | 0.1  |
| S1   | 1    |
| S1   | 1    |
| S1   | 1    |
| S1   | S1   |
| S1   | S1   |
| S1   | S1   |
| S1   | true |
| S1   | true |
| S1   | true |
| S1   |      |
| S1   |      |
| S1   |      |
| true | 0.1  |
| true | 0.1  |
| true | 0.1  |
| true | 1    |
| true | 1    |
| true | 1    |
| true | S1   |
| true | S1   |
| true | S1   |
| true | true |
| true | true |
| true | true |
| true |      |
| true |      |
| true |      |
|      | 0.1  |
|      | 0.1  |
|      | 0.1  |
|      | 1    |
|      | 1    |
|      | 1    |
|      | S1   |
|      | S1   |
|      | S1   |
|      | true |
|      | true |
|      | true |
|      |      |
|      |      |
|      |      |
+------+------+
(75 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY c;
+---+-----+
| c | cnt |
+---+-----+
| 0 |   3 |
| 1 |   3 |
|   |   3 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY s_int,
         c;
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 | 0 |   1 |
|     1 | 1 |   1 |
|     1 |   |   1 |
|     2 | 0 |   1 |
|     2 | 1 |   1 |
|     2 |   |   1 |
|       | 0 |   1 |
|       | 1 |   1 |
|       |   |   1 |
+-------+---+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY GROUPING
SETS (c);
+---+-----+
| c | cnt |
+---+-----+
| 0 |   3 |
| 1 |   3 |
|   |   3 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 |   |   3 |
|     2 |   |   3 |
|       | 0 |   3 |
|       | 1 |   3 |
|       |   |   3 |
|       |   |   3 |
+-------+---+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY rollup(c);
+---+-----+
| c | cnt |
+---+-----+
| 0 |   3 |
| 1 |   3 |
|   |   3 |
|   |   9 |
+---+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY rollup(s_int, c);
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 | 0 |   1 |
|     1 | 1 |   1 |
|     1 |   |   1 |
|     1 |   |   3 |
|     2 | 0 |   1 |
|     2 | 1 |   1 |
|     2 |   |   1 |
|     2 |   |   3 |
|       | 0 |   1 |
|       | 1 |   1 |
|       |   |   1 |
|       |   |   3 |
|       |   |   9 |
+-------+---+-----+
(13 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY rollup(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY cube(c);
+---+-----+
| c | cnt |
+---+-----+
| 0 |   3 |
| 1 |   3 |
|   |   3 |
|   |   9 |
+---+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY cube(s_int, c);
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 | 0 |   1 |
|     1 | 1 |   1 |
|     1 |   |   1 |
|     1 |   |   3 |
|     2 | 0 |   1 |
|     2 | 1 |   1 |
|     2 |   |   1 |
|     2 |   |   3 |
|       | 0 |   1 |
|       | 0 |   3 |
|       | 1 |   1 |
|       | 1 |   3 |
|       |   |   1 |
|       |   |   3 |
|       |   |   3 |
|       |   |   9 |
+-------+---+-----+
(16 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY cube(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY c
HAVING c = 0;
+---+-----+
| c | cnt |
+---+-----+
| 0 |   3 |
+---+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A1_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY c;
+-------+-----+
| c     | cnt |
+-------+-----+
| false |   3 |
| true  |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY s_int,
         c;
+-------+-------+-----+
| s_int | c     | cnt |
+-------+-------+-----+
|     1 | false |   1 |
|     1 | true  |   1 |
|     1 |       |   1 |
|     2 | false |   1 |
|     2 | true  |   1 |
|     2 |       |   1 |
|       | false |   1 |
|       | true  |   1 |
|       |       |   1 |
+-------+-------+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY GROUPING
SETS (c);
+-------+-----+
| c     | cnt |
+-------+-----+
| false |   3 |
| true  |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
+-------+-------+-----+
| s_int | c     | cnt |
+-------+-------+-----+
|     1 |       |   3 |
|     2 |       |   3 |
|       | false |   3 |
|       | true  |   3 |
|       |       |   3 |
|       |       |   3 |
+-------+-------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY rollup(c);
+-------+-----+
| c     | cnt |
+-------+-----+
| false |   3 |
| true  |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY rollup(s_int, c);
+-------+-------+-----+
| s_int | c     | cnt |
+-------+-------+-----+
|     1 | false |   1 |
|     1 | true  |   1 |
|     1 |       |   1 |
|     1 |       |   3 |
|     2 | false |   1 |
|     2 | true  |   1 |
|     2 |       |   1 |
|     2 |       |   3 |
|       | false |   1 |
|       | true  |   1 |
|       |       |   1 |
|       |       |   3 |
|       |       |   9 |
+-------+-------+-----+
(13 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY rollup(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY cube(c);
+-------+-----+
| c     | cnt |
+-------+-----+
| false |   3 |
| true  |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY cube(s_int, c);
+-------+-------+-----+
| s_int | c     | cnt |
+-------+-------+-----+
|     1 | false |   1 |
|     1 | true  |   1 |
|     1 |       |   1 |
|     1 |       |   3 |
|     2 | false |   1 |
|     2 | true  |   1 |
|     2 |       |   1 |
|     2 |       |   3 |
|       | false |   1 |
|       | false |   3 |
|       | true  |   1 |
|       | true  |   3 |
|       |       |   1 |
|       |       |   3 |
|       |       |   3 |
|       |       |   9 |
+-------+-------+-----+
(16 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY cube(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY c
HAVING c IS FALSE;
+-------+-----+
| c     | cnt |
+-------+-----+
| false |   3 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A2_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY c;
+---+-----+
| c | cnt |
+---+-----+
| 1 |   3 |
| 2 |   3 |
|   |   3 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY s_int,
         c;
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 | 1 |   1 |
|     1 | 2 |   1 |
|     1 |   |   1 |
|     2 | 1 |   1 |
|     2 | 2 |   1 |
|     2 |   |   1 |
|       | 1 |   1 |
|       | 2 |   1 |
|       |   |   1 |
+-------+---+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY GROUPING
SETS (c);
+---+-----+
| c | cnt |
+---+-----+
| 1 |   3 |
| 2 |   3 |
|   |   3 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 |   |   3 |
|     2 |   |   3 |
|       | 1 |   3 |
|       | 2 |   3 |
|       |   |   3 |
|       |   |   3 |
+-------+---+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY rollup(c);
+---+-----+
| c | cnt |
+---+-----+
| 1 |   3 |
| 2 |   3 |
|   |   3 |
|   |   9 |
+---+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY rollup(s_int, c);
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 | 1 |   1 |
|     1 | 2 |   1 |
|     1 |   |   1 |
|     1 |   |   3 |
|     2 | 1 |   1 |
|     2 | 2 |   1 |
|     2 |   |   1 |
|     2 |   |   3 |
|       | 1 |   1 |
|       | 2 |   1 |
|       |   |   1 |
|       |   |   3 |
|       |   |   9 |
+-------+---+-----+
(13 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY rollup(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY cube(c);
+---+-----+
| c | cnt |
+---+-----+
| 1 |   3 |
| 2 |   3 |
|   |   3 |
|   |   9 |
+---+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY cube(s_int, c);
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 | 1 |   1 |
|     1 | 2 |   1 |
|     1 |   |   1 |
|     1 |   |   3 |
|     2 | 1 |   1 |
|     2 | 2 |   1 |
|     2 |   |   1 |
|     2 |   |   3 |
|       | 1 |   1 |
|       | 1 |   3 |
|       | 2 |   1 |
|       | 2 |   3 |
|       |   |   1 |
|       |   |   3 |
|       |   |   3 |
|       |   |   9 |
+-------+---+-----+
(16 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY cube(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY c
HAVING c = 1;
+---+-----+
| c | cnt |
+---+-----+
| 1 |   3 |
+---+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A3_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY c;
+---+-----+
| c | cnt |
+---+-----+
| 1 |   3 |
| 2 |   3 |
|   |   3 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY s_int,
         c;
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 | 1 |   1 |
|     1 | 2 |   1 |
|     1 |   |   1 |
|     2 | 1 |   1 |
|     2 | 2 |   1 |
|     2 |   |   1 |
|       | 1 |   1 |
|       | 2 |   1 |
|       |   |   1 |
+-------+---+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY GROUPING
SETS (c);
+---+-----+
| c | cnt |
+---+-----+
| 1 |   3 |
| 2 |   3 |
|   |   3 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 |   |   3 |
|     2 |   |   3 |
|       | 1 |   3 |
|       | 2 |   3 |
|       |   |   3 |
|       |   |   3 |
+-------+---+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY rollup(c);
+---+-----+
| c | cnt |
+---+-----+
| 1 |   3 |
| 2 |   3 |
|   |   3 |
|   |   9 |
+---+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY rollup(s_int, c);
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 | 1 |   1 |
|     1 | 2 |   1 |
|     1 |   |   1 |
|     1 |   |   3 |
|     2 | 1 |   1 |
|     2 | 2 |   1 |
|     2 |   |   1 |
|     2 |   |   3 |
|       | 1 |   1 |
|       | 2 |   1 |
|       |   |   1 |
|       |   |   3 |
|       |   |   9 |
+-------+---+-----+
(13 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY rollup(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY cube(c);
+---+-----+
| c | cnt |
+---+-----+
| 1 |   3 |
| 2 |   3 |
|   |   3 |
|   |   9 |
+---+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY cube(s_int, c);
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 | 1 |   1 |
|     1 | 2 |   1 |
|     1 |   |   1 |
|     1 |   |   3 |
|     2 | 1 |   1 |
|     2 | 2 |   1 |
|     2 |   |   1 |
|     2 |   |   3 |
|       | 1 |   1 |
|       | 1 |   3 |
|       | 2 |   1 |
|       | 2 |   3 |
|       |   |   1 |
|       |   |   3 |
|       |   |   3 |
|       |   |   9 |
+-------+---+-----+
(16 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY cube(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY c
HAVING c = 1;
+---+-----+
| c | cnt |
+---+-----+
| 1 |   3 |
+---+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A4_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY c;
+-----+-----+
| c   | cnt |
+-----+-----+
| 0.1 |   3 |
| 0.2 |   3 |
|     |   3 |
+-----+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY s_int,
         c;
+-------+-----+-----+
| s_int | c   | cnt |
+-------+-----+-----+
|     1 | 0.1 |   1 |
|     1 | 0.2 |   1 |
|     1 |     |   1 |
|     2 | 0.1 |   1 |
|     2 | 0.2 |   1 |
|     2 |     |   1 |
|       | 0.1 |   1 |
|       | 0.2 |   1 |
|       |     |   1 |
+-------+-----+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY GROUPING
SETS (c);
+-----+-----+
| c   | cnt |
+-----+-----+
| 0.1 |   3 |
| 0.2 |   3 |
|     |   3 |
+-----+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
+-------+-----+-----+
| s_int | c   | cnt |
+-------+-----+-----+
|     1 |     |   3 |
|     2 |     |   3 |
|       | 0.1 |   3 |
|       | 0.2 |   3 |
|       |     |   3 |
|       |     |   3 |
+-------+-----+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY rollup(c);
+-----+-----+
| c   | cnt |
+-----+-----+
| 0.1 |   3 |
| 0.2 |   3 |
|     |   3 |
|     |   9 |
+-----+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY rollup(s_int, c);
+-------+-----+-----+
| s_int | c   | cnt |
+-------+-----+-----+
|     1 | 0.1 |   1 |
|     1 | 0.2 |   1 |
|     1 |     |   1 |
|     1 |     |   3 |
|     2 | 0.1 |   1 |
|     2 | 0.2 |   1 |
|     2 |     |   1 |
|     2 |     |   3 |
|       | 0.1 |   1 |
|       | 0.2 |   1 |
|       |     |   1 |
|       |     |   3 |
|       |     |   9 |
+-------+-----+-----+
(13 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY rollup(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY cube(c);
+-----+-----+
| c   | cnt |
+-----+-----+
| 0.1 |   3 |
| 0.2 |   3 |
|     |   3 |
|     |   9 |
+-----+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY cube(s_int, c);
+-------+-----+-----+
| s_int | c   | cnt |
+-------+-----+-----+
|     1 | 0.1 |   1 |
|     1 | 0.2 |   1 |
|     1 |     |   1 |
|     1 |     |   3 |
|     2 | 0.1 |   1 |
|     2 | 0.2 |   1 |
|     2 |     |   1 |
|     2 |     |   3 |
|       | 0.1 |   1 |
|       | 0.1 |   3 |
|       | 0.2 |   1 |
|       | 0.2 |   3 |
|       |     |   1 |
|       |     |   3 |
|       |     |   3 |
|       |     |   9 |
+-------+-----+-----+
(16 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY cube(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY c
HAVING c = 0.1;
+-----+-----+
| c   | cnt |
+-----+-----+
| 0.1 |   3 |
+-----+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A5_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY c;
+-----+-----+
| c   | cnt |
+-----+-----+
| 0.1 |   3 |
| 0.2 |   3 |
|     |   3 |
+-----+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY s_int,
         c;
+-------+-----+-----+
| s_int | c   | cnt |
+-------+-----+-----+
|     1 | 0.1 |   1 |
|     1 | 0.2 |   1 |
|     1 |     |   1 |
|     2 | 0.1 |   1 |
|     2 | 0.2 |   1 |
|     2 |     |   1 |
|       | 0.1 |   1 |
|       | 0.2 |   1 |
|       |     |   1 |
+-------+-----+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY GROUPING
SETS (c);
+-----+-----+
| c   | cnt |
+-----+-----+
| 0.1 |   3 |
| 0.2 |   3 |
|     |   3 |
+-----+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
+-------+-----+-----+
| s_int | c   | cnt |
+-------+-----+-----+
|     1 |     |   3 |
|     2 |     |   3 |
|       | 0.1 |   3 |
|       | 0.2 |   3 |
|       |     |   3 |
|       |     |   3 |
+-------+-----+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY rollup(c);
+-----+-----+
| c   | cnt |
+-----+-----+
| 0.1 |   3 |
| 0.2 |   3 |
|     |   3 |
|     |   9 |
+-----+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY rollup(s_int, c);
+-------+-----+-----+
| s_int | c   | cnt |
+-------+-----+-----+
|     1 | 0.1 |   1 |
|     1 | 0.2 |   1 |
|     1 |     |   1 |
|     1 |     |   3 |
|     2 | 0.1 |   1 |
|     2 | 0.2 |   1 |
|     2 |     |   1 |
|     2 |     |   3 |
|       | 0.1 |   1 |
|       | 0.2 |   1 |
|       |     |   1 |
|       |     |   3 |
|       |     |   9 |
+-------+-----+-----+
(13 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY rollup(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY cube(c);
+-----+-----+
| c   | cnt |
+-----+-----+
| 0.1 |   3 |
| 0.2 |   3 |
|     |   3 |
|     |   9 |
+-----+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY cube(s_int, c);
+-------+-----+-----+
| s_int | c   | cnt |
+-------+-----+-----+
|     1 | 0.1 |   1 |
|     1 | 0.2 |   1 |
|     1 |     |   1 |
|     1 |     |   3 |
|     2 | 0.1 |   1 |
|     2 | 0.2 |   1 |
|     2 |     |   1 |
|     2 |     |   3 |
|       | 0.1 |   1 |
|       | 0.1 |   3 |
|       | 0.2 |   1 |
|       | 0.2 |   3 |
|       |     |   1 |
|       |     |   3 |
|       |     |   3 |
|       |     |   9 |
+-------+-----+-----+
(16 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY cube(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY c
HAVING c = 0.1;
+-----+-----+
| c   | cnt |
+-----+-----+
| 0.1 |   3 |
+-----+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A6_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY c;
+----+-----+
| c  | cnt |
+----+-----+
| S1 |   3 |
| S2 |   3 |
|    |   3 |
+----+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY s_int,
         c;
+-------+----+-----+
| s_int | c  | cnt |
+-------+----+-----+
|     1 | S1 |   1 |
|     1 | S2 |   1 |
|     1 |    |   1 |
|     2 | S1 |   1 |
|     2 | S2 |   1 |
|     2 |    |   1 |
|       | S1 |   1 |
|       | S2 |   1 |
|       |    |   1 |
+-------+----+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY GROUPING
SETS (c);
+----+-----+
| c  | cnt |
+----+-----+
| S1 |   3 |
| S2 |   3 |
|    |   3 |
+----+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
+-------+----+-----+
| s_int | c  | cnt |
+-------+----+-----+
|     1 |    |   3 |
|     2 |    |   3 |
|       | S1 |   3 |
|       | S2 |   3 |
|       |    |   3 |
|       |    |   3 |
+-------+----+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY rollup(c);
+----+-----+
| c  | cnt |
+----+-----+
| S1 |   3 |
| S2 |   3 |
|    |   3 |
|    |   9 |
+----+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY rollup(s_int, c);
+-------+----+-----+
| s_int | c  | cnt |
+-------+----+-----+
|     1 | S1 |   1 |
|     1 | S2 |   1 |
|     1 |    |   1 |
|     1 |    |   3 |
|     2 | S1 |   1 |
|     2 | S2 |   1 |
|     2 |    |   1 |
|     2 |    |   3 |
|       | S1 |   1 |
|       | S2 |   1 |
|       |    |   1 |
|       |    |   3 |
|       |    |   9 |
+-------+----+-----+
(13 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY rollup(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY cube(c);
+----+-----+
| c  | cnt |
+----+-----+
| S1 |   3 |
| S2 |   3 |
|    |   3 |
|    |   9 |
+----+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY cube(s_int, c);
+-------+----+-----+
| s_int | c  | cnt |
+-------+----+-----+
|     1 | S1 |   1 |
|     1 | S2 |   1 |
|     1 |    |   1 |
|     1 |    |   3 |
|     2 | S1 |   1 |
|     2 | S2 |   1 |
|     2 |    |   1 |
|     2 |    |   3 |
|       | S1 |   1 |
|       | S1 |   3 |
|       | S2 |   1 |
|       | S2 |   3 |
|       |    |   1 |
|       |    |   3 |
|       |    |   3 |
|       |    |   9 |
+-------+----+-----+
(16 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY cube(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY c
HAVING c = 'S1';
+----+-----+
| c  | cnt |
+----+-----+
| S1 |   3 |
+----+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A7_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY c;
+----+-----+
| c  | cnt |
+----+-----+
| S1 |   3 |
| S2 |   3 |
|    |   3 |
+----+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY s_int,
         c;
+-------+----+-----+
| s_int | c  | cnt |
+-------+----+-----+
|     1 | S1 |   1 |
|     1 | S2 |   1 |
|     1 |    |   1 |
|     2 | S1 |   1 |
|     2 | S2 |   1 |
|     2 |    |   1 |
|       | S1 |   1 |
|       | S2 |   1 |
|       |    |   1 |
+-------+----+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (c);
+----+-----+
| c  | cnt |
+----+-----+
| S1 |   3 |
| S2 |   3 |
|    |   3 |
+----+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
+-------+----+-----+
| s_int | c  | cnt |
+-------+----+-----+
|     1 |    |   3 |
|     2 |    |   3 |
|       | S1 |   3 |
|       | S2 |   3 |
|       |    |   3 |
|       |    |   3 |
+-------+----+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(c);
+----+-----+
| c  | cnt |
+----+-----+
| S1 |   3 |
| S2 |   3 |
|    |   3 |
|    |   9 |
+----+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(s_int, c);
+-------+----+-----+
| s_int | c  | cnt |
+-------+----+-----+
|     1 | S1 |   1 |
|     1 | S2 |   1 |
|     1 |    |   1 |
|     1 |    |   3 |
|     2 | S1 |   1 |
|     2 | S2 |   1 |
|     2 |    |   1 |
|     2 |    |   3 |
|       | S1 |   1 |
|       | S2 |   1 |
|       |    |   1 |
|       |    |   3 |
|       |    |   9 |
+-------+----+-----+
(13 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY cube(c);
+----+-----+
| c  | cnt |
+----+-----+
| S1 |   3 |
| S2 |   3 |
|    |   3 |
|    |   9 |
+----+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY cube(s_int, c);
+-------+----+-----+
| s_int | c  | cnt |
+-------+----+-----+
|     1 | S1 |   1 |
|     1 | S2 |   1 |
|     1 |    |   1 |
|     1 |    |   3 |
|     2 | S1 |   1 |
|     2 | S2 |   1 |
|     2 |    |   1 |
|     2 |    |   3 |
|       | S1 |   1 |
|       | S1 |   3 |
|       | S2 |   1 |
|       | S2 |   3 |
|       |    |   1 |
|       |    |   3 |
|       |    |   3 |
|       |    |   9 |
+-------+----+-----+
(16 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY cube(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY c
HAVING c = 'S1';
+----+-----+
| c  | cnt |
+----+-----+
| S1 |   3 |
+----+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A8_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY c;
+------+-----+
| c    | cnt |
+------+-----+
| 0.1  |   3 |
| 1    |   3 |
| S1   |   3 |
| true |   3 |
|      |   3 |
+------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY s_int,
         c;
+-------+------+-----+
| s_int | c    | cnt |
+-------+------+-----+
|     1 | 0.1  |   1 |
|     1 | 1    |   1 |
|     1 | S1   |   1 |
|     1 | true |   1 |
|     1 |      |   1 |
|     2 | 0.1  |   1 |
|     2 | 1    |   1 |
|     2 | S1   |   1 |
|     2 | true |   1 |
|     2 |      |   1 |
|       | 0.1  |   1 |
|       | 1    |   1 |
|       | S1   |   1 |
|       | true |   1 |
|       |      |   1 |
+-------+------+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
|     2 |   5 |
|       |   5 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY GROUPING
SETS (c);
+------+-----+
| c    | cnt |
+------+-----+
| 0.1  |   3 |
| 1    |   3 |
| S1   |   3 |
| true |   3 |
|      |   3 |
+------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
+-------+------+-----+
| s_int | c    | cnt |
+-------+------+-----+
|     1 |      |   5 |
|     2 |      |   5 |
|       | 0.1  |   3 |
|       | 1    |   3 |
|       | S1   |   3 |
|       | true |   3 |
|       |      |   3 |
|       |      |   5 |
+-------+------+-----+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
|     2 |   5 |
|       |   5 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY rollup(c);
+------+-----+
| c    | cnt |
+------+-----+
| 0.1  |   3 |
| 1    |   3 |
| S1   |   3 |
| true |   3 |
|      |  15 |
|      |   3 |
+------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY rollup(s_int, c);
+-------+------+-----+
| s_int | c    | cnt |
+-------+------+-----+
|     1 | 0.1  |   1 |
|     1 | 1    |   1 |
|     1 | S1   |   1 |
|     1 | true |   1 |
|     1 |      |   1 |
|     1 |      |   5 |
|     2 | 0.1  |   1 |
|     2 | 1    |   1 |
|     2 | S1   |   1 |
|     2 | true |   1 |
|     2 |      |   1 |
|     2 |      |   5 |
|       | 0.1  |   1 |
|       | 1    |   1 |
|       | S1   |   1 |
|       | true |   1 |
|       |      |   1 |
|       |      |  15 |
|       |      |   5 |
+-------+------+-----+
(19 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY rollup(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
|     2 |   5 |
|       |  15 |
|       |   5 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY cube(c);
+------+-----+
| c    | cnt |
+------+-----+
| 0.1  |   3 |
| 1    |   3 |
| S1   |   3 |
| true |   3 |
|      |  15 |
|      |   3 |
+------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY cube(s_int, c);
+-------+------+-----+
| s_int | c    | cnt |
+-------+------+-----+
|     1 | 0.1  |   1 |
|     1 | 1    |   1 |
|     1 | S1   |   1 |
|     1 | true |   1 |
|     1 |      |   1 |
|     1 |      |   5 |
|     2 | 0.1  |   1 |
|     2 | 1    |   1 |
|     2 | S1   |   1 |
|     2 | true |   1 |
|     2 |      |   1 |
|     2 |      |   5 |
|       | 0.1  |   1 |
|       | 0.1  |   3 |
|       | 1    |   1 |
|       | 1    |   3 |
|       | S1   |   1 |
|       | S1   |   3 |
|       | true |   1 |
|       | true |   3 |
|       |      |   1 |
|       |      |  15 |
|       |      |   3 |
|       |      |   5 |
+-------+------+-----+
(24 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY cube(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
|     2 |   5 |
|       |  15 |
|       |   5 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY c
HAVING c = 'S1';
+----+-----+
| c  | cnt |
+----+-----+
| S1 |   3 |
+----+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A9_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY c;
+------+-----+
| c    | cnt |
+------+-----+
| 0.1  |   3 |
| 1    |   3 |
| S1   |   3 |
| true |   3 |
|      |   3 |
+------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY s_int,
         c;
+-------+------+-----+
| s_int | c    | cnt |
+-------+------+-----+
|     1 | 0.1  |   1 |
|     1 | 1    |   1 |
|     1 | S1   |   1 |
|     1 | true |   1 |
|     1 |      |   1 |
|     2 | 0.1  |   1 |
|     2 | 1    |   1 |
|     2 | S1   |   1 |
|     2 | true |   1 |
|     2 |      |   1 |
|       | 0.1  |   1 |
|       | 1    |   1 |
|       | S1   |   1 |
|       | true |   1 |
|       |      |   1 |
+-------+------+-----+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
|     2 |   5 |
|       |   5 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (c);
+------+-----+
| c    | cnt |
+------+-----+
| 0.1  |   3 |
| 1    |   3 |
| S1   |   3 |
| true |   3 |
|      |   3 |
+------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
+-------+------+-----+
| s_int | c    | cnt |
+-------+------+-----+
|     1 |      |   5 |
|     2 |      |   5 |
|       | 0.1  |   3 |
|       | 1    |   3 |
|       | S1   |   3 |
|       | true |   3 |
|       |      |   3 |
|       |      |   5 |
+-------+------+-----+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
|     2 |   5 |
|       |   5 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(c);
+------+-----+
| c    | cnt |
+------+-----+
| 0.1  |   3 |
| 1    |   3 |
| S1   |   3 |
| true |   3 |
|      |  15 |
|      |   3 |
+------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(s_int, c);
+-------+------+-----+
| s_int | c    | cnt |
+-------+------+-----+
|     1 | 0.1  |   1 |
|     1 | 1    |   1 |
|     1 | S1   |   1 |
|     1 | true |   1 |
|     1 |      |   1 |
|     1 |      |   5 |
|     2 | 0.1  |   1 |
|     2 | 1    |   1 |
|     2 | S1   |   1 |
|     2 | true |   1 |
|     2 |      |   1 |
|     2 |      |   5 |
|       | 0.1  |   1 |
|       | 1    |   1 |
|       | S1   |   1 |
|       | true |   1 |
|       |      |   1 |
|       |      |  15 |
|       |      |   5 |
+-------+------+-----+
(19 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
|     2 |   5 |
|       |  15 |
|       |   5 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY cube(c);
+------+-----+
| c    | cnt |
+------+-----+
| 0.1  |   3 |
| 1    |   3 |
| S1   |   3 |
| true |   3 |
|      |  15 |
|      |   3 |
+------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY cube(s_int, c);
+-------+------+-----+
| s_int | c    | cnt |
+-------+------+-----+
|     1 | 0.1  |   1 |
|     1 | 1    |   1 |
|     1 | S1   |   1 |
|     1 | true |   1 |
|     1 |      |   1 |
|     1 |      |   5 |
|     2 | 0.1  |   1 |
|     2 | 1    |   1 |
|     2 | S1   |   1 |
|     2 | true |   1 |
|     2 |      |   1 |
|     2 |      |   5 |
|       | 0.1  |   1 |
|       | 0.1  |   3 |
|       | 1    |   1 |
|       | 1    |   3 |
|       | S1   |   1 |
|       | S1   |   3 |
|       | true |   1 |
|       | true |   3 |
|       |      |   1 |
|       |      |  15 |
|       |      |   3 |
|       |      |   5 |
+-------+------+-----+
(24 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY cube(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
|     2 |   5 |
|       |  15 |
|       |   5 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY c
HAVING c = 'S1';
+----+-----+
| c  | cnt |
+----+-----+
| S1 |   3 |
+----+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A10_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   5 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY c;
+---+-----+
| c | cnt |
+---+-----+
|   |   9 |
+---+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY s_int,
         c;
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 |   |   3 |
|     2 |   |   3 |
|       |   |   3 |
+-------+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (c);
+---+-----+
| c | cnt |
+---+-----+
|   |   9 |
+---+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 |   |   3 |
|     2 |   |   3 |
|       |   |   3 |
|       |   |   9 |
+-------+---+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(c);
+---+-----+
| c | cnt |
+---+-----+
|   |   9 |
|   |   9 |
+---+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(s_int, c);
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 |   |   3 |
|     1 |   |   3 |
|     2 |   |   3 |
|     2 |   |   3 |
|       |   |   3 |
|       |   |   3 |
|       |   |   9 |
+-------+---+-----+
(7 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY cube(c);
+---+-----+
| c | cnt |
+---+-----+
|   |   9 |
|   |   9 |
+---+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY cube(s_int, c);
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
|     1 |   |   3 |
|     1 |   |   3 |
|     2 |   |   3 |
|     2 |   |   3 |
|       |   |   3 |
|       |   |   3 |
|       |   |   9 |
|       |   |   9 |
+-------+---+-----+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY cube(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
|     2 |   3 |
|       |   3 |
|       |   9 |
+-------+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY c
HAVING c IS NULL;
+---+-----+
| c | cnt |
+---+-----+
|   |   9 |
+---+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A11_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     1 |   3 |
+-------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY c;
+---+-----+
| c | cnt |
+---+-----+
+---+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY s_int,
         c;
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
+-------+---+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY s_int;
+-------+-----+
| s_int | cnt |
+-------+-----+
+-------+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (c);
+---+-----+
| c | cnt |
+---+-----+
+---+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (s_int,
      c);
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
+-------+---+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY GROUPING
SETS (s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
+-------+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(c);
+---+-----+
| c | cnt |
+---+-----+
+---+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(s_int, c);
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
+-------+---+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY rollup(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
+-------+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY cube(c);
+---+-----+
| c | cnt |
+---+-----+
+---+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY cube(s_int, c);
+-------+---+-----+
| s_int | c | cnt |
+-------+---+-----+
+-------+---+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY cube(s_int);
+-------+-----+
| s_int | cnt |
+-------+-----+
+-------+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY c
HAVING c = 1;
+---+-----+
| c | cnt |
+---+-----+
+---+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_group_by TEST_ID: A12_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY s_int
HAVING s_int=1;
+-------+-----+
| s_int | cnt |
+-------+-----+
+-------+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY c
ORDER BY c ASC;
+---+-----+
| c | cnt |
+---+-----+
|   |   3 |
| 0 |   3 |
| 1 |   3 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY c
ORDER BY 1 DESC;
+---+-----+
| c | cnt |
+---+-----+
| 1 |   3 |
| 0 |   3 |
|   |   3 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_bool) AS u(c)
ORDER BY c ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_bool) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(a_bool) AS u(c)
   ORDER BY c ASC);
+---+
| c |
+---+
| 0 |
| 0 |
| 0 |
| 1 |
| 1 |
| 1 |
|   |
|   |
|   |
+---+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(a_bool) AS u(c)
   ORDER BY 1 DESC);
+---+
| c |
+---+
| 0 |
| 0 |
| 0 |
| 1 |
| 1 |
| 1 |
|   |
|   |
|   |
+---+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY __time
ORDER BY __time ASC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |   3 |
| 2022-02-01 00:00:00.000 |   3 |
| 2022-03-01 00:00:00.000 |   3 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY __time
ORDER BY __time DESC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-03-01 00:00:00.000 |   3 |
| 2022-02-01 00:00:00.000 |   3 |
| 2022-01-01 00:00:00.000 |   3 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(a_bool) AS u(c)
ORDER BY __time ASC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(a_bool) AS u(c)
ORDER BY 1 DESC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(a_bool) AS u(c)
   ORDER BY __time ASC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(a_bool) AS u(c)
   ORDER BY 1 DESC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY s_int
ORDER BY s_int ASC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|       |   3 |
|     1 |   3 |
|     2 |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_bool) AS u(c)
GROUP BY s_int
ORDER BY 1 DESC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     2 |   3 |
|     1 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(a_bool) AS u(c)
ORDER BY s_int ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(a_bool) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(a_bool) AS u(c)
   ORDER BY s_int ASC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A1_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(a_bool) AS u(c)
   ORDER BY 1 DESC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY c
ORDER BY c ASC;
+-------+-----+
| c     | cnt |
+-------+-----+
|       |   3 |
| false |   3 |
| true  |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY c
ORDER BY 1 DESC;
+-------+-----+
| c     | cnt |
+-------+-----+
| true  |   3 |
| false |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
ORDER BY c ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
   ORDER BY c ASC);
+-------+
| c     |
+-------+
| false |
| false |
| false |
| true  |
| true  |
| true  |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
   ORDER BY 1 DESC);
+-------+
| c     |
+-------+
| false |
| false |
| false |
| true  |
| true  |
| true  |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY __time
ORDER BY __time ASC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |   3 |
| 2022-02-01 00:00:00.000 |   3 |
| 2022-03-01 00:00:00.000 |   3 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY __time
ORDER BY __time DESC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-03-01 00:00:00.000 |   3 |
| 2022-02-01 00:00:00.000 |   3 |
| 2022-01-01 00:00:00.000 |   3 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
ORDER BY __time ASC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
ORDER BY 1 DESC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
   ORDER BY __time ASC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
   ORDER BY 1 DESC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY s_int
ORDER BY s_int ASC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|       |   3 |
|     1 |   3 |
|     2 |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
GROUP BY s_int
ORDER BY 1 DESC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     2 |   3 |
|     1 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
ORDER BY s_int ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
   ORDER BY s_int ASC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A2_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
   ORDER BY 1 DESC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY c
ORDER BY c ASC;
+---+-----+
| c | cnt |
+---+-----+
|   |   3 |
| 1 |   3 |
| 2 |   3 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY c
ORDER BY 1 DESC;
+---+-----+
| c | cnt |
+---+-----+
| 2 |   3 |
| 1 |   3 |
|   |   3 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_int) AS u(c)
ORDER BY c ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_int) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(a_int) AS u(c)
   ORDER BY c ASC);
+---+
| c |
+---+
| 1 |
| 1 |
| 1 |
| 2 |
| 2 |
| 2 |
|   |
|   |
|   |
+---+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(a_int) AS u(c)
   ORDER BY 1 DESC);
+---+
| c |
+---+
| 1 |
| 1 |
| 1 |
| 2 |
| 2 |
| 2 |
|   |
|   |
|   |
+---+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY __time
ORDER BY __time ASC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |   3 |
| 2022-02-01 00:00:00.000 |   3 |
| 2022-03-01 00:00:00.000 |   3 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY __time
ORDER BY __time DESC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-03-01 00:00:00.000 |   3 |
| 2022-02-01 00:00:00.000 |   3 |
| 2022-01-01 00:00:00.000 |   3 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(a_int) AS u(c)
ORDER BY __time ASC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(a_int) AS u(c)
ORDER BY 1 DESC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(a_int) AS u(c)
   ORDER BY __time ASC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(a_int) AS u(c)
   ORDER BY 1 DESC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY s_int
ORDER BY s_int ASC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|       |   3 |
|     1 |   3 |
|     2 |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_int) AS u(c)
GROUP BY s_int
ORDER BY 1 DESC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     2 |   3 |
|     1 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(a_int) AS u(c)
ORDER BY s_int ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(a_int) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(a_int) AS u(c)
   ORDER BY s_int ASC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A3_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(a_int) AS u(c)
   ORDER BY 1 DESC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY c
ORDER BY c ASC;
+---+-----+
| c | cnt |
+---+-----+
|   |   3 |
| 1 |   3 |
| 2 |   3 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY c
ORDER BY 1 DESC;
+---+-----+
| c | cnt |
+---+-----+
| 2 |   3 |
| 1 |   3 |
|   |   3 |
+---+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
ORDER BY c ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   ORDER BY c ASC);
+---+
| c |
+---+
| 1 |
| 1 |
| 1 |
| 2 |
| 2 |
| 2 |
|   |
|   |
|   |
+---+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   ORDER BY 1 DESC);
+---+
| c |
+---+
| 1 |
| 1 |
| 1 |
| 2 |
| 2 |
| 2 |
|   |
|   |
|   |
+---+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY __time
ORDER BY __time ASC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |   3 |
| 2022-02-01 00:00:00.000 |   3 |
| 2022-03-01 00:00:00.000 |   3 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY __time
ORDER BY __time DESC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-03-01 00:00:00.000 |   3 |
| 2022-02-01 00:00:00.000 |   3 |
| 2022-01-01 00:00:00.000 |   3 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
ORDER BY __time ASC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
ORDER BY 1 DESC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   ORDER BY __time ASC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   ORDER BY 1 DESC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY s_int
ORDER BY s_int ASC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|       |   3 |
|     1 |   3 |
|     2 |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
GROUP BY s_int
ORDER BY 1 DESC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     2 |   3 |
|     1 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
ORDER BY s_int ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   ORDER BY s_int ASC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A4_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   ORDER BY 1 DESC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY c
ORDER BY c ASC;
+-----+-----+
| c   | cnt |
+-----+-----+
|     |   3 |
| 0.1 |   3 |
| 0.2 |   3 |
+-----+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY c
ORDER BY 1 DESC;
+-----+-----+
| c   | cnt |
+-----+-----+
| 0.2 |   3 |
| 0.1 |   3 |
|     |   3 |
+-----+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_float) AS u(c)
ORDER BY c ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_float) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(a_float) AS u(c)
   ORDER BY c ASC);
+-----+
| c   |
+-----+
| 0.1 |
| 0.1 |
| 0.1 |
| 0.2 |
| 0.2 |
| 0.2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(a_float) AS u(c)
   ORDER BY 1 DESC);
+-----+
| c   |
+-----+
| 0.1 |
| 0.1 |
| 0.1 |
| 0.2 |
| 0.2 |
| 0.2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY __time
ORDER BY __time ASC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |   3 |
| 2022-02-01 00:00:00.000 |   3 |
| 2022-03-01 00:00:00.000 |   3 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY __time
ORDER BY __time DESC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-03-01 00:00:00.000 |   3 |
| 2022-02-01 00:00:00.000 |   3 |
| 2022-01-01 00:00:00.000 |   3 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(a_float) AS u(c)
ORDER BY __time ASC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(a_float) AS u(c)
ORDER BY 1 DESC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(a_float) AS u(c)
   ORDER BY __time ASC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(a_float) AS u(c)
   ORDER BY 1 DESC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY s_int
ORDER BY s_int ASC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|       |   3 |
|     1 |   3 |
|     2 |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_float) AS u(c)
GROUP BY s_int
ORDER BY 1 DESC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     2 |   3 |
|     1 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(a_float) AS u(c)
ORDER BY s_int ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(a_float) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(a_float) AS u(c)
   ORDER BY s_int ASC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A5_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(a_float) AS u(c)
   ORDER BY 1 DESC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY c
ORDER BY c ASC;
+-----+-----+
| c   | cnt |
+-----+-----+
|     |   3 |
| 0.1 |   3 |
| 0.2 |   3 |
+-----+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY c
ORDER BY 1 DESC;
+-----+-----+
| c   | cnt |
+-----+-----+
| 0.2 |   3 |
| 0.1 |   3 |
|     |   3 |
+-----+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
ORDER BY c ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
   ORDER BY c ASC);
+-----+
| c   |
+-----+
| 0.1 |
| 0.1 |
| 0.1 |
| 0.2 |
| 0.2 |
| 0.2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
   ORDER BY 1 DESC);
+-----+
| c   |
+-----+
| 0.1 |
| 0.1 |
| 0.1 |
| 0.2 |
| 0.2 |
| 0.2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY __time
ORDER BY __time ASC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |   3 |
| 2022-02-01 00:00:00.000 |   3 |
| 2022-03-01 00:00:00.000 |   3 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY __time
ORDER BY __time DESC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-03-01 00:00:00.000 |   3 |
| 2022-02-01 00:00:00.000 |   3 |
| 2022-01-01 00:00:00.000 |   3 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
ORDER BY __time ASC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
ORDER BY 1 DESC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
   ORDER BY __time ASC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
   ORDER BY 1 DESC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY s_int
ORDER BY s_int ASC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|       |   3 |
|     1 |   3 |
|     2 |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
GROUP BY s_int
ORDER BY 1 DESC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     2 |   3 |
|     1 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
ORDER BY s_int ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
   ORDER BY s_int ASC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A6_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
   ORDER BY 1 DESC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY c
ORDER BY c ASC;
+----+-----+
| c  | cnt |
+----+-----+
|    |   3 |
| S1 |   3 |
| S2 |   3 |
+----+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY c
ORDER BY 1 DESC;
+----+-----+
| c  | cnt |
+----+-----+
| S2 |   3 |
| S1 |   3 |
|    |   3 |
+----+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_str) AS u(c)
ORDER BY c ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_str) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(a_str) AS u(c)
   ORDER BY c ASC);
+----+
| c  |
+----+
| S1 |
| S1 |
| S1 |
| S2 |
| S2 |
| S2 |
|    |
|    |
|    |
+----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(a_str) AS u(c)
   ORDER BY 1 DESC);
+----+
| c  |
+----+
| S1 |
| S1 |
| S1 |
| S2 |
| S2 |
| S2 |
|    |
|    |
|    |
+----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY __time
ORDER BY __time ASC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |   3 |
| 2022-02-01 00:00:00.000 |   3 |
| 2022-03-01 00:00:00.000 |   3 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY __time
ORDER BY __time DESC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-03-01 00:00:00.000 |   3 |
| 2022-02-01 00:00:00.000 |   3 |
| 2022-01-01 00:00:00.000 |   3 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(a_str) AS u(c)
ORDER BY __time ASC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(a_str) AS u(c)
ORDER BY 1 DESC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(a_str) AS u(c)
   ORDER BY __time ASC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(a_str) AS u(c)
   ORDER BY 1 DESC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY s_int
ORDER BY s_int ASC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|       |   3 |
|     1 |   3 |
|     2 |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_str) AS u(c)
GROUP BY s_int
ORDER BY 1 DESC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     2 |   3 |
|     1 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(a_str) AS u(c)
ORDER BY s_int ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(a_str) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(a_str) AS u(c)
   ORDER BY s_int ASC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A7_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(a_str) AS u(c)
   ORDER BY 1 DESC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A8_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY c
ORDER BY c ASC;
+----+-----+
| c  | cnt |
+----+-----+
|    |   3 |
| S1 |   3 |
| S2 |   3 |
+----+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A8_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY c
ORDER BY 1 DESC;
+----+-----+
| c  | cnt |
+----+-----+
| S2 |   3 |
| S1 |   3 |
|    |   3 |
+----+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A8_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
ORDER BY c ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A8_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A8_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
   ORDER BY c ASC);
+----+
| c  |
+----+
| S1 |
| S1 |
| S1 |
| S2 |
| S2 |
| S2 |
|    |
|    |
|    |
+----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A8_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
   ORDER BY 1 DESC);
+----+
| c  |
+----+
| S1 |
| S1 |
| S1 |
| S2 |
| S2 |
| S2 |
|    |
|    |
|    |
+----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A8_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY __time
ORDER BY __time ASC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |   3 |
| 2022-02-01 00:00:00.000 |   3 |
| 2022-03-01 00:00:00.000 |   3 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A8_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY __time
ORDER BY __time DESC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-03-01 00:00:00.000 |   3 |
| 2022-02-01 00:00:00.000 |   3 |
| 2022-01-01 00:00:00.000 |   3 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A8_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
ORDER BY __time ASC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A8_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
ORDER BY 1 DESC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A8_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
   ORDER BY __time ASC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A8_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
   ORDER BY 1 DESC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A8_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY s_int
ORDER BY s_int ASC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|       |   3 |
|     1 |   3 |
|     2 |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A8_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
GROUP BY s_int
ORDER BY 1 DESC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     2 |   3 |
|     1 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A8_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
ORDER BY s_int ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A8_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A8_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
   ORDER BY s_int ASC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A8_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
   ORDER BY 1 DESC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A9_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY c
ORDER BY c ASC;
+------+-----+
| c    | cnt |
+------+-----+
|      |   3 |
| 0.1  |   3 |
| 1    |   3 |
| S1   |   3 |
| true |   3 |
+------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A9_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY c
ORDER BY 1 DESC;
+------+-----+
| c    | cnt |
+------+-----+
| true |   3 |
| S1   |   3 |
| 1    |   3 |
| 0.1  |   3 |
|      |   3 |
+------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A9_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_mixed) AS u(c)
ORDER BY c ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A9_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(a_mixed) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A9_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(a_mixed) AS u(c)
   ORDER BY c ASC);
+------+
| c    |
+------+
| 0.1  |
| 0.1  |
| 0.1  |
| 1    |
| 1    |
| 1    |
| S1   |
| S1   |
| S1   |
| true |
| true |
| true |
|      |
|      |
|      |
+------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A9_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(a_mixed) AS u(c)
   ORDER BY 1 DESC);
+------+
| c    |
+------+
| 0.1  |
| 0.1  |
| 0.1  |
| 1    |
| 1    |
| 1    |
| S1   |
| S1   |
| S1   |
| true |
| true |
| true |
|      |
|      |
|      |
+------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A9_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY __time
ORDER BY __time ASC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |   5 |
| 2022-02-01 00:00:00.000 |   5 |
| 2022-03-01 00:00:00.000 |   5 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A9_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY __time
ORDER BY __time DESC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-03-01 00:00:00.000 |   5 |
| 2022-02-01 00:00:00.000 |   5 |
| 2022-01-01 00:00:00.000 |   5 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A9_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(a_mixed) AS u(c)
ORDER BY __time ASC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A9_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(a_mixed) AS u(c)
ORDER BY 1 DESC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A9_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(a_mixed) AS u(c)
   ORDER BY __time ASC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A9_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(a_mixed) AS u(c)
   ORDER BY 1 DESC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A9_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY s_int
ORDER BY s_int ASC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|       |   5 |
|     1 |   5 |
|     2 |   5 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A9_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(a_mixed) AS u(c)
GROUP BY s_int
ORDER BY 1 DESC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     2 |   5 |
|     1 |   5 |
|       |   5 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A9_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(a_mixed) AS u(c)
ORDER BY s_int ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A9_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(a_mixed) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A9_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(a_mixed) AS u(c)
   ORDER BY s_int ASC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
|       |
|       |
+-------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A9_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(a_mixed) AS u(c)
   ORDER BY 1 DESC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
|       |
|       |
+-------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A10_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY c
ORDER BY c ASC;
+------+-----+
| c    | cnt |
+------+-----+
|      |   3 |
| 0.1  |   3 |
| 1    |   3 |
| S1   |   3 |
| true |   3 |
+------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A10_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY c
ORDER BY 1 DESC;
+------+-----+
| c    | cnt |
+------+-----+
| true |   3 |
| S1   |   3 |
| 1    |   3 |
| 0.1  |   3 |
|      |   3 |
+------+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A10_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
ORDER BY c ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A10_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A10_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
   ORDER BY c ASC);
+------+
| c    |
+------+
| 0.1  |
| 0.1  |
| 0.1  |
| 1    |
| 1    |
| 1    |
| S1   |
| S1   |
| S1   |
| true |
| true |
| true |
|      |
|      |
|      |
+------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A10_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
   ORDER BY 1 DESC);
+------+
| c    |
+------+
| 0.1  |
| 0.1  |
| 0.1  |
| 1    |
| 1    |
| 1    |
| S1   |
| S1   |
| S1   |
| true |
| true |
| true |
|      |
|      |
|      |
+------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A10_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY __time
ORDER BY __time ASC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |   5 |
| 2022-02-01 00:00:00.000 |   5 |
| 2022-03-01 00:00:00.000 |   5 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A10_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY __time
ORDER BY __time DESC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-03-01 00:00:00.000 |   5 |
| 2022-02-01 00:00:00.000 |   5 |
| 2022-01-01 00:00:00.000 |   5 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A10_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
ORDER BY __time ASC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A10_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
ORDER BY 1 DESC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A10_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
   ORDER BY __time ASC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A10_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
   ORDER BY 1 DESC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A10_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY s_int
ORDER BY s_int ASC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|       |   5 |
|     1 |   5 |
|     2 |   5 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A10_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
GROUP BY s_int
ORDER BY 1 DESC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     2 |   5 |
|     1 |   5 |
|       |   5 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A10_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
ORDER BY s_int ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A10_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A10_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
   ORDER BY s_int ASC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
|       |
|       |
+-------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A10_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
   ORDER BY 1 DESC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
|       |
|       |
+-------+
(15 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A11_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY c
ORDER BY c ASC;
+---+-----+
| c | cnt |
+---+-----+
|   |   9 |
+---+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A11_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY c
ORDER BY 1 DESC;
+---+-----+
| c | cnt |
+---+-----+
|   |   9 |
+---+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A11_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
ORDER BY c ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A11_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A11_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
   ORDER BY c ASC);
+---+
| c |
+---+
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
+---+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A11_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
   ORDER BY 1 DESC);
+---+
| c |
+---+
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
|   |
+---+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A11_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY __time
ORDER BY __time ASC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-01-01 00:00:00.000 |   3 |
| 2022-02-01 00:00:00.000 |   3 |
| 2022-03-01 00:00:00.000 |   3 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A11_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY __time
ORDER BY __time DESC;
+-------------------------+-----+
| __time                  | cnt |
+-------------------------+-----+
| 2022-03-01 00:00:00.000 |   3 |
| 2022-02-01 00:00:00.000 |   3 |
| 2022-01-01 00:00:00.000 |   3 |
+-------------------------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A11_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
ORDER BY __time ASC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A11_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
ORDER BY 1 DESC;
+-------------------------+
| __time                  |
+-------------------------+
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A11_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
   ORDER BY __time ASC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A11_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
   ORDER BY 1 DESC);
+-------------------------+
| __time                  |
+-------------------------+
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-01-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-02-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
| 2022-03-01 00:00:00.000 |
+-------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A11_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY s_int
ORDER BY s_int ASC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|       |   3 |
|     1 |   3 |
|     2 |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A11_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
GROUP BY s_int
ORDER BY 1 DESC;
+-------+-----+
| s_int | cnt |
+-------+-----+
|     2 |   3 |
|     1 |   3 |
|       |   3 |
+-------+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A11_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
ORDER BY s_int ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A11_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A11_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
   ORDER BY s_int ASC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A11_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
   ORDER BY 1 DESC);
+-------+
| s_int |
+-------+
|     1 |
|     1 |
|     1 |
|     2 |
|     2 |
|     2 |
|       |
|       |
|       |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A12_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY c
ORDER BY c ASC;
+---+-----+
| c | cnt |
+---+-----+
+---+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A12_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY c
ORDER BY 1 DESC;
+---+-----+
| c | cnt |
+---+-----+
+---+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A12_B3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
ORDER BY c ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A12_B4 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A12_B5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
   ORDER BY c ASC);
+---+
| c |
+---+
+---+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A12_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c
FROM
  (SELECT c
   FROM test_unnest,
        unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
   ORDER BY 1 DESC);
+---+
| c |
+---+
+---+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A12_B7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY __time
ORDER BY __time ASC;
+--------+-----+
| __time | cnt |
+--------+-----+
+--------+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A12_B8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY __time
ORDER BY __time DESC;
+--------+-----+
| __time | cnt |
+--------+-----+
+--------+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A12_B9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
ORDER BY __time ASC;
+--------+
| __time |
+--------+
+--------+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A12_B10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
ORDER BY 1 DESC;
+--------+
| __time |
+--------+
+--------+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A12_B11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
   ORDER BY __time ASC);
+--------+
| __time |
+--------+
+--------+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A12_B12 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT __time
FROM
  (SELECT __time
   FROM test_unnest,
        unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
   ORDER BY 1 DESC);
+--------+
| __time |
+--------+
+--------+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A12_B13 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY s_int
ORDER BY s_int ASC;
+-------+-----+
| s_int | cnt |
+-------+-----+
+-------+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A12_B14 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       count(*) cnt
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
GROUP BY s_int
ORDER BY 1 DESC;
+-------+-----+
| s_int | cnt |
+-------+-----+
+-------+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A12_B15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
ORDER BY s_int ASC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A12_B16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM test_unnest,
     unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
ORDER BY 1 DESC;
CannotBuildQueryException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A12_B17 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
   ORDER BY s_int ASC);
+-------+
| s_int |
+-------+
+-------+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_order_by TEST_ID: A12_B18 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int
FROM
  (SELECT s_int
   FROM test_unnest,
        unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
   ORDER BY 1 DESC);
+-------+
| s_int |
+-------+
+-------+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A1_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_bool) AS u(c)
   LIMIT 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A1_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_bool) AS u(c)
   OFFSET 1);
+-----+
| cnt |
+-----+
|   8 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A1_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_bool) AS u(c)
   LIMIT 1
   OFFSET 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A2_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)
   LIMIT 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A2_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)
   OFFSET 1);
+-----+
| cnt |
+-----+
|   8 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A2_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)
   LIMIT 1
   OFFSET 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A3_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_float) AS u(c)
   LIMIT 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A3_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_float) AS u(c)
   OFFSET 1);
+-----+
| cnt |
+-----+
|   8 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A3_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_float) AS u(c)
   LIMIT 1
   OFFSET 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A4_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_str) AS u(c)
   LIMIT 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A4_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_str) AS u(c)
   OFFSET 1);
+-----+
| cnt |
+-----+
|   8 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A4_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_str) AS u(c)
   LIMIT 1
   OFFSET 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A5_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_mixed) AS u(c)
   LIMIT 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A5_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_mixed) AS u(c)
   OFFSET 1);
+-----+
| cnt |
+-----+
|  14 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A5_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_mixed) AS u(c)
   LIMIT 1
   OFFSET 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A6_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
   LIMIT 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A6_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
   OFFSET 1);
+-----+
| cnt |
+-----+
|   8 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A6_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
   LIMIT 1
   OFFSET 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A7_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   LIMIT 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A7_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   OFFSET 1);
+-----+
| cnt |
+-----+
|   8 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A7_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   LIMIT 1
   OFFSET 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A8_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
   LIMIT 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A8_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
   OFFSET 1);
+-----+
| cnt |
+-----+
|   8 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A8_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
   LIMIT 1
   OFFSET 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A9_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
   LIMIT 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A9_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
   OFFSET 1);
+-----+
| cnt |
+-----+
|   8 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A9_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
   LIMIT 1
   OFFSET 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A10_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
   LIMIT 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A10_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
   OFFSET 1);
+-----+
| cnt |
+-----+
|   8 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A10_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
   LIMIT 1
   OFFSET 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A11_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
   LIMIT 1);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A11_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
   OFFSET 1);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A11_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
   LIMIT 1
   OFFSET 1);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A12_B2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
   LIMIT 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A12_B4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
   OFFSET 1);
+-----+
| cnt |
+-----+
|  14 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_limit_offset TEST_ID: A12_B6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
   LIMIT 1
   OFFSET 1);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
INNER JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
INNER JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN test_unnest t2,
           unnest(t2.a_int) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
INNER JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
INNER JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
INNER JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
INNER JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
INNER JOIN test_unnest t2,
           unnest(a_int) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
INNER JOIN test_unnest t2,
           unnest(a_int) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
INNER JOIN test_unnest t2,
           unnest(a_int) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
INNER JOIN test_unnest t2,
           unnest(a_int) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
INNER JOIN test_unnest,
           unnest(a_int) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
INNER JOIN test_unnest,
           unnest(a_int) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
INNER JOIN test_unnest,
           unnest(a_int) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
INNER JOIN test_unnest,
           unnest(a_int) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN test_unnest t2,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
INNER JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
INNER JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
INNER JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
INNER JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest t2,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest t2,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest t2,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest t2,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.a_int) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.a_int) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.a_int) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+----+
| s_int | c1 |
+-------+----+
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
+-------+----+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C7 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN test_unnest t2,
     unnest(t2.a_int) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
JOIN test_unnest t2,
     unnest(a_int) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
JOIN test_unnest t2,
     unnest(a_int) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
JOIN test_unnest t2,
     unnest(a_int) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
JOIN test_unnest t2,
     unnest(a_int) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
JOIN test_unnest,
     unnest(a_int) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
JOIN test_unnest,
     unnest(a_int) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
JOIN test_unnest,
     unnest(a_int) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
JOIN test_unnest,
     unnest(a_int) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN test_unnest t2,
     unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest t2,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest t2,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest t2,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest t2,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.a_int) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.a_int) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.a_int) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+----+
| s_int | c1 |
+-------+----+
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
+-------+----+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C7 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
LEFT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
LEFT JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN test_unnest t2,
          unnest(t2.a_int) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
LEFT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
LEFT JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
LEFT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
LEFT JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(a_int) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(a_int) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(a_int) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(a_int) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
LEFT JOIN test_unnest,
          unnest(a_int) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
LEFT JOIN test_unnest,
          unnest(a_int) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
LEFT JOIN test_unnest,
          unnest(a_int) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
LEFT JOIN test_unnest,
          unnest(a_int) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN test_unnest t2,
          unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
LEFT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
LEFT JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
LEFT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
LEFT JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.a_int) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.a_int) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.a_int) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+----+
| s_int | c1 |
+-------+----+
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
+-------+----+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C7 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
RIGHT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
RIGHT JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN test_unnest t2,
           unnest(t2.a_int) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
RIGHT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
RIGHT JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
RIGHT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
RIGHT JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(a_int) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(a_int) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(a_int) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(a_int) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
RIGHT JOIN test_unnest,
           unnest(a_int) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
RIGHT JOIN test_unnest,
           unnest(a_int) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
RIGHT JOIN test_unnest,
           unnest(a_int) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
RIGHT JOIN test_unnest,
           unnest(a_int) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN test_unnest t2,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
RIGHT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
RIGHT JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
RIGHT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
RIGHT JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.a_int) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.a_int) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.a_int) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+----+
| s_int | c1 |
+-------+----+
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
+-------+----+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C7 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
FULL JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
FULL JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN test_unnest t2,
          unnest(t2.a_int) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
FULL JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
FULL JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
FULL JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
FULL JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
FULL JOIN test_unnest t2,
          unnest(a_int) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
FULL JOIN test_unnest t2,
          unnest(a_int) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
FULL JOIN test_unnest t2,
          unnest(a_int) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
FULL JOIN test_unnest t2,
          unnest(a_int) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
FULL JOIN test_unnest,
          unnest(a_int) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
FULL JOIN test_unnest,
          unnest(a_int) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
FULL JOIN test_unnest,
          unnest(a_int) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
FULL JOIN test_unnest,
          unnest(a_int) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN test_unnest t2,
          unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
FULL JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
FULL JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
FULL JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
FULL JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest t2,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest t2,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest t2,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest t2,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.a_int) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.a_int) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.a_int) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+----+
| s_int | c1 |
+-------+----+
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
+-------+----+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C7 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t2.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c),
           test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM (test_unnest t1
      CROSS JOIN unnest(a_int) AS u(c))
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND u.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int=t1.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.c=t1.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int=t1.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.c=t1.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c1
FROM test_unnest t1,
     unnest(t1.a_int) AS u1(c1)
CROSS JOIN test_unnest,
           unnest(t2.a_int) t2 AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c1
FROM test_unnest t1,
     unnest(t1.a_int) AS u1(c1)
CROSS JOIN test_unnest,
           unnest(t2.a_int) t2 AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c1=t2.s_int;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c1
FROM test_unnest t1,
     unnest(t1.a_int) AS u1(c1)
CROSS JOIN test_unnest,
           unnest(t2.a_int) t2 AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.c2;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c1
FROM test_unnest t1,
     unnest(t1.a_int) AS u1(c1)
CROSS JOIN test_unnest,
           unnest(t2.a_int) t2 AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c1=t2.c2;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t2.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c),
           test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM (test_unnest t1
      CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND u.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int=t1.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.c=t1.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int=t1.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.c=t1.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c1
FROM test_unnest t1,
     unnest(t1.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1)
CROSS JOIN test_unnest,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c1
FROM test_unnest t1,
     unnest(t1.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1)
CROSS JOIN test_unnest,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c1=t2.s_int;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c1
FROM test_unnest t1,
     unnest(t1.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1)
CROSS JOIN test_unnest,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.c2;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c1
FROM test_unnest t1,
     unnest(t1.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1)
CROSS JOIN test_unnest,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c1=t2.c2;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A1_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_bool) AS u(c)
   WHERE s_int IN (0,
                   1,
                   999)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(a_bool) AS u(c)
   WHERE s_int IN (2,
                   999));
+-------+---+
| s_int | c |
+-------+---+
|     1 | 0 |
|     1 | 1 |
|     1 |   |
|     2 | 0 |
|     2 | 1 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A1_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_bool) AS u(c)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(a_bool) AS u(c));
Unhandled Query Planning Failure
!error

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A2_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   999)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
   WHERE s_int IN (2,
                   999));
+-------+-------+
| s_int | c     |
+-------+-------+
|     1 | false |
|     1 | true  |
|     1 |       |
|     2 | false |
|     2 | true  |
|     2 |       |
+-------+-------+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A2_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS u(c));
Unhandled Query Planning Failure
!error

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A3_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   999)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (2,
                   999));
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A3_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c));
Unhandled Query Planning Failure
!error

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A4_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   999)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (2,
                   999));
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A4_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c));
Unhandled Query Planning Failure
!error

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A5_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_float) AS u(c)
   WHERE s_int IN (0,
                   1,
                   999)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(a_float) AS u(c)
   WHERE s_int IN (2,
                   999));
+-------+-----+
| s_int | c   |
+-------+-----+
|     1 | 0.1 |
|     1 | 0.2 |
|     1 |     |
|     2 | 0.1 |
|     2 | 0.2 |
|     2 |     |
+-------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A5_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_float) AS u(c)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(a_float) AS u(c));
Unhandled Query Planning Failure
!error

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A6_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   999)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
   WHERE s_int IN (2,
                   999));
+-------+-----+
| s_int | c   |
+-------+-----+
|     1 | 0.1 |
|     1 | 0.2 |
|     1 |     |
|     2 | 0.1 |
|     2 | 0.2 |
|     2 |     |
+-------+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A6_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[2]' RETURNING DOUBLE array)) AS u(c));
Unhandled Query Planning Failure
!error

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A7_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_str) AS u(c)
   WHERE s_int IN (0,
                   1,
                   999)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(a_str) AS u(c)
   WHERE s_int IN (2,
                   999));
+-------+----+
| s_int | c  |
+-------+----+
|     1 | S1 |
|     1 | S2 |
|     1 |    |
|     2 | S1 |
|     2 | S2 |
|     2 |    |
+-------+----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A7_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_str) AS u(c)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(a_str) AS u(c));
Unhandled Query Planning Failure
!error

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A8_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   999)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
   WHERE s_int IN (2,
                   999));
+-------+----+
| s_int | c  |
+-------+----+
|     1 | S1 |
|     1 | S2 |
|     1 |    |
|     2 | S1 |
|     2 | S2 |
|     2 |    |
+-------+----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A8_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS u(c));
Unhandled Query Planning Failure
!error

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A9_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_mixed) AS u(c)
   WHERE s_int IN (0,
                   1,
                   999)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(a_mixed) AS u(c)
   WHERE s_int IN (2,
                   999));
+-------+------+
| s_int | c    |
+-------+------+
|     1 | 0.1  |
|     1 | 1    |
|     1 | S1   |
|     1 | true |
|     1 |      |
|     2 | 0.1  |
|     2 | 1    |
|     2 | S1   |
|     2 | true |
|     2 |      |
+-------+------+
(10 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A9_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_mixed) AS u(c)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(a_mixed) AS u(c));
Unhandled Query Planning Failure
!error

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A10_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   999)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
   WHERE s_int IN (2,
                   999));
+-------+------+
| s_int | c    |
+-------+------+
|     1 | 0.1  |
|     1 | 1    |
|     1 | S1   |
|     1 | true |
|     1 |      |
|     2 | 0.1  |
|     2 | 1    |
|     2 | S1   |
|     2 | true |
|     2 |      |
+-------+------+
(10 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A10_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS u(c));
Unhandled Query Planning Failure
!error

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A11_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   999)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
   WHERE s_int IN (2,
                   999));
+-------+---+
| s_int | c |
+-------+---+
|     1 |   |
|     1 |   |
|     1 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A11_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS u(c));
Unhandled Query Planning Failure
!error

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A12_B1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   999)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
   WHERE s_int IN (2,
                   999));
+-------+---+
| s_int | c |
+-------+---+
+-------+---+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_union_all TEST_ID: A12_B2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c)
   UNION ALL SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS u(c));
Unhandled Query Planning Failure
!error

#-------------------------------------------------------------------------
# Total query count 1091 Positive tests: 907 Negative tests: 184
#-------------------------------------------------------------------------
