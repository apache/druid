!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardComponentSupplier&datasets=sql/src/test/quidem/qatests/qaArray/ops_funcs&numMergeBuffers=3
!set outputformat mysql
SELECT count(*) cnt
FROM test_array;
+-----+
| cnt |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_bool + a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[0]' RETURNING boolean array) + json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][0]' RETURNING boolean array) + json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_int + a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[1]' RETURNING bigint array) + json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][1]' RETURNING bigint array) + json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_float + a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[2]' RETURNING decimal array) + json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][2]' RETURNING decimal array) + json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_str + a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[3]' RETURNING varchar array) + json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][3]' RETURNING varchar array) + json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_null + a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[4]' RETURNING varchar array) + json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][4]' RETURNING varchar array) + json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_empty + a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[5]' RETURNING varchar array) + json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][5]' RETURNING varchar array) + json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_mixed + a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[6]' RETURNING varchar array) + json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][6]' RETURNING varchar array) + json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_nested + a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7]' RETURNING varchar array) + json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B1_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][7]' RETURNING varchar array) + json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_bool - a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[0]' RETURNING boolean array) - json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][0]' RETURNING boolean array) - json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_int - a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[1]' RETURNING bigint array) - json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][1]' RETURNING bigint array) - json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_float - a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[2]' RETURNING decimal array) - json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][2]' RETURNING decimal array) - json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_str - a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[3]' RETURNING varchar array) - json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][3]' RETURNING varchar array) - json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_null - a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[4]' RETURNING varchar array) - json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][4]' RETURNING varchar array) - json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_empty - a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[5]' RETURNING varchar array) - json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][5]' RETURNING varchar array) - json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_mixed - a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[6]' RETURNING varchar array) - json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][6]' RETURNING varchar array) - json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_nested - a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7]' RETURNING varchar array) - json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B2_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][7]' RETURNING varchar array) - json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_bool * a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[0]' RETURNING boolean array) * json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][0]' RETURNING boolean array) * json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_int * a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[1]' RETURNING bigint array) * json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][1]' RETURNING bigint array) * json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_float * a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[2]' RETURNING decimal array) * json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][2]' RETURNING decimal array) * json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_str * a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[3]' RETURNING varchar array) * json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][3]' RETURNING varchar array) * json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_null * a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[4]' RETURNING varchar array) * json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][4]' RETURNING varchar array) * json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_empty * a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[5]' RETURNING varchar array) * json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][5]' RETURNING varchar array) * json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_mixed * a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[6]' RETURNING varchar array) * json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][6]' RETURNING varchar array) * json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_nested * a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7]' RETURNING varchar array) * json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B3_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][7]' RETURNING varchar array) * json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_bool / a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[0]' RETURNING boolean array) / json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][0]' RETURNING boolean array) / json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_int / a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[1]' RETURNING bigint array) / json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][1]' RETURNING bigint array) / json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_float / a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[2]' RETURNING decimal array) / json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][2]' RETURNING decimal array) / json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_str / a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[3]' RETURNING varchar array) / json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][3]' RETURNING varchar array) / json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_null / a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[4]' RETURNING varchar array) / json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][4]' RETURNING varchar array) / json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_empty / a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[5]' RETURNING varchar array) / json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][5]' RETURNING varchar array) / json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_mixed / a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[6]' RETURNING varchar array) / json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][6]' RETURNING varchar array) / json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (a_nested / a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7]' RETURNING varchar array) / json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_ops TEST_ID: A1_B4_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (json_value(a_nested, '$[7][7]' RETURNING varchar array) / json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B1_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT pi AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B2_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT abs(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B3_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B4_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT exp(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B5_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B6_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ln(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B7_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT log10(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(a_bool, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(a_int, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(a_float, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(a_str, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(a_null, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(a_empty, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(a_mixed, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B8_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT power(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B9_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B10_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B11_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B12_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT round(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(a_bool, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(a_int, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(a_float, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(a_str, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(a_null, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(a_empty, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(a_mixed, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B13_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mod(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B14_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sin(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B15_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cos(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B16_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT tan(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B17_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cot(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B18_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT asin(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B19_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT acos(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B20_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(a_bool, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(a_int, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(a_float, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(a_str, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(a_null, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(a_empty, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(a_mixed, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B21_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B22_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B23_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT radians(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(a_bool, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(a_int, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(a_float, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(a_str, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(a_null, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(a_empty, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(a_mixed, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B24_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B25_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B26_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B27_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_long_bits_to_double(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(a_bool, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(a_int, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(a_float, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(a_str, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(a_null, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(a_empty, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(a_mixed, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B28_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(a_bool, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(a_int, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(a_float, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(a_str, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(a_null, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(a_empty, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(a_mixed, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B29_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(a_bool, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(a_int, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(a_float, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(a_str, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(a_null, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(a_empty, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(a_mixed, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B30_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(a_bool, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(a_int, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(a_float, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(a_str, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(a_null, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(a_empty, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(a_mixed, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B31_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(a_bool, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(a_int, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(a_float, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(a_str, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(a_null, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(a_empty, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(a_mixed, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B33_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(a_bool, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(a_int, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(a_float, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(a_str, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(a_null, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(a_empty, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(a_mixed, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B34_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(a_bool, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(a_int, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(a_float, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(a_str, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(a_null, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(a_empty, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(a_mixed, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B35_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(a_bool, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(a_int, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(a_float, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(a_str, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(a_null, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(a_empty, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(a_mixed, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A1_B36_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(a_bool, 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(json_value(a_nested, '$[0]' RETURNING boolean array), 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(json_value(a_nested, '$[7][0]' RETURNING boolean array), 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(a_int, 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(json_value(a_nested, '$[1]' RETURNING bigint array), 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(json_value(a_nested, '$[7][1]' RETURNING bigint array), 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(a_float, 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(json_value(a_nested, '$[2]' RETURNING decimal array), 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(json_value(a_nested, '$[7][2]' RETURNING decimal array), 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(a_str, 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(json_value(a_nested, '$[3]' RETURNING varchar array), 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(json_value(a_nested, '$[7][3]' RETURNING varchar array), 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(a_null, 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(json_value(a_nested, '$[4]' RETURNING varchar array), 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(json_value(a_nested, '$[7][4]' RETURNING varchar array), 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(a_empty, 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(json_value(a_nested, '$[5]' RETURNING varchar array), 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(json_value(a_nested, '$[7][5]' RETURNING varchar array), 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(a_mixed, 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(json_value(a_nested, '$[6]' RETURNING varchar array), 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(json_value(a_nested, '$[7][6]' RETURNING varchar array), 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(a_nested, 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(json_value(a_nested, '$[7]' RETURNING varchar array), 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B1_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT concat(json_value(a_nested, '$[7][7]' RETURNING varchar array), 'A') AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(a_bool, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(json_value(a_nested, '$[0]' RETURNING boolean array), 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(json_value(a_nested, '$[7][0]' RETURNING boolean array), 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(a_int, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(json_value(a_nested, '$[1]' RETURNING bigint array), 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(json_value(a_nested, '$[7][1]' RETURNING bigint array), 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(a_float, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(json_value(a_nested, '$[2]' RETURNING decimal array), 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(json_value(a_nested, '$[7][2]' RETURNING decimal array), 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(a_str, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(json_value(a_nested, '$[3]' RETURNING varchar array), 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(json_value(a_nested, '$[7][3]' RETURNING varchar array), 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(a_null, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(json_value(a_nested, '$[4]' RETURNING varchar array), 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(json_value(a_nested, '$[7][4]' RETURNING varchar array), 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(a_empty, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(json_value(a_nested, '$[5]' RETURNING varchar array), 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(json_value(a_nested, '$[7][5]' RETURNING varchar array), 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(a_mixed, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(json_value(a_nested, '$[6]' RETURNING varchar array), 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(json_value(a_nested, '$[7][6]' RETURNING varchar array), 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(a_nested, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(json_value(a_nested, '$[7]' RETURNING varchar array), 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B2_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(json_value(a_nested, '$[7][7]' RETURNING varchar array), 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', a_bool) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', a_int) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', a_float) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', a_str) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', a_null) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', a_empty) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', a_mixed) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C22_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', a_nested) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B3_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT string_format('%sZ', json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B4_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT length(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B5_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B6_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B7_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B8_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lower(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B9_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT upper(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B10_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN a_bool) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN a_int) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN a_float) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN a_str) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN a_null) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN a_empty) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN a_mixed) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN a_nested) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B11_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT position('ABCD' IN json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(a_bool, '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(json_value(a_nested, '$[0]' RETURNING boolean array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(json_value(a_nested, '$[7][0]' RETURNING boolean array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(a_int, '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(json_value(a_nested, '$[1]' RETURNING bigint array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(json_value(a_nested, '$[7][1]' RETURNING bigint array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(a_float, '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(json_value(a_nested, '$[2]' RETURNING decimal array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(json_value(a_nested, '$[7][2]' RETURNING decimal array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(a_str, '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(json_value(a_nested, '$[3]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(json_value(a_nested, '$[7][3]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(a_null, '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(json_value(a_nested, '$[4]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(json_value(a_nested, '$[7][4]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(a_empty, '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(json_value(a_nested, '$[5]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(json_value(a_nested, '$[7][5]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(a_mixed, '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(json_value(a_nested, '$[6]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(json_value(a_nested, '$[7][6]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(a_nested, '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(json_value(a_nested, '$[7]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B12_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(json_value(a_nested, '$[7][7]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(a_bool, '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(json_value(a_nested, '$[0]' RETURNING boolean array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(json_value(a_nested, '$[7][0]' RETURNING boolean array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(a_int, '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(json_value(a_nested, '$[1]' RETURNING bigint array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(json_value(a_nested, '$[7][1]' RETURNING bigint array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(a_float, '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(json_value(a_nested, '$[2]' RETURNING decimal array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(json_value(a_nested, '$[7][2]' RETURNING decimal array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(a_str, '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(json_value(a_nested, '$[3]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(json_value(a_nested, '$[7][3]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(a_null, '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(json_value(a_nested, '$[4]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(json_value(a_nested, '$[7][4]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(a_empty, '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(json_value(a_nested, '$[5]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(json_value(a_nested, '$[7][5]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(a_mixed, '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(json_value(a_nested, '$[6]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(json_value(a_nested, '$[7][6]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(a_nested, '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(json_value(a_nested, '$[7]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B13_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(json_value(a_nested, '$[7][7]' RETURNING varchar array), '.*') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(a_bool, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(json_value(a_nested, '$[0]' RETURNING boolean array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(json_value(a_nested, '$[7][0]' RETURNING boolean array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(a_int, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(json_value(a_nested, '$[1]' RETURNING bigint array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(json_value(a_nested, '$[7][1]' RETURNING bigint array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(a_float, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(json_value(a_nested, '$[2]' RETURNING decimal array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(json_value(a_nested, '$[7][2]' RETURNING decimal array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(a_str, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(json_value(a_nested, '$[3]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(json_value(a_nested, '$[7][3]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(a_null, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(json_value(a_nested, '$[4]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(json_value(a_nested, '$[7][4]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(a_empty, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(json_value(a_nested, '$[5]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(json_value(a_nested, '$[7][5]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(a_mixed, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(json_value(a_nested, '$[6]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(json_value(a_nested, '$[7][6]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(a_nested, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(json_value(a_nested, '$[7]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B14_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(json_value(a_nested, '$[7][7]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(a_bool, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(json_value(a_nested, '$[0]' RETURNING boolean array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(json_value(a_nested, '$[7][0]' RETURNING boolean array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(a_int, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(json_value(a_nested, '$[1]' RETURNING bigint array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(json_value(a_nested, '$[7][1]' RETURNING bigint array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(a_float, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(json_value(a_nested, '$[2]' RETURNING decimal array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(json_value(a_nested, '$[7][2]' RETURNING decimal array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(a_str, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(json_value(a_nested, '$[3]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(json_value(a_nested, '$[7][3]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(a_null, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(json_value(a_nested, '$[4]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(json_value(a_nested, '$[7][4]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(a_empty, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(json_value(a_nested, '$[5]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(json_value(a_nested, '$[7][5]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(a_mixed, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(json_value(a_nested, '$[6]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(json_value(a_nested, '$[7][6]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(a_nested, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(json_value(a_nested, '$[7]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B15_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(json_value(a_nested, '$[7][7]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(a_bool, 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(json_value(a_nested, '$[0]' RETURNING boolean array), 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(json_value(a_nested, '$[7][0]' RETURNING boolean array), 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(a_int, 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(json_value(a_nested, '$[1]' RETURNING bigint array), 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(json_value(a_nested, '$[7][1]' RETURNING bigint array), 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(a_float, 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(json_value(a_nested, '$[2]' RETURNING decimal array), 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(json_value(a_nested, '$[7][2]' RETURNING decimal array), 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(a_str, 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(json_value(a_nested, '$[3]' RETURNING varchar array), 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(json_value(a_nested, '$[7][3]' RETURNING varchar array), 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(a_null, 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(json_value(a_nested, '$[4]' RETURNING varchar array), 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(json_value(a_nested, '$[7][4]' RETURNING varchar array), 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(a_empty, 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(json_value(a_nested, '$[5]' RETURNING varchar array), 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(json_value(a_nested, '$[7][5]' RETURNING varchar array), 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(a_mixed, 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(json_value(a_nested, '$[6]' RETURNING varchar array), 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(json_value(a_nested, '$[7][6]' RETURNING varchar array), 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(a_nested, 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(json_value(a_nested, '$[7]' RETURNING varchar array), 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B16_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT replace(json_value(a_nested, '$[7][7]' RETURNING varchar array), 'A', 'B') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(a_bool, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(json_value(a_nested, '$[0]' RETURNING boolean array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(json_value(a_nested, '$[7][0]' RETURNING boolean array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(a_int, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(json_value(a_nested, '$[1]' RETURNING bigint array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(json_value(a_nested, '$[7][1]' RETURNING bigint array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(a_float, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(json_value(a_nested, '$[2]' RETURNING decimal array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(json_value(a_nested, '$[7][2]' RETURNING decimal array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(a_str, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(json_value(a_nested, '$[3]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(json_value(a_nested, '$[7][3]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(a_null, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(json_value(a_nested, '$[4]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(json_value(a_nested, '$[7][4]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(a_empty, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(json_value(a_nested, '$[5]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(json_value(a_nested, '$[7][5]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(a_mixed, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(json_value(a_nested, '$[6]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(json_value(a_nested, '$[7][6]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(a_nested, 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(json_value(a_nested, '$[7]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B17_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(json_value(a_nested, '$[7][7]' RETURNING varchar array), 'ABCD') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(a_bool, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(a_int, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(a_float, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(a_str, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(a_null, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(a_empty, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(a_mixed, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B18_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substring(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(a_bool, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(a_int, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(a_float, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(a_str, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(a_null, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(a_empty, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(a_mixed, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B19_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT right(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(a_bool, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(a_int, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(a_float, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(a_str, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(a_null, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(a_empty, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(a_mixed, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B20_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT left(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(a_bool, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(a_int, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(a_float, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(a_str, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(a_null, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(a_empty, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(a_mixed, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B21_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT substr(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B22_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT trim(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B23_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B24_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B25_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B26_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(a_bool, 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(json_value(a_nested, '$[0]' RETURNING boolean array), 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(json_value(a_nested, '$[7][0]' RETURNING boolean array), 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(a_int, 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(json_value(a_nested, '$[1]' RETURNING bigint array), 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(json_value(a_nested, '$[7][1]' RETURNING bigint array), 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(a_float, 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(json_value(a_nested, '$[2]' RETURNING decimal array), 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(json_value(a_nested, '$[7][2]' RETURNING decimal array), 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(a_str, 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(json_value(a_nested, '$[3]' RETURNING varchar array), 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(json_value(a_nested, '$[7][3]' RETURNING varchar array), 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(a_null, 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(json_value(a_nested, '$[4]' RETURNING varchar array), 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(json_value(a_nested, '$[7][4]' RETURNING varchar array), 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(a_empty, 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(json_value(a_nested, '$[5]' RETURNING varchar array), 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(json_value(a_nested, '$[7][5]' RETURNING varchar array), 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(a_mixed, 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(json_value(a_nested, '$[6]' RETURNING varchar array), 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(json_value(a_nested, '$[7][6]' RETURNING varchar array), 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(a_nested, 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(json_value(a_nested, '$[7]' RETURNING varchar array), 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B27_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(json_value(a_nested, '$[7][7]' RETURNING varchar array), 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(a_bool, 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(json_value(a_nested, '$[0]' RETURNING boolean array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(json_value(a_nested, '$[7][0]' RETURNING boolean array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(a_int, 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(json_value(a_nested, '$[1]' RETURNING bigint array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(json_value(a_nested, '$[7][1]' RETURNING bigint array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(a_float, 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(json_value(a_nested, '$[2]' RETURNING decimal array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(json_value(a_nested, '$[7][2]' RETURNING decimal array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(a_str, 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(json_value(a_nested, '$[3]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(json_value(a_nested, '$[7][3]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(a_null, 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(json_value(a_nested, '$[4]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(json_value(a_nested, '$[7][4]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(a_empty, 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(json_value(a_nested, '$[5]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(json_value(a_nested, '$[7][5]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(a_mixed, 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(json_value(a_nested, '$[6]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(json_value(a_nested, '$[7][6]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(a_nested, 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(json_value(a_nested, '$[7]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B28_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(json_value(a_nested, '$[7][7]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(a_bool, 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(json_value(a_nested, '$[0]' RETURNING boolean array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(json_value(a_nested, '$[7][0]' RETURNING boolean array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(a_int, 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(json_value(a_nested, '$[1]' RETURNING bigint array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(json_value(a_nested, '$[7][1]' RETURNING bigint array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(a_float, 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(json_value(a_nested, '$[2]' RETURNING decimal array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(json_value(a_nested, '$[7][2]' RETURNING decimal array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(a_str, 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(json_value(a_nested, '$[3]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(json_value(a_nested, '$[7][3]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(a_null, 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(json_value(a_nested, '$[4]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(json_value(a_nested, '$[7][4]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(a_empty, 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(json_value(a_nested, '$[5]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(json_value(a_nested, '$[7][5]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(a_mixed, 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(json_value(a_nested, '$[6]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(json_value(a_nested, '$[7][6]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(a_nested, 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(json_value(a_nested, '$[7]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A2_B29_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(json_value(a_nested, '$[7][7]' RETURNING varchar array), 2, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B1_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT CURRENT_TIMESTAMP AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B2_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT CURRENT_DATE AS col
   FROM test_array);
+--------+
| EXPR$0 |
+--------+
|      4 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B3_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(a_bool, 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(json_value(a_nested, '$[0]' RETURNING boolean array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(json_value(a_nested, '$[7][0]' RETURNING boolean array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(a_int, 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(json_value(a_nested, '$[1]' RETURNING bigint array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(json_value(a_nested, '$[7][1]' RETURNING bigint array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(a_float, 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(json_value(a_nested, '$[2]' RETURNING decimal array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(json_value(a_nested, '$[7][2]' RETURNING decimal array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(a_str, 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(json_value(a_nested, '$[3]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(json_value(a_nested, '$[7][3]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(a_null, 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(json_value(a_nested, '$[4]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(json_value(a_nested, '$[7][4]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(a_empty, 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(json_value(a_nested, '$[5]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(json_value(a_nested, '$[7][5]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(a_mixed, 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(json_value(a_nested, '$[6]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(json_value(a_nested, '$[7][6]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(a_nested, 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(json_value(a_nested, '$[7]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B4_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(json_value(a_nested, '$[7][7]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(a_bool, 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(json_value(a_nested, '$[0]' RETURNING boolean array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(json_value(a_nested, '$[7][0]' RETURNING boolean array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(a_int, 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(json_value(a_nested, '$[1]' RETURNING bigint array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(json_value(a_nested, '$[7][1]' RETURNING bigint array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(a_float, 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(json_value(a_nested, '$[2]' RETURNING decimal array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(json_value(a_nested, '$[7][2]' RETURNING decimal array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(a_str, 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(json_value(a_nested, '$[3]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(json_value(a_nested, '$[7][3]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(a_null, 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(json_value(a_nested, '$[4]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(json_value(a_nested, '$[7][4]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(a_empty, 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(json_value(a_nested, '$[5]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(json_value(a_nested, '$[7][5]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(a_mixed, 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(json_value(a_nested, '$[6]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(json_value(a_nested, '$[7][6]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(a_nested, 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(json_value(a_nested, '$[7]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B5_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(json_value(a_nested, '$[7][7]' RETURNING varchar array), 'P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(a_bool, 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(json_value(a_nested, '$[0]' RETURNING boolean array), 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(json_value(a_nested, '$[7][0]' RETURNING boolean array), 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(a_int, 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(json_value(a_nested, '$[1]' RETURNING bigint array), 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(json_value(a_nested, '$[7][1]' RETURNING bigint array), 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(a_float, 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(json_value(a_nested, '$[2]' RETURNING decimal array), 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(json_value(a_nested, '$[7][2]' RETURNING decimal array), 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(a_str, 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(json_value(a_nested, '$[3]' RETURNING varchar array), 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(json_value(a_nested, '$[7][3]' RETURNING varchar array), 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(a_null, 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(json_value(a_nested, '$[4]' RETURNING varchar array), 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(json_value(a_nested, '$[7][4]' RETURNING varchar array), 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(a_empty, 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(json_value(a_nested, '$[5]' RETURNING varchar array), 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(json_value(a_nested, '$[7][5]' RETURNING varchar array), 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(a_mixed, 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(json_value(a_nested, '$[6]' RETURNING varchar array), 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(json_value(a_nested, '$[7][6]' RETURNING varchar array), 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(a_nested, 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(json_value(a_nested, '$[7]' RETURNING varchar array), 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B6_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(json_value(a_nested, '$[7][7]' RETURNING varchar array), 'P1D', 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(a_bool, 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(json_value(a_nested, '$[0]' RETURNING boolean array), 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(json_value(a_nested, '$[7][0]' RETURNING boolean array), 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(a_int, 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(json_value(a_nested, '$[1]' RETURNING bigint array), 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(json_value(a_nested, '$[7][1]' RETURNING bigint array), 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(a_float, 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(json_value(a_nested, '$[2]' RETURNING decimal array), 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(json_value(a_nested, '$[7][2]' RETURNING decimal array), 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(a_str, 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(json_value(a_nested, '$[3]' RETURNING varchar array), 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(json_value(a_nested, '$[7][3]' RETURNING varchar array), 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(a_null, 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(json_value(a_nested, '$[4]' RETURNING varchar array), 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(json_value(a_nested, '$[7][4]' RETURNING varchar array), 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(a_empty, 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(json_value(a_nested, '$[5]' RETURNING varchar array), 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(json_value(a_nested, '$[7][5]' RETURNING varchar array), 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(a_mixed, 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(json_value(a_nested, '$[6]' RETURNING varchar array), 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(json_value(a_nested, '$[7][6]' RETURNING varchar array), 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(a_nested, 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(json_value(a_nested, '$[7]' RETURNING varchar array), 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B7_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(json_value(a_nested, '$[7][7]' RETURNING varchar array), 'HOUR') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B8_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(a_bool, '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(json_value(a_nested, '$[0]' RETURNING boolean array), '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(json_value(a_nested, '$[7][0]' RETURNING boolean array), '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(a_int, '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(json_value(a_nested, '$[1]' RETURNING bigint array), '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(json_value(a_nested, '$[7][1]' RETURNING bigint array), '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(a_float, '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(json_value(a_nested, '$[2]' RETURNING decimal array), '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(json_value(a_nested, '$[7][2]' RETURNING decimal array), '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(a_str, '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(json_value(a_nested, '$[3]' RETURNING varchar array), '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(json_value(a_nested, '$[7][3]' RETURNING varchar array), '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(a_null, '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(json_value(a_nested, '$[4]' RETURNING varchar array), '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(json_value(a_nested, '$[7][4]' RETURNING varchar array), '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(a_empty, '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(json_value(a_nested, '$[5]' RETURNING varchar array), '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(json_value(a_nested, '$[7][5]' RETURNING varchar array), '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(a_mixed, '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(json_value(a_nested, '$[6]' RETURNING varchar array), '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(json_value(a_nested, '$[7][6]' RETURNING varchar array), '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(a_nested, '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(json_value(a_nested, '$[7]' RETURNING varchar array), '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B9_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(json_value(a_nested, '$[7][7]' RETURNING varchar array), '2001-01-01/P1D') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B10_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B11_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B12_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(a_bool TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[0]' RETURNING boolean array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[7][0]' RETURNING boolean array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(a_int TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[1]' RETURNING bigint array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[7][1]' RETURNING bigint array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(a_float TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[2]' RETURNING decimal array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[7][2]' RETURNING decimal array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(a_str TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[3]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[7][3]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(a_null TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[4]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[7][4]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(a_empty TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[5]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[7][5]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(a_mixed TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[6]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[7][6]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(a_nested TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[7]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B13_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(json_value(a_nested, '$[7][7]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(a_bool TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[0]' RETURNING boolean array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[7][0]' RETURNING boolean array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(a_int TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[1]' RETURNING bigint array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[7][1]' RETURNING bigint array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(a_float TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[2]' RETURNING decimal array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[7][2]' RETURNING decimal array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(a_str TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[3]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[7][3]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(a_null TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[4]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[7][4]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(a_empty TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[5]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[7][5]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(a_mixed TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[6]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[7][6]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(a_nested TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[7]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B14_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(json_value(a_nested, '$[7][7]' RETURNING varchar array) TO DAY) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B15_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A3_B16_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, CURRENT_TIMESTAMP, json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(a_bool, a_bool) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(json_value(a_nested, '$[0]' RETURNING boolean array), json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(json_value(a_nested, '$[7][0]' RETURNING boolean array), json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(a_int, a_int) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(json_value(a_nested, '$[1]' RETURNING bigint array), json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(json_value(a_nested, '$[7][1]' RETURNING bigint array), json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(a_float, a_float) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(json_value(a_nested, '$[2]' RETURNING decimal array), json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(json_value(a_nested, '$[7][2]' RETURNING decimal array), json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(a_str, a_str) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(json_value(a_nested, '$[3]' RETURNING varchar array), json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(json_value(a_nested, '$[7][3]' RETURNING varchar array), json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(a_null, a_null) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(json_value(a_nested, '$[4]' RETURNING varchar array), json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(json_value(a_nested, '$[7][4]' RETURNING varchar array), json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(a_empty, a_empty) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(json_value(a_nested, '$[5]' RETURNING varchar array), json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(json_value(a_nested, '$[7][5]' RETURNING varchar array), json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(a_mixed, a_mixed) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(json_value(a_nested, '$[6]' RETURNING varchar array), json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(json_value(a_nested, '$[7][6]' RETURNING varchar array), json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(a_nested, a_nested) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(json_value(a_nested, '$[7]' RETURNING varchar array), json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B1_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(json_value(a_nested, '$[7][7]' RETURNING varchar array), json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(a_bool, a_bool) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(json_value(a_nested, '$[0]' RETURNING boolean array), json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(json_value(a_nested, '$[7][0]' RETURNING boolean array), json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(a_int, a_int) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(json_value(a_nested, '$[1]' RETURNING bigint array), json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(json_value(a_nested, '$[7][1]' RETURNING bigint array), json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(a_float, a_float) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(json_value(a_nested, '$[2]' RETURNING decimal array), json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(json_value(a_nested, '$[7][2]' RETURNING decimal array), json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(a_str, a_str) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(json_value(a_nested, '$[3]' RETURNING varchar array), json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(json_value(a_nested, '$[7][3]' RETURNING varchar array), json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(a_null, a_null) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(json_value(a_nested, '$[4]' RETURNING varchar array), json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(json_value(a_nested, '$[7][4]' RETURNING varchar array), json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(a_empty, a_empty) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(json_value(a_nested, '$[5]' RETURNING varchar array), json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(json_value(a_nested, '$[7][5]' RETURNING varchar array), json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(a_mixed, a_mixed) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(json_value(a_nested, '$[6]' RETURNING varchar array), json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(json_value(a_nested, '$[7][6]' RETURNING varchar array), json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(a_nested, a_nested) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(json_value(a_nested, '$[7]' RETURNING varchar array), json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A4_B2_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT least(json_value(a_nested, '$[7][7]' RETURNING varchar array), json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(a_bool, '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(json_value(a_nested, '$[0]' RETURNING boolean array), '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(json_value(a_nested, '$[7][0]' RETURNING boolean array), '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(a_int, '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(json_value(a_nested, '$[1]' RETURNING bigint array), '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(json_value(a_nested, '$[7][1]' RETURNING bigint array), '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(a_float, '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(json_value(a_nested, '$[2]' RETURNING decimal array), '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(json_value(a_nested, '$[7][2]' RETURNING decimal array), '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(a_str, '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(json_value(a_nested, '$[3]' RETURNING varchar array), '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(json_value(a_nested, '$[7][3]' RETURNING varchar array), '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(a_null, '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(json_value(a_nested, '$[4]' RETURNING varchar array), '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(json_value(a_nested, '$[7][4]' RETURNING varchar array), '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(a_empty, '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(json_value(a_nested, '$[5]' RETURNING varchar array), '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(json_value(a_nested, '$[7][5]' RETURNING varchar array), '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(a_mixed, '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(json_value(a_nested, '$[6]' RETURNING varchar array), '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(json_value(a_nested, '$[7][6]' RETURNING varchar array), '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(a_nested, '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(json_value(a_nested, '$[7]' RETURNING varchar array), '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B1_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_match(json_value(a_nested, '$[7][7]' RETURNING varchar array), '255.0.0.0/1') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B2_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_parse(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(a_bool) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(a_int) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(a_float) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(a_str) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(a_null) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(a_empty) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(a_mixed) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A5_B3_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ipv4_stringify(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(a_bool AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(json_value(a_nested, '$[0]' RETURNING boolean array) AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(json_value(a_nested, '$[7][0]' RETURNING boolean array) AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(a_int AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(json_value(a_nested, '$[1]' RETURNING bigint array) AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(json_value(a_nested, '$[7][1]' RETURNING bigint array) AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(a_float AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(json_value(a_nested, '$[2]' RETURNING decimal array) AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(json_value(a_nested, '$[7][2]' RETURNING decimal array) AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(a_str AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(json_value(a_nested, '$[3]' RETURNING varchar array) AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(json_value(a_nested, '$[7][3]' RETURNING varchar array) AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(a_null AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(json_value(a_nested, '$[4]' RETURNING varchar array) AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(json_value(a_nested, '$[7][4]' RETURNING varchar array) AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(a_empty AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(json_value(a_nested, '$[5]' RETURNING varchar array) AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(json_value(a_nested, '$[7][5]' RETURNING varchar array) AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(a_mixed AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(json_value(a_nested, '$[6]' RETURNING varchar array) AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(json_value(a_nested, '$[7][6]' RETURNING varchar array) AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(a_nested AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(json_value(a_nested, '$[7]' RETURNING varchar array) AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B1_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT cast(json_value(a_nested, '$[7][7]' RETURNING varchar array) AS varchar) AS col
FROM test_array;
cannot convert
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE a_bool
            WHEN ARRAY[1,
                       0,
                       NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE json_value(a_nested, '$[0]' RETURNING boolean array)
            WHEN ARRAY[1,
                       0,
                       NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE json_value(a_nested, '$[7][0]' RETURNING boolean array)
            WHEN ARRAY[1,
                       0,
                       NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE a_int
            WHEN ARRAY[1,
                       2,
                       NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE json_value(a_nested, '$[1]' RETURNING bigint array)
            WHEN ARRAY[1,
                       2,
                       NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE json_value(a_nested, '$[7][1]' RETURNING bigint array)
            WHEN ARRAY[1,
                       2,
                       NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE a_float
            WHEN ARRAY[0.1,
                       0.2,
                       NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE json_value(a_nested, '$[2]' RETURNING decimal array)
            WHEN ARRAY[0.1,
                       0.2,
                       NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE json_value(a_nested, '$[7][2]' RETURNING decimal array)
            WHEN ARRAY[0.1,
                       0.2,
                       NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE a_str
            WHEN ARRAY['S1',
                       'S2',
                       NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE json_value(a_nested, '$[3]' RETURNING varchar array)
            WHEN ARRAY['S1',
                       'S2',
                       NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE json_value(a_nested, '$[7][3]' RETURNING varchar array)
            WHEN ARRAY['S1',
                       'S2',
                       NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE a_null
            WHEN ARRAY[NULL,
                       NULL,
                       NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE json_value(a_nested, '$[4]' RETURNING varchar array)
            WHEN ARRAY[NULL,
                       NULL,
                       NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE json_value(a_nested, '$[7][4]' RETURNING varchar array)
            WHEN ARRAY[NULL,
                       NULL,
                       NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE a_empty
            WHEN ARRAY['FILLER'] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE json_value(a_nested, '$[5]' RETURNING varchar array)
            WHEN ARRAY['FILLER'] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE json_value(a_nested, '$[7][5]' RETURNING varchar array)
            WHEN ARRAY['FILLER'] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE a_mixed
            WHEN ARRAY['true',
                       '1',
                       '0.1',
                       'S1',
                       NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE json_value(a_nested, '$[6]' RETURNING varchar array)
            WHEN ARRAY['true',
                       '1',
                       '0.1',
                       'S1',
                       NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE json_value(a_nested, '$[7][6]' RETURNING varchar array)
            WHEN ARRAY['true',
                       '1',
                       '0.1',
                       'S1',
                       NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE a_nested
            WHEN ARRAY['FILLER'] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE json_value(a_nested, '$[7]' RETURNING varchar array)
            WHEN ARRAY['FILLER'] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B2_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE json_value(a_nested, '$[7][7]' RETURNING varchar array)
            WHEN ARRAY['FILLER'] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN a_bool=ARRAY[1,
                              0,
                              NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN json_value(a_nested, '$[0]' RETURNING boolean array)=ARRAY[1,
                                                                            0,
                                                                            NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN json_value(a_nested, '$[7][0]' RETURNING boolean array)=ARRAY[1,
                                                                               0,
                                                                               NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN a_int=ARRAY[1,
                             2,
                             NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN json_value(a_nested, '$[1]' RETURNING bigint array)=ARRAY[1,
                                                                           2,
                                                                           NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN json_value(a_nested, '$[7][1]' RETURNING bigint array)=ARRAY[1,
                                                                              2,
                                                                              NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN a_float=ARRAY[0.1,
                               0.2,
                               NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN json_value(a_nested, '$[2]' RETURNING decimal array)=ARRAY[0.1,
                                                                            0.2,
                                                                            NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN json_value(a_nested, '$[7][2]' RETURNING decimal array)=ARRAY[0.1,
                                                                               0.2,
                                                                               NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN a_str=ARRAY['S1',
                             'S2',
                             NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN json_value(a_nested, '$[3]' RETURNING varchar array)=ARRAY['S1',
                                                                            'S2',
                                                                            NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN json_value(a_nested, '$[7][3]' RETURNING varchar array)=ARRAY['S1',
                                                                               'S2',
                                                                               NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN a_null=ARRAY[NULL,
                              NULL,
                              NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN json_value(a_nested, '$[4]' RETURNING varchar array)=ARRAY[NULL,
                                                                            NULL,
                                                                            NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN json_value(a_nested, '$[7][4]' RETURNING varchar array)=ARRAY[NULL,
                                                                               NULL,
                                                                               NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN a_empty=ARRAY['FILLER'] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN json_value(a_nested, '$[5]' RETURNING varchar array)=ARRAY['FILLER'] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN json_value(a_nested, '$[7][5]' RETURNING varchar array)=ARRAY['FILLER'] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN a_mixed=ARRAY['true',
                               '1',
                               '0.1',
                               'S1',
                               NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN json_value(a_nested, '$[6]' RETURNING varchar array)=ARRAY['true',
                                                                            '1',
                                                                            '0.1',
                                                                            'S1',
                                                                            NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN json_value(a_nested, '$[7][6]' RETURNING varchar array)=ARRAY['true',
                                                                               '1',
                                                                               '0.1',
                                                                               'S1',
                                                                               NULL] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN a_nested=ARRAY['FILLER'] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN json_value(a_nested, '$[7]' RETURNING varchar array)=ARRAY['FILLER'] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B3_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN json_value(a_nested, '$[7][7]' RETURNING varchar array)=ARRAY['FILLER'] THEN 1
            ELSE 2
        END) AS col
FROM test_array;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(a_bool, ARRAY[1, 0, NULL]) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [null, 0, 1] |
| [null, 0, 1] |
|              |
|              |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(a_int, ARRAY[1, 2, NULL]) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [null, 2, 1] |
| [null, 2, 1] |
|              |
|              |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(json_value(a_nested, '$[1]' RETURNING bigint array), ARRAY[1, 2, NULL]) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [null, 2, 1] |
| [null, 2, 1] |
|              |
|              |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(json_value(a_nested, '$[7][1]' RETURNING bigint array), ARRAY[1, 2, NULL]) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [null, 2, 1] |
| [null, 2, 1] |
|              |
|              |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(a_float, ARRAY[0.1, 0.2, NULL]) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| [null, 0.2, 0.1] |
| [null, 0.2, 0.1] |
|                  |
|                  |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(json_value(a_nested, '$[2]' RETURNING decimal array), ARRAY[0.1, 0.2, NULL]) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| [null, 0.2, 0.1] |
| [null, 0.2, 0.1] |
|                  |
|                  |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(json_value(a_nested, '$[7][2]' RETURNING decimal array), ARRAY[0.1, 0.2, NULL]) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| [null, 0.2, 0.1] |
| [null, 0.2, 0.1] |
|                  |
|                  |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(a_str, ARRAY['S1', 'S2', NULL]) AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| [null, S2, S1] |
| [null, S2, S1] |
|                |
|                |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(json_value(a_nested, '$[3]' RETURNING varchar array), ARRAY['S1', 'S2', NULL]) AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| [null, S2, S1] |
| [null, S2, S1] |
|                |
|                |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(json_value(a_nested, '$[7][3]' RETURNING varchar array), ARRAY['S1', 'S2', NULL]) AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| [null, S2, S1] |
| [null, S2, S1] |
|                |
|                |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(a_null, ARRAY[NULL, NULL, NULL]) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(json_value(a_nested, '$[4]' RETURNING varchar array), ARRAY[NULL, NULL, NULL]) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(json_value(a_nested, '$[7][4]' RETURNING varchar array), ARRAY[NULL, NULL, NULL]) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(a_empty, ARRAY['FILLER']) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(json_value(a_nested, '$[5]' RETURNING varchar array), ARRAY['FILLER']) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(json_value(a_nested, '$[7][5]' RETURNING varchar array), ARRAY['FILLER']) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(a_mixed, ARRAY['true', '1', '0.1', 'S1', NULL]) AS col
FROM test_array;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [null, S1, 0.1, 1, true] |
|                          |
|                          |
+--------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(json_value(a_nested, '$[6]' RETURNING varchar array), ARRAY['true', '1', '0.1', 'S1', NULL]) AS col
FROM test_array;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [null, S1, 0.1, 1, true] |
|                          |
|                          |
+--------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(json_value(a_nested, '$[7][6]' RETURNING varchar array), ARRAY['true', '1', '0.1', 'S1', NULL]) AS col
FROM test_array;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [null, S1, 0.1, 1, true] |
|                          |
|                          |
+--------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(a_nested, ARRAY['FILLER']) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(json_value(a_nested, '$[7]' RETURNING varchar array), ARRAY['FILLER']) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B4_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(json_value(a_nested, '$[7][7]' RETURNING varchar array), ARRAY['FILLER']) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(a_bool, ARRAY[1, 0, NULL]) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [1, 0, null] |
| [null, 0, 1] |
| [null, 0, 1] |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(json_value(a_nested, '$[0]' RETURNING boolean array), ARRAY[1, 0, NULL]) AS col
FROM test_array;
Illegal
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(json_value(a_nested, '$[7][0]' RETURNING boolean array), ARRAY[1, 0, NULL]) AS col
FROM test_array;
Illegal
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(a_int, ARRAY[1, 2, NULL]) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [1, 2, null] |
| [null, 2, 1] |
| [null, 2, 1] |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(json_value(a_nested, '$[1]' RETURNING bigint array), ARRAY[1, 2, NULL]) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [1, 2, null] |
| [null, 2, 1] |
| [null, 2, 1] |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(json_value(a_nested, '$[7][1]' RETURNING bigint array), ARRAY[1, 2, NULL]) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [1, 2, null] |
| [null, 2, 1] |
| [null, 2, 1] |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(a_float, ARRAY[0.1, 0.2, NULL]) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
| [null, 0.2, 0.1] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(json_value(a_nested, '$[2]' RETURNING decimal array), ARRAY[0.1, 0.2, NULL]) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
| [null, 0.2, 0.1] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(json_value(a_nested, '$[7][2]' RETURNING decimal array), ARRAY[0.1, 0.2, NULL]) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
| [null, 0.2, 0.1] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(a_str, ARRAY['S1', 'S2', NULL]) AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [S1, S2, null] |
| [null, S2, S1] |
| [null, S2, S1] |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(json_value(a_nested, '$[3]' RETURNING varchar array), ARRAY['S1', 'S2', NULL]) AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [S1, S2, null] |
| [null, S2, S1] |
| [null, S2, S1] |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(json_value(a_nested, '$[7][3]' RETURNING varchar array), ARRAY['S1', 'S2', NULL]) AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [S1, S2, null] |
| [null, S2, S1] |
| [null, S2, S1] |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(a_null, ARRAY[NULL, NULL, NULL]) AS col
FROM test_array;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
| [null, null, null] |
| [null, null, null] |
| [null, null, null] |
+--------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(json_value(a_nested, '$[4]' RETURNING varchar array), ARRAY[NULL, NULL, NULL]) AS col
FROM test_array;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
| [null, null, null] |
| [null, null, null] |
| [null, null, null] |
+--------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(json_value(a_nested, '$[7][4]' RETURNING varchar array), ARRAY[NULL, NULL, NULL]) AS col
FROM test_array;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
| [null, null, null] |
| [null, null, null] |
| [null, null, null] |
+--------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(a_empty, ARRAY['FILLER']) AS col
FROM test_array;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(json_value(a_nested, '$[5]' RETURNING varchar array), ARRAY['FILLER']) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(json_value(a_nested, '$[7][5]' RETURNING varchar array), ARRAY['FILLER']) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(a_mixed, ARRAY['true', '1', '0.1', 'S1', NULL]) AS col
FROM test_array;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(json_value(a_nested, '$[6]' RETURNING varchar array), ARRAY['true', '1', '0.1', 'S1', NULL]) AS col
FROM test_array;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(json_value(a_nested, '$[7][6]' RETURNING varchar array), ARRAY['true', '1', '0.1', 'S1', NULL]) AS col
FROM test_array;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(a_nested, ARRAY['FILLER']) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(json_value(a_nested, '$[7]' RETURNING varchar array), ARRAY['FILLER']) AS col
FROM test_array;
+----------+
| col      |
+----------+
| [FILLER] |
| [FILLER] |
| [FILLER] |
| [FILLER] |
+----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B5_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(json_value(a_nested, '$[7][7]' RETURNING varchar array), ARRAY['FILLER']) AS col
FROM test_array;
+----------+
| col      |
+----------+
| [FILLER] |
| [FILLER] |
| [FILLER] |
| [FILLER] |
+----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(a_bool, ARRAY[1, 0, NULL]) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [1, 0, null] |
| [null, 0, 1] |
| [null, 0, 1] |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(json_value(a_nested, '$[0]' RETURNING boolean array), ARRAY[1, 0, NULL]) AS col
FROM test_array;
Illegal
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(json_value(a_nested, '$[7][0]' RETURNING boolean array), ARRAY[1, 0, NULL]) AS col
FROM test_array;
Illegal
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(a_int, ARRAY[1, 2, NULL]) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [1, 2, null] |
| [null, 2, 1] |
| [null, 2, 1] |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(json_value(a_nested, '$[1]' RETURNING bigint array), ARRAY[1, 2, NULL]) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [1, 2, null] |
| [null, 2, 1] |
| [null, 2, 1] |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(json_value(a_nested, '$[7][1]' RETURNING bigint array), ARRAY[1, 2, NULL]) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [1, 2, null] |
| [null, 2, 1] |
| [null, 2, 1] |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(a_float, ARRAY[0.1, 0.2, NULL]) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
| [null, 0.2, 0.1] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(json_value(a_nested, '$[2]' RETURNING decimal array), ARRAY[0.1, 0.2, NULL]) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
| [null, 0.2, 0.1] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(json_value(a_nested, '$[7][2]' RETURNING decimal array), ARRAY[0.1, 0.2, NULL]) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
| [null, 0.2, 0.1] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(a_str, ARRAY['S1', 'S2', NULL]) AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [S1, S2, null] |
| [null, S2, S1] |
| [null, S2, S1] |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(json_value(a_nested, '$[3]' RETURNING varchar array), ARRAY['S1', 'S2', NULL]) AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [S1, S2, null] |
| [null, S2, S1] |
| [null, S2, S1] |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(json_value(a_nested, '$[7][3]' RETURNING varchar array), ARRAY['S1', 'S2', NULL]) AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [S1, S2, null] |
| [null, S2, S1] |
| [null, S2, S1] |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(a_null, ARRAY[NULL, NULL, NULL]) AS col
FROM test_array;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
| [null, null, null] |
| [null, null, null] |
| [null, null, null] |
+--------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(json_value(a_nested, '$[4]' RETURNING varchar array), ARRAY[NULL, NULL, NULL]) AS col
FROM test_array;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
| [null, null, null] |
| [null, null, null] |
| [null, null, null] |
+--------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(json_value(a_nested, '$[7][4]' RETURNING varchar array), ARRAY[NULL, NULL, NULL]) AS col
FROM test_array;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
| [null, null, null] |
| [null, null, null] |
| [null, null, null] |
+--------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(a_empty, ARRAY['FILLER']) AS col
FROM test_array;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(json_value(a_nested, '$[5]' RETURNING varchar array), ARRAY['FILLER']) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(json_value(a_nested, '$[7][5]' RETURNING varchar array), ARRAY['FILLER']) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(a_mixed, ARRAY['true', '1', '0.1', 'S1', NULL]) AS col
FROM test_array;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(json_value(a_nested, '$[6]' RETURNING varchar array), ARRAY['true', '1', '0.1', 'S1', NULL]) AS col
FROM test_array;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(json_value(a_nested, '$[7][6]' RETURNING varchar array), ARRAY['true', '1', '0.1', 'S1', NULL]) AS col
FROM test_array;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(a_nested, ARRAY['FILLER']) AS col
FROM test_array;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(json_value(a_nested, '$[7]' RETURNING varchar array), ARRAY['FILLER']) AS col
FROM test_array;
+----------+
| col      |
+----------+
| [FILLER] |
| [FILLER] |
| [FILLER] |
| [FILLER] |
+----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_funcs TEST_ID: A9_B6_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(json_value(a_nested, '$[7][7]' RETURNING varchar array), ARRAY['FILLER']) AS col
FROM test_array;
+----------+
| col      |
+----------+
| [FILLER] |
| [FILLER] |
| [FILLER] |
| [FILLER] |
+----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING count(*) IS NOT NULL;
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING count(*) IS NOT NULL;
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING count(*) IS NOT NULL;
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING count(*) IS NOT NULL;
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+-----+
| col |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING count(*) IS NOT NULL;
+-----+
| col |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
+-----+
| col |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING count(*) IS NOT NULL;
+-----+
| col |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING count(*)IS NOT NULL;
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING count(*) IN (4);
+-----+
| col |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING count(DISTINCT json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING count(DISTINCT json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING count(DISTINCT json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING count(DISTINCT json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING count(DISTINCT json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING count(DISTINCT json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING count(DISTINCT json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING count(DISTINCT json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING sum(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING sum(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING sum(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING sum(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING sum(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING sum(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING sum(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING sum(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING min(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING min(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING min(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING min(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING min(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING min(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING min(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING min(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING max(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING max(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING max(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING max(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING max(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING max(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING max(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING max(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING avg(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING avg(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING avg(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING avg(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING avg(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING avg(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING avg(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING avg(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING approx_count_distinct(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING approx_count_distinct(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING approx_count_distinct(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING approx_count_distinct(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING approx_count_distinct(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING approx_count_distinct(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING approx_count_distinct(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING approx_count_distinct(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING approx_count_distinct_builtin(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING approx_count_distinct_builtin(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING approx_count_distinct_builtin(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING approx_count_distinct_builtin(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING approx_count_distinct_builtin(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING approx_count_distinct_builtin(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING approx_count_distinct_builtin(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING approx_count_distinct_builtin(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING earliest(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING earliest(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING earliest(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[0]' RETURNING boolean array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING earliest(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1000) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[1]' RETURNING bigint array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING earliest(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1000) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[2]' RETURNING decimal array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING earliest(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1000) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[3]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1000) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[4]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1000) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[5]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1000) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[6]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1000) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(a_nested, 1000) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1000) IS NOT NULL;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[0]' RETURNING boolean array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][0]' RETURNING boolean array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING earliest_by(json_value(a_nested, '$[7][0]' RETURNING boolean array), time_floor(__time, 'P1D')) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[1]' RETURNING bigint array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][1]' RETURNING bigint array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING earliest_by(json_value(a_nested, '$[7][1]' RETURNING bigint array), time_floor(__time, 'P1D')) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[2]' RETURNING decimal array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][2]' RETURNING decimal array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING earliest_by(json_value(a_nested, '$[7][2]' RETURNING decimal array), time_floor(__time, 'P1D')) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[3]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][3]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][3]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[4]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][4]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][4]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[5]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][5]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][5]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[6]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][6]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][6]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(a_nested, time_floor(__time, 'P1D')) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][7]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][7]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[0]' RETURNING boolean array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][0]' RETURNING boolean array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING earliest_by(json_value(a_nested, '$[7][0]' RETURNING boolean array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[1]' RETURNING bigint array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][1]' RETURNING bigint array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING earliest_by(json_value(a_nested, '$[7][1]' RETURNING bigint array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[2]' RETURNING decimal array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][2]' RETURNING decimal array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING earliest_by(json_value(a_nested, '$[7][2]' RETURNING decimal array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[3]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][3]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][3]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[4]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][4]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][4]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[5]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][5]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][5]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[6]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][6]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][6]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(a_nested, time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][7]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][7]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING latest(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING latest(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING latest(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT latest(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[0]' RETURNING boolean array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING latest(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1000) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[1]' RETURNING bigint array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING latest(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1000) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[2]' RETURNING decimal array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING latest(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1000) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[3]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1000) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[4]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1000) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[5]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1000) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[6]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1000) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT latest(a_nested, 1000) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1000) IS NOT NULL;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[0]' RETURNING boolean array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][0]' RETURNING boolean array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING latest_by(json_value(a_nested, '$[7][0]' RETURNING boolean array), time_floor(__time, 'P1D')) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[1]' RETURNING bigint array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][1]' RETURNING bigint array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING latest_by(json_value(a_nested, '$[7][1]' RETURNING bigint array), time_floor(__time, 'P1D')) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[2]' RETURNING decimal array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][2]' RETURNING decimal array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING latest_by(json_value(a_nested, '$[7][2]' RETURNING decimal array), time_floor(__time, 'P1D')) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[3]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][3]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][3]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[4]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][4]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][4]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[5]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][5]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][5]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[6]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][6]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][6]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(a_nested, time_floor(__time, 'P1D')) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][7]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][7]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[0]' RETURNING boolean array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][0]' RETURNING boolean array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING latest_by(json_value(a_nested, '$[7][0]' RETURNING boolean array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[1]' RETURNING bigint array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][1]' RETURNING bigint array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING latest_by(json_value(a_nested, '$[7][1]' RETURNING bigint array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[2]' RETURNING decimal array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][2]' RETURNING decimal array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING latest_by(json_value(a_nested, '$[7][2]' RETURNING decimal array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[3]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][3]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][3]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[4]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][4]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][4]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[5]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][5]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][5]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[6]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][6]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][6]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(a_nested, time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][7]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][7]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING any_value(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING any_value(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING any_value(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING any_value(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING any_value(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING any_value(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING any_value(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING any_value(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT a_bool AS col1,
       grouping(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
may only occur in an aggregate query
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT a_int AS col1,
       grouping(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
may only occur in an aggregate query
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[1]' RETURNING bigint array) AS col1,
       grouping(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+-----+
| col1         | col |
+--------------+-----+
| [1, 2, null] |   0 |
| [null, 2, 1] |   0 |
+--------------+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[7][1]' RETURNING bigint array) AS col1,
       grouping(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING grouping(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
+--------------+-----+
| col1         | col |
+--------------+-----+
| [1, 2, null] |   0 |
| [null, 2, 1] |   0 |
+--------------+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT a_float AS col1,
       grouping(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
may only occur in an aggregate query
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[2]' RETURNING decimal array) AS col1,
       grouping(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+-----+
| col1             | col |
+------------------+-----+
| [0.1, 0.2, null] |   0 |
| [null, 0.2, 0.1] |   0 |
+------------------+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[7][2]' RETURNING decimal array) AS col1,
       grouping(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING grouping(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
+------------------+-----+
| col1             | col |
+------------------+-----+
| [0.1, 0.2, null] |   0 |
| [null, 0.2, 0.1] |   0 |
+------------------+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT a_str AS col1,
       grouping(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
may only occur in an aggregate query
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[3]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+-----+
| col1           | col |
+----------------+-----+
| [S1, S2, null] |   0 |
| [null, S2, S1] |   0 |
+----------------+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[7][3]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING grouping(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
+----------------+-----+
| col1           | col |
+----------------+-----+
| [S1, S2, null] |   0 |
| [null, S2, S1] |   0 |
+----------------+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT a_null AS col1,
       grouping(a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
may only occur in an aggregate query
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[4]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+-----+
| col1               | col |
+--------------------+-----+
| [null, null, null] |   0 |
+--------------------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[7][4]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING grouping(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
+--------------------+-----+
| col1               | col |
+--------------------+-----+
| [null, null, null] |   0 |
+--------------------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT a_empty AS col1,
       grouping(a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
may only occur in an aggregate query
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[5]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+------+-----+
| col1 | col |
+------+-----+
| []   |   0 |
+------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[7][5]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING grouping(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
+------+-----+
| col1 | col |
+------+-----+
| []   |   0 |
+------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT a_mixed AS col1,
       grouping(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
may only occur in an aggregate query
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[6]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+-----+
| col1                     | col |
+--------------------------+-----+
| [null, S1, 0.1, 1, true] |   0 |
| [true, 1, 0.1, S1, null] |   0 |
+--------------------------+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[7][6]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING grouping(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
+--------------------------+-----+
| col1                     | col |
+--------------------------+-----+
| [null, S1, 0.1, 1, true] |   0 |
| [true, 1, 0.1, S1, null] |   0 |
+--------------------------+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT a_nested AS col1,
       grouping(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[7]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+------+-----+
| col1 | col |
+------+-----+
|      |   0 |
+------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[7][7]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING grouping(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
+------+-----+
| col1 | col |
+------+-----+
|      |   0 |
+------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
+--------------------------+
| col                      |
+--------------------------+
| [null, 0, 1, null, 0, 1] |
+--------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
+--------------------------+
| col                      |
+--------------------------+
| [null, 2, 1, null, 2, 1] |
+--------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------------------+
| col                      |
+--------------------------+
| [1, 2, null, 1, 2, null] |
| [null, 2, 1, null, 2, 1] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING array_concat_agg(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [1, 2, null, 1, 2, null] |
| [null, 2, 1, null, 2, 1] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
+----------------------------------+
| col                              |
+----------------------------------+
| [null, 0.2, 0.1, null, 0.2, 0.1] |
+----------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+----------------------------------+
| col                              |
+----------------------------------+
| [0.1, 0.2, null, 0.1, 0.2, null] |
| [null, 0.2, 0.1, null, 0.2, 0.1] |
+----------------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING array_concat_agg(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
+----------------------------------+
| col                              |
+----------------------------------+
| [0.1, 0.2, null, 0.1, 0.2, null] |
| [null, 0.2, 0.1, null, 0.2, 0.1] |
+----------------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
+------------------------------+
| col                          |
+------------------------------+
| [null, S2, S1, null, S2, S1] |
+------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+------------------------------+
| col                          |
+------------------------------+
| [S1, S2, null, S1, S2, null] |
| [null, S2, S1, null, S2, S1] |
+------------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING array_concat_agg(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
+------------------------------+
| col                          |
+------------------------------+
| [S1, S2, null, S1, S2, null] |
| [null, S2, S1, null, S2, S1] |
+------------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------------------------------------------------------------+
| col                                                                      |
+--------------------------------------------------------------------------+
| [null, null, null, null, null, null, null, null, null, null, null, null] |
+--------------------------------------------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING array_concat_agg(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
+--------------------------------------------------------------------------+
| col                                                                      |
+--------------------------------------------------------------------------+
| [null, null, null, null, null, null, null, null, null, null, null, null] |
+--------------------------------------------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING array_concat_agg(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
+--------------------------------------------------+
| col                                              |
+--------------------------------------------------+
| [null, S1, 0.1, 1, true, null, S1, 0.1, 1, true] |
+--------------------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------------------------------+
| col                                              |
+--------------------------------------------------+
| [null, S1, 0.1, 1, true, null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null, true, 1, 0.1, S1, null] |
+--------------------------------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING array_concat_agg(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
+--------------------------------------------------+
| col                                              |
+--------------------------------------------------+
| [null, S1, 0.1, 1, true, null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null, true, 1, 0.1, S1, null] |
+--------------------------------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING array_concat_agg(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
+--------------+
| col          |
+--------------+
| [null, 0, 1] |
+--------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
+--------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING array_concat_agg(DISTINCT json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
+------------------+
| col              |
+------------------+
| [null, 0.1, 0.2] |
+------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [null, 0.1, 0.2] |
| [null, 0.1, 0.2] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING array_concat_agg(DISTINCT json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [null, 0.1, 0.2] |
| [null, 0.1, 0.2] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
+----------------+
| col            |
+----------------+
| [null, S1, S2] |
+----------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [null, S1, S2] |
| [null, S1, S2] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING array_concat_agg(DISTINCT json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [null, S1, S2] |
| [null, S1, S2] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------+
| col    |
+--------+
| [null] |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING array_concat_agg(DISTINCT json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
+--------+
| col    |
+--------+
| [null] |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING array_concat_agg(DISTINCT json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
+--------------------------+
| col                      |
+--------------------------+
| [null, 0.1, 1, S1, true] |
+--------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, 0.1, 1, S1, true] |
| [null, 0.1, 1, S1, true] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING array_concat_agg(DISTINCT json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, 0.1, 1, S1, true] |
| [null, 0.1, 1, S1, true] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING array_concat_agg(DISTINCT json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING bit_and(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING bit_and(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING bit_and(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING bit_and(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING bit_and(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING bit_and(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING bit_and(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING bit_and(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING bit_or(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING bit_or(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING bit_or(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING bit_or(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING bit_or(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING bit_or(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING bit_or(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING bit_or(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING bit_xor(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING bit_xor(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING bit_xor(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING bit_xor(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING bit_xor(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING bit_xor(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING bit_xor(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING bit_xor(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ARRAY[1,
             2,
             NULL] AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [1, 2, null] |
| [1, 2, null] |
| [1, 2, null] |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ARRAY[0.1,
             0.2,
             NULL] AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [0.1, 0.2, null] |
| [0.1, 0.2, null] |
| [0.1, 0.2, null] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ARRAY['S1',
             'S2',
             NULL] AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [S1, S2, null] |
| [S1, S2, null] |
| [S1, S2, null] |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ARRAY[] AS col
FROM test_array;
Require at least 1 argument
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ARRAY[TRUE,
             1,
             0.1,
             'S1',
             NULL,[]] AS col
FROM test_array;
unexpected token
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ARRAY[TRUE,
             1,
             0.1,
             'S1',
             NULL] AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ARRAY['true',
             '1',
             '0.1',
             'S1',
             'null'] AS col
FROM test_array;
+--------------------------+
| col                      |
+--------------------------+
| [true, 1, 0.1, S1, null] |
| [true, 1, 0.1, S1, null] |
| [true, 1, 0.1, S1, null] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ARRAY[[1,2,3],
             [1,2,3]] AS col
FROM test_array;
unexpected token
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ARRAY[ARRAY[1,
                   2,
                   3],ARRAY[1,
                            2,
                            3]] AS col
FROM test_array;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(a_bool) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(a_int) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(a_float) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(a_str) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(a_null) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(a_empty) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(a_mixed) AS col
FROM test_array;
+-----+
| col |
+-----+
|   5 |
|   5 |
|   5 |
|   5 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   5 |
|   5 |
|   5 |
|   5 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   5 |
|   5 |
|   5 |
|   5 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(a_bool, 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[0]' RETURNING boolean array), 0) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[7][0]' RETURNING boolean array), 0) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(a_int, 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[1]' RETURNING bigint array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[7][1]' RETURNING bigint array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(a_float, 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[2]' RETURNING decimal array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[7][2]' RETURNING decimal array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(a_str, 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[3]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[7][3]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(a_null, 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[4]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[7][4]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(a_empty, 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[5]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[7][5]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(a_mixed, 0) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[6]' RETURNING varchar array), 0) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[7][6]' RETURNING varchar array), 0) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(a_nested, 0) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[7]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[7][7]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(a_bool, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(a_int, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(a_float, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(a_str, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(a_null, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(a_empty, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(a_mixed, 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(a_bool, 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(a_int, 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(a_float, 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(a_str, 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(a_null, 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(a_empty, 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(a_mixed, 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(a_bool, ARRAY[1]) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(json_value(a_nested, '$[0]' RETURNING boolean array), ARRAY[1]) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(json_value(a_nested, '$[7][0]' RETURNING boolean array), ARRAY[1]) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(a_int, ARRAY[1]) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(json_value(a_nested, '$[1]' RETURNING bigint array), ARRAY[1]) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(json_value(a_nested, '$[7][1]' RETURNING bigint array), ARRAY[1]) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(a_float, ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(json_value(a_nested, '$[2]' RETURNING decimal array), ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(json_value(a_nested, '$[7][2]' RETURNING decimal array), ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(a_str, ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(json_value(a_nested, '$[3]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(json_value(a_nested, '$[7][3]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(a_null, ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(json_value(a_nested, '$[4]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(json_value(a_nested, '$[7][4]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(a_empty, ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(json_value(a_nested, '$[5]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(json_value(a_nested, '$[7][5]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(a_mixed, ARRAY[1]) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(json_value(a_nested, '$[6]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(json_value(a_nested, '$[7][6]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(a_nested, ARRAY[1]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(json_value(a_nested, '$[7]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(json_value(a_nested, '$[7][7]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(a_bool, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(a_int, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(a_float, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(a_str, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(a_null, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(a_empty, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(a_mixed, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(a_bool, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(a_int, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(a_float, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(a_str, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(a_null, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(a_empty, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(a_mixed, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, a_bool) AS col
FROM test_array;
+-----------------+
| col             |
+-----------------+
| [9, 1, 0, null] |
| [9, 1, 0, null] |
| [9, null, 0, 1] |
| [9, null, 0, 1] |
+-----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, a_int) AS col
FROM test_array;
+-----------------+
| col             |
+-----------------+
| [9, 1, 2, null] |
| [9, 1, 2, null] |
| [9, null, 2, 1] |
| [9, null, 2, 1] |
+-----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
+-----------------+
| col             |
+-----------------+
| [9, 1, 2, null] |
| [9, 1, 2, null] |
| [9, null, 2, 1] |
| [9, null, 2, 1] |
+-----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
+-----------------+
| col             |
+-----------------+
| [9, 1, 2, null] |
| [9, 1, 2, null] |
| [9, null, 2, 1] |
| [9, null, 2, 1] |
+-----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, a_float) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [9.0, 0.1, 0.2, null] |
| [9.0, 0.1, 0.2, null] |
| [9.0, null, 0.2, 0.1] |
| [9.0, null, 0.2, 0.1] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [9.0, 0.1, 0.2, null] |
| [9.0, 0.1, 0.2, null] |
| [9.0, null, 0.2, 0.1] |
| [9.0, null, 0.2, 0.1] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [9.0, 0.1, 0.2, null] |
| [9.0, 0.1, 0.2, null] |
| [9.0, null, 0.2, 0.1] |
| [9.0, null, 0.2, 0.1] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, a_str) AS col
FROM test_array;
+-------------------+
| col               |
+-------------------+
| [9, S1, S2, null] |
| [9, S1, S2, null] |
| [9, null, S2, S1] |
| [9, null, S2, S1] |
+-------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
+-------------------+
| col               |
+-------------------+
| [9, S1, S2, null] |
| [9, S1, S2, null] |
| [9, null, S2, S1] |
| [9, null, S2, S1] |
+-------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
+-------------------+
| col               |
+-------------------+
| [9, S1, S2, null] |
| [9, S1, S2, null] |
| [9, null, S2, S1] |
| [9, null, S2, S1] |
+-------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, a_null) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [9, null, null, null] |
| [9, null, null, null] |
| [9, null, null, null] |
| [9, null, null, null] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [9, null, null, null] |
| [9, null, null, null] |
| [9, null, null, null] |
| [9, null, null, null] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [9, null, null, null] |
| [9, null, null, null] |
| [9, null, null, null] |
| [9, null, null, null] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, a_empty) AS col
FROM test_array;
+-----+
| col |
+-----+
| [9] |
| [9] |
| [9] |
| [9] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [9] |
| [9] |
| [9] |
| [9] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [9] |
| [9] |
| [9] |
| [9] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, a_mixed) AS col
FROM test_array;
+-----------------------------+
| col                         |
+-----------------------------+
| [9, null, S1, 0.1, 1, true] |
| [9, null, S1, 0.1, 1, true] |
| [9, true, 1, 0.1, S1, null] |
| [9, true, 1, 0.1, S1, null] |
+-----------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
+-----------------------------+
| col                         |
+-----------------------------+
| [9, null, S1, 0.1, 1, true] |
| [9, null, S1, 0.1, 1, true] |
| [9, true, 1, 0.1, S1, null] |
| [9, true, 1, 0.1, S1, null] |
+-----------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
+-----------------------------+
| col                         |
+-----------------------------+
| [9, null, S1, 0.1, 1, true] |
| [9, null, S1, 0.1, 1, true] |
| [9, true, 1, 0.1, S1, null] |
| [9, true, 1, 0.1, S1, null] |
+-----------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(a_bool, 9) AS col
FROM test_array;
+-----------------+
| col             |
+-----------------+
| [1, 0, null, 9] |
| [1, 0, null, 9] |
| [null, 0, 1, 9] |
| [null, 0, 1, 9] |
+-----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(a_int, 9) AS col
FROM test_array;
+-----------------+
| col             |
+-----------------+
| [1, 2, null, 9] |
| [1, 2, null, 9] |
| [null, 2, 1, 9] |
| [null, 2, 1, 9] |
+-----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(json_value(a_nested, '$[1]' RETURNING bigint array), 9) AS col
FROM test_array;
+-----------------+
| col             |
+-----------------+
| [1, 2, null, 9] |
| [1, 2, null, 9] |
| [null, 2, 1, 9] |
| [null, 2, 1, 9] |
+-----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(json_value(a_nested, '$[7][1]' RETURNING bigint array), 9) AS col
FROM test_array;
+-----------------+
| col             |
+-----------------+
| [1, 2, null, 9] |
| [1, 2, null, 9] |
| [null, 2, 1, 9] |
| [null, 2, 1, 9] |
+-----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(a_float, 9) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [0.1, 0.2, null, 9.0] |
| [0.1, 0.2, null, 9.0] |
| [null, 0.2, 0.1, 9.0] |
| [null, 0.2, 0.1, 9.0] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(json_value(a_nested, '$[2]' RETURNING decimal array), 9) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [0.1, 0.2, null, 9.0] |
| [0.1, 0.2, null, 9.0] |
| [null, 0.2, 0.1, 9.0] |
| [null, 0.2, 0.1, 9.0] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(json_value(a_nested, '$[7][2]' RETURNING decimal array), 9) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [0.1, 0.2, null, 9.0] |
| [0.1, 0.2, null, 9.0] |
| [null, 0.2, 0.1, 9.0] |
| [null, 0.2, 0.1, 9.0] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(a_str, 9) AS col
FROM test_array;
+-------------------+
| col               |
+-------------------+
| [S1, S2, null, 9] |
| [S1, S2, null, 9] |
| [null, S2, S1, 9] |
| [null, S2, S1, 9] |
+-------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(json_value(a_nested, '$[3]' RETURNING varchar array), 9) AS col
FROM test_array;
+-------------------+
| col               |
+-------------------+
| [S1, S2, null, 9] |
| [S1, S2, null, 9] |
| [null, S2, S1, 9] |
| [null, S2, S1, 9] |
+-------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(json_value(a_nested, '$[7][3]' RETURNING varchar array), 9) AS col
FROM test_array;
+-------------------+
| col               |
+-------------------+
| [S1, S2, null, 9] |
| [S1, S2, null, 9] |
| [null, S2, S1, 9] |
| [null, S2, S1, 9] |
+-------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(a_null, 9) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [null, null, null, 9] |
| [null, null, null, 9] |
| [null, null, null, 9] |
| [null, null, null, 9] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(json_value(a_nested, '$[4]' RETURNING varchar array), 9) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [null, null, null, 9] |
| [null, null, null, 9] |
| [null, null, null, 9] |
| [null, null, null, 9] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(json_value(a_nested, '$[7][4]' RETURNING varchar array), 9) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [null, null, null, 9] |
| [null, null, null, 9] |
| [null, null, null, 9] |
| [null, null, null, 9] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(a_empty, 9) AS col
FROM test_array;
+-----+
| col |
+-----+
| [9] |
| [9] |
| [9] |
| [9] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(json_value(a_nested, '$[5]' RETURNING varchar array), 9) AS col
FROM test_array;
+-----+
| col |
+-----+
| [9] |
| [9] |
| [9] |
| [9] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(json_value(a_nested, '$[7][5]' RETURNING varchar array), 9) AS col
FROM test_array;
+-----+
| col |
+-----+
| [9] |
| [9] |
| [9] |
| [9] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(a_mixed, 9) AS col
FROM test_array;
+-----------------------------+
| col                         |
+-----------------------------+
| [null, S1, 0.1, 1, true, 9] |
| [null, S1, 0.1, 1, true, 9] |
| [true, 1, 0.1, S1, null, 9] |
| [true, 1, 0.1, S1, null, 9] |
+-----------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(json_value(a_nested, '$[6]' RETURNING varchar array), 9) AS col
FROM test_array;
+-----------------------------+
| col                         |
+-----------------------------+
| [null, S1, 0.1, 1, true, 9] |
| [null, S1, 0.1, 1, true, 9] |
| [true, 1, 0.1, S1, null, 9] |
| [true, 1, 0.1, S1, null, 9] |
+-----------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(json_value(a_nested, '$[7][6]' RETURNING varchar array), 9) AS col
FROM test_array;
+-----------------------------+
| col                         |
+-----------------------------+
| [null, S1, 0.1, 1, true, 9] |
| [null, S1, 0.1, 1, true, 9] |
| [true, 1, 0.1, S1, null, 9] |
| [true, 1, 0.1, S1, null, 9] |
+-----------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(a_nested, 9) AS col
FROM test_array;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(json_value(a_nested, '$[7]' RETURNING varchar array), 9) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(json_value(a_nested, '$[7][7]' RETURNING varchar array), 9) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(a_bool, a_bool) AS col
FROM test_array;
+--------------------------+
| col                      |
+--------------------------+
| [1, 0, null, 1, 0, null] |
| [1, 0, null, 1, 0, null] |
| [null, 0, 1, null, 0, 1] |
| [null, 0, 1, null, 0, 1] |
+--------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(a_int, a_int) AS col
FROM test_array;
+--------------------------+
| col                      |
+--------------------------+
| [1, 2, null, 1, 2, null] |
| [1, 2, null, 1, 2, null] |
| [null, 2, 1, null, 2, 1] |
| [null, 2, 1, null, 2, 1] |
+--------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(json_value(a_nested, '$[1]' RETURNING bigint array), json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
+--------------------------+
| col                      |
+--------------------------+
| [1, 2, null, 1, 2, null] |
| [1, 2, null, 1, 2, null] |
| [null, 2, 1, null, 2, 1] |
| [null, 2, 1, null, 2, 1] |
+--------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(json_value(a_nested, '$[7][1]' RETURNING bigint array), json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
+--------------------------+
| col                      |
+--------------------------+
| [1, 2, null, 1, 2, null] |
| [1, 2, null, 1, 2, null] |
| [null, 2, 1, null, 2, 1] |
| [null, 2, 1, null, 2, 1] |
+--------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(a_float, a_float) AS col
FROM test_array;
+----------------------------------+
| col                              |
+----------------------------------+
| [0.1, 0.2, null, 0.1, 0.2, null] |
| [0.1, 0.2, null, 0.1, 0.2, null] |
| [null, 0.2, 0.1, null, 0.2, 0.1] |
| [null, 0.2, 0.1, null, 0.2, 0.1] |
+----------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(json_value(a_nested, '$[2]' RETURNING decimal array), json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
+----------------------------------+
| col                              |
+----------------------------------+
| [0.1, 0.2, null, 0.1, 0.2, null] |
| [0.1, 0.2, null, 0.1, 0.2, null] |
| [null, 0.2, 0.1, null, 0.2, 0.1] |
| [null, 0.2, 0.1, null, 0.2, 0.1] |
+----------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(json_value(a_nested, '$[7][2]' RETURNING decimal array), json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
+----------------------------------+
| col                              |
+----------------------------------+
| [0.1, 0.2, null, 0.1, 0.2, null] |
| [0.1, 0.2, null, 0.1, 0.2, null] |
| [null, 0.2, 0.1, null, 0.2, 0.1] |
| [null, 0.2, 0.1, null, 0.2, 0.1] |
+----------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(a_str, a_str) AS col
FROM test_array;
+------------------------------+
| col                          |
+------------------------------+
| [S1, S2, null, S1, S2, null] |
| [S1, S2, null, S1, S2, null] |
| [null, S2, S1, null, S2, S1] |
| [null, S2, S1, null, S2, S1] |
+------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(json_value(a_nested, '$[3]' RETURNING varchar array), json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
+------------------------------+
| col                          |
+------------------------------+
| [S1, S2, null, S1, S2, null] |
| [S1, S2, null, S1, S2, null] |
| [null, S2, S1, null, S2, S1] |
| [null, S2, S1, null, S2, S1] |
+------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(json_value(a_nested, '$[7][3]' RETURNING varchar array), json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
+------------------------------+
| col                          |
+------------------------------+
| [S1, S2, null, S1, S2, null] |
| [S1, S2, null, S1, S2, null] |
| [null, S2, S1, null, S2, S1] |
| [null, S2, S1, null, S2, S1] |
+------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(a_null, a_null) AS col
FROM test_array;
+--------------------------------------+
| col                                  |
+--------------------------------------+
| [null, null, null, null, null, null] |
| [null, null, null, null, null, null] |
| [null, null, null, null, null, null] |
| [null, null, null, null, null, null] |
+--------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(json_value(a_nested, '$[4]' RETURNING varchar array), json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
+--------------------------------------+
| col                                  |
+--------------------------------------+
| [null, null, null, null, null, null] |
| [null, null, null, null, null, null] |
| [null, null, null, null, null, null] |
| [null, null, null, null, null, null] |
+--------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(json_value(a_nested, '$[7][4]' RETURNING varchar array), json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
+--------------------------------------+
| col                                  |
+--------------------------------------+
| [null, null, null, null, null, null] |
| [null, null, null, null, null, null] |
| [null, null, null, null, null, null] |
| [null, null, null, null, null, null] |
+--------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(a_empty, a_empty) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(json_value(a_nested, '$[5]' RETURNING varchar array), json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(json_value(a_nested, '$[7][5]' RETURNING varchar array), json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(a_mixed, a_mixed) AS col
FROM test_array;
+--------------------------------------------------+
| col                                              |
+--------------------------------------------------+
| [null, S1, 0.1, 1, true, null, S1, 0.1, 1, true] |
| [null, S1, 0.1, 1, true, null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null, true, 1, 0.1, S1, null] |
| [true, 1, 0.1, S1, null, true, 1, 0.1, S1, null] |
+--------------------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(json_value(a_nested, '$[6]' RETURNING varchar array), json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
+--------------------------------------------------+
| col                                              |
+--------------------------------------------------+
| [null, S1, 0.1, 1, true, null, S1, 0.1, 1, true] |
| [null, S1, 0.1, 1, true, null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null, true, 1, 0.1, S1, null] |
| [true, 1, 0.1, S1, null, true, 1, 0.1, S1, null] |
+--------------------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(json_value(a_nested, '$[7][6]' RETURNING varchar array), json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
+--------------------------------------------------+
| col                                              |
+--------------------------------------------------+
| [null, S1, 0.1, 1, true, null, S1, 0.1, 1, true] |
| [null, S1, 0.1, 1, true, null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null, true, 1, 0.1, S1, null] |
| [true, 1, 0.1, S1, null, true, 1, 0.1, S1, null] |
+--------------------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(a_nested, a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(json_value(a_nested, '$[7]' RETURNING varchar array), json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(json_value(a_nested, '$[7][7]' RETURNING varchar array), json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(a_bool, 0, 2) AS col
FROM test_array;
+-----------+
| col       |
+-----------+
| [1, 0]    |
| [1, 0]    |
| [null, 0] |
| [null, 0] |
+-----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(a_int, 0, 2) AS col
FROM test_array;
+-----------+
| col       |
+-----------+
| [1, 2]    |
| [1, 2]    |
| [null, 2] |
| [null, 2] |
+-----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(json_value(a_nested, '$[1]' RETURNING bigint array), 0, 2) AS col
FROM test_array;
+-----------+
| col       |
+-----------+
| [1, 2]    |
| [1, 2]    |
| [null, 2] |
| [null, 2] |
+-----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(json_value(a_nested, '$[7][1]' RETURNING bigint array), 0, 2) AS col
FROM test_array;
+-----------+
| col       |
+-----------+
| [1, 2]    |
| [1, 2]    |
| [null, 2] |
| [null, 2] |
+-----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(a_float, 0, 2) AS col
FROM test_array;
+-------------+
| col         |
+-------------+
| [0.1, 0.2]  |
| [0.1, 0.2]  |
| [null, 0.2] |
| [null, 0.2] |
+-------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(json_value(a_nested, '$[2]' RETURNING decimal array), 0, 2) AS col
FROM test_array;
+-------------+
| col         |
+-------------+
| [0.1, 0.2]  |
| [0.1, 0.2]  |
| [null, 0.2] |
| [null, 0.2] |
+-------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(json_value(a_nested, '$[7][2]' RETURNING decimal array), 0, 2) AS col
FROM test_array;
+-------------+
| col         |
+-------------+
| [0.1, 0.2]  |
| [0.1, 0.2]  |
| [null, 0.2] |
| [null, 0.2] |
+-------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(a_str, 0, 2) AS col
FROM test_array;
+------------+
| col        |
+------------+
| [S1, S2]   |
| [S1, S2]   |
| [null, S2] |
| [null, S2] |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(json_value(a_nested, '$[3]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+------------+
| col        |
+------------+
| [S1, S2]   |
| [S1, S2]   |
| [null, S2] |
| [null, S2] |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(json_value(a_nested, '$[7][3]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+------------+
| col        |
+------------+
| [S1, S2]   |
| [S1, S2]   |
| [null, S2] |
| [null, S2] |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(a_null, 0, 2) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [null, null] |
| [null, null] |
| [null, null] |
| [null, null] |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(json_value(a_nested, '$[4]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [null, null] |
| [null, null] |
| [null, null] |
| [null, null] |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(json_value(a_nested, '$[7][4]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [null, null] |
| [null, null] |
| [null, null] |
| [null, null] |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(a_empty, 0, 2) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [null, null] |
| [null, null] |
| [null, null] |
| [null, null] |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(json_value(a_nested, '$[5]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [null, null] |
| [null, null] |
| [null, null] |
| [null, null] |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(json_value(a_nested, '$[7][5]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [null, null] |
| [null, null] |
| [null, null] |
| [null, null] |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(a_mixed, 0, 2) AS col
FROM test_array;
+------------+
| col        |
+------------+
| [null, S1] |
| [null, S1] |
| [true, 1]  |
| [true, 1]  |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(json_value(a_nested, '$[6]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+------------+
| col        |
+------------+
| [null, S1] |
| [null, S1] |
| [true, 1]  |
| [true, 1]  |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(json_value(a_nested, '$[7][6]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+------------+
| col        |
+------------+
| [null, S1] |
| [null, S1] |
| [true, 1]  |
| [true, 1]  |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(a_nested, 0, 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(json_value(a_nested, '$[7]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(json_value(a_nested, '$[7][7]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(a_bool, '|') AS col
FROM test_array;
+----------+
| col      |
+----------+
| 1|0|null |
| 1|0|null |
| null|0|1 |
| null|0|1 |
+----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(json_value(a_nested, '$[0]' RETURNING boolean array), '|') AS col
FROM test_array;
+----------+
| col      |
+----------+
| 1|0|null |
| 1|0|null |
| null|0|1 |
| null|0|1 |
+----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(json_value(a_nested, '$[7][0]' RETURNING boolean array), '|') AS col
FROM test_array;
+----------+
| col      |
+----------+
| 1|0|null |
| 1|0|null |
| null|0|1 |
| null|0|1 |
+----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(a_int, '|') AS col
FROM test_array;
+----------+
| col      |
+----------+
| 1|2|null |
| 1|2|null |
| null|2|1 |
| null|2|1 |
+----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(json_value(a_nested, '$[1]' RETURNING bigint array), '|') AS col
FROM test_array;
+----------+
| col      |
+----------+
| 1|2|null |
| 1|2|null |
| null|2|1 |
| null|2|1 |
+----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(json_value(a_nested, '$[7][1]' RETURNING bigint array), '|') AS col
FROM test_array;
+----------+
| col      |
+----------+
| 1|2|null |
| 1|2|null |
| null|2|1 |
| null|2|1 |
+----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(a_float, '|') AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| 0.1|0.2|null |
| 0.1|0.2|null |
| null|0.2|0.1 |
| null|0.2|0.1 |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(json_value(a_nested, '$[2]' RETURNING decimal array), '|') AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| 0.1|0.2|null |
| 0.1|0.2|null |
| null|0.2|0.1 |
| null|0.2|0.1 |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(json_value(a_nested, '$[7][2]' RETURNING decimal array), '|') AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| 0.1|0.2|null |
| 0.1|0.2|null |
| null|0.2|0.1 |
| null|0.2|0.1 |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(a_str, '|') AS col
FROM test_array;
+------------+
| col        |
+------------+
| S1|S2|null |
| S1|S2|null |
| null|S2|S1 |
| null|S2|S1 |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(json_value(a_nested, '$[3]' RETURNING varchar array), '|') AS col
FROM test_array;
+------------+
| col        |
+------------+
| S1|S2|null |
| S1|S2|null |
| null|S2|S1 |
| null|S2|S1 |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(json_value(a_nested, '$[7][3]' RETURNING varchar array), '|') AS col
FROM test_array;
+------------+
| col        |
+------------+
| S1|S2|null |
| S1|S2|null |
| null|S2|S1 |
| null|S2|S1 |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(a_null, '|') AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| null|null|null |
| null|null|null |
| null|null|null |
| null|null|null |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(json_value(a_nested, '$[4]' RETURNING varchar array), '|') AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| null|null|null |
| null|null|null |
| null|null|null |
| null|null|null |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(json_value(a_nested, '$[7][4]' RETURNING varchar array), '|') AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| null|null|null |
| null|null|null |
| null|null|null |
| null|null|null |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(a_empty, '|') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(json_value(a_nested, '$[5]' RETURNING varchar array), '|') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(json_value(a_nested, '$[7][5]' RETURNING varchar array), '|') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(a_mixed, '|') AS col
FROM test_array;
+--------------------+
| col                |
+--------------------+
| null|S1|0.1|1|true |
| null|S1|0.1|1|true |
| true|1|0.1|S1|null |
| true|1|0.1|S1|null |
+--------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(json_value(a_nested, '$[6]' RETURNING varchar array), '|') AS col
FROM test_array;
+--------------------+
| col                |
+--------------------+
| null|S1|0.1|1|true |
| null|S1|0.1|1|true |
| true|1|0.1|S1|null |
| true|1|0.1|S1|null |
+--------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(json_value(a_nested, '$[7][6]' RETURNING varchar array), '|') AS col
FROM test_array;
+--------------------+
| col                |
+--------------------+
| null|S1|0.1|1|true |
| null|S1|0.1|1|true |
| true|1|0.1|S1|null |
| true|1|0.1|S1|null |
+--------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(a_nested, '|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(json_value(a_nested, '$[7]' RETURNING varchar array), '|') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(json_value(a_nested, '$[7][7]' RETURNING varchar array), '|') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C0_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array('true|1|0.1|S1|null', '\|') AS col
FROM test_array;
+--------------------------+
| col                      |
+--------------------------+
| [true, 1, 0.1, S1, null] |
| [true, 1, 0.1, S1, null] |
| [true, 1, 0.1, S1, null] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(a_bool, '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(json_value(a_nested, '$[0]' RETURNING boolean array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(json_value(a_nested, '$[7][0]' RETURNING boolean array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(a_int, '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(json_value(a_nested, '$[1]' RETURNING bigint array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(json_value(a_nested, '$[7][1]' RETURNING bigint array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(a_float, '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(json_value(a_nested, '$[2]' RETURNING decimal array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(json_value(a_nested, '$[7][2]' RETURNING decimal array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(a_str, '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(json_value(a_nested, '$[3]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(json_value(a_nested, '$[7][3]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(a_null, '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(json_value(a_nested, '$[4]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(json_value(a_nested, '$[7][4]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(a_empty, '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(json_value(a_nested, '$[5]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(json_value(a_nested, '$[7][5]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(a_mixed, '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(json_value(a_nested, '$[6]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(json_value(a_nested, '$[7][6]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(a_nested, '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(json_value(a_nested, '$[7]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(json_value(a_nested, '$[7][7]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(a_bool) AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| ["1","0",null] |
| ["1","0",null] |
| [null,"0","1"] |
| [null,"0","1"] |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| ["1","0",null] |
| ["1","0",null] |
| [null,"0","1"] |
| [null,"0","1"] |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| ["1","0",null] |
| ["1","0",null] |
| [null,"0","1"] |
| [null,"0","1"] |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(a_int) AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| ["1","2",null] |
| ["1","2",null] |
| [null,"2","1"] |
| [null,"2","1"] |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| ["1","2",null] |
| ["1","2",null] |
| [null,"2","1"] |
| [null,"2","1"] |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| ["1","2",null] |
| ["1","2",null] |
| [null,"2","1"] |
| [null,"2","1"] |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(a_float) AS col
FROM test_array;
+--------------------+
| col                |
+--------------------+
| ["0.1","0.2",null] |
| ["0.1","0.2",null] |
| [null,"0.2","0.1"] |
| [null,"0.2","0.1"] |
+--------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
+--------------------+
| col                |
+--------------------+
| ["0.1","0.2",null] |
| ["0.1","0.2",null] |
| [null,"0.2","0.1"] |
| [null,"0.2","0.1"] |
+--------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
+--------------------+
| col                |
+--------------------+
| ["0.1","0.2",null] |
| ["0.1","0.2",null] |
| [null,"0.2","0.1"] |
| [null,"0.2","0.1"] |
+--------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(a_str) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| ["S1","S2",null] |
| ["S1","S2",null] |
| [null,"S2","S1"] |
| [null,"S2","S1"] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| ["S1","S2",null] |
| ["S1","S2",null] |
| [null,"S2","S1"] |
| [null,"S2","S1"] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| ["S1","S2",null] |
| ["S1","S2",null] |
| [null,"S2","S1"] |
| [null,"S2","S1"] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(a_null) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| [null,null,null] |
| [null,null,null] |
| [null,null,null] |
| [null,null,null] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| [null,null,null] |
| [null,null,null] |
| [null,null,null] |
| [null,null,null] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| [null,null,null] |
| [null,null,null] |
| [null,null,null] |
| [null,null,null] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(a_empty) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(a_mixed) AS col
FROM test_array;
+------------------------------+
| col                          |
+------------------------------+
| ["true","1","0.1","S1",null] |
| ["true","1","0.1","S1",null] |
| [null,"S1","0.1","1","true"] |
| [null,"S1","0.1","1","true"] |
+------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
+------------------------------+
| col                          |
+------------------------------+
| ["true","1","0.1","S1",null] |
| ["true","1","0.1","S1",null] |
| [null,"S1","0.1","1","true"] |
| [null,"S1","0.1","1","true"] |
+------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
+------------------------------+
| col                          |
+------------------------------+
| ["true","1","0.1","S1",null] |
| ["true","1","0.1","S1",null] |
| [null,"S1","0.1","1","true"] |
| [null,"S1","0.1","1","true"] |
+------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(a_bool, ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(json_value(a_nested, '$[0]' RETURNING boolean array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(json_value(a_nested, '$[7][0]' RETURNING boolean array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(a_int, ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(json_value(a_nested, '$[1]' RETURNING bigint array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(json_value(a_nested, '$[7][1]' RETURNING bigint array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(a_float, ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(json_value(a_nested, '$[2]' RETURNING decimal array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(json_value(a_nested, '$[7][2]' RETURNING decimal array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(a_str, ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(json_value(a_nested, '$[3]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(json_value(a_nested, '$[7][3]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(a_null, ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(json_value(a_nested, '$[4]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(json_value(a_nested, '$[7][4]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(a_empty, ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(json_value(a_nested, '$[5]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(json_value(a_nested, '$[7][5]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(a_mixed, ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(json_value(a_nested, '$[6]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(json_value(a_nested, '$[7][6]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(a_nested, ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(json_value(a_nested, '$[7]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(json_value(a_nested, '$[7][7]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(a_bool, ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(json_value(a_nested, '$[0]' RETURNING boolean array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(json_value(a_nested, '$[7][0]' RETURNING boolean array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(a_int, ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(json_value(a_nested, '$[1]' RETURNING bigint array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(json_value(a_nested, '$[7][1]' RETURNING bigint array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(a_float, ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(json_value(a_nested, '$[2]' RETURNING decimal array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(json_value(a_nested, '$[7][2]' RETURNING decimal array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(a_str, ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(json_value(a_nested, '$[3]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(json_value(a_nested, '$[7][3]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(a_null, ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(json_value(a_nested, '$[4]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(json_value(a_nested, '$[7][4]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(a_empty, ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(json_value(a_nested, '$[5]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(json_value(a_nested, '$[7][5]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(a_mixed, ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(json_value(a_nested, '$[6]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(json_value(a_nested, '$[7][6]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(a_nested, ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(json_value(a_nested, '$[7]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(json_value(a_nested, '$[7][7]' RETURNING varchar array), ARRAY[1, 2]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(a_bool) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(a_int) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(a_float) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(a_str) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(a_null) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(a_empty) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(a_mixed) AS col
FROM test_array;
+-----+
| col |
+-----+
|   5 |
|   5 |
|   5 |
|   5 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   5 |
|   5 |
|   5 |
|   5 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   5 |
|   5 |
|   5 |
|   5 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(a_bool, 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(json_value(a_nested, '$[0]' RETURNING boolean array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(json_value(a_nested, '$[7][0]' RETURNING boolean array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(a_int, 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(json_value(a_nested, '$[1]' RETURNING bigint array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(json_value(a_nested, '$[7][1]' RETURNING bigint array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(a_float, 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(json_value(a_nested, '$[2]' RETURNING decimal array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(json_value(a_nested, '$[7][2]' RETURNING decimal array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(a_str, 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(json_value(a_nested, '$[3]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(json_value(a_nested, '$[7][3]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(a_null, 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(json_value(a_nested, '$[4]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(json_value(a_nested, '$[7][4]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(a_empty, 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(json_value(a_nested, '$[5]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(json_value(a_nested, '$[7][5]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(a_mixed, 0) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(json_value(a_nested, '$[6]' RETURNING varchar array), 0) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(json_value(a_nested, '$[7][6]' RETURNING varchar array), 0) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(a_nested, 0) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(json_value(a_nested, '$[7]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(json_value(a_nested, '$[7][7]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(a_bool, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(a_int, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(a_float, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(a_str, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(a_null, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(a_empty, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(a_mixed, 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(a_bool, 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(a_int, 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(a_float, 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(a_str, 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(a_null, 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(a_empty, 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(a_mixed, 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(a_bool, ARRAY[1]) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(json_value(a_nested, '$[0]' RETURNING boolean array), ARRAY[1]) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(json_value(a_nested, '$[7][0]' RETURNING boolean array), ARRAY[1]) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(a_int, ARRAY[1]) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(json_value(a_nested, '$[1]' RETURNING bigint array), ARRAY[1]) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(json_value(a_nested, '$[7][1]' RETURNING bigint array), ARRAY[1]) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(a_float, ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(json_value(a_nested, '$[2]' RETURNING decimal array), ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(json_value(a_nested, '$[7][2]' RETURNING decimal array), ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(a_str, ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(json_value(a_nested, '$[3]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(json_value(a_nested, '$[7][3]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(a_null, ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(json_value(a_nested, '$[4]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(json_value(a_nested, '$[7][4]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(a_empty, ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(json_value(a_nested, '$[5]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(json_value(a_nested, '$[7][5]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(a_mixed, ARRAY[1]) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(json_value(a_nested, '$[6]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(json_value(a_nested, '$[7][6]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(a_nested, ARRAY[1]) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(json_value(a_nested, '$[7]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(json_value(a_nested, '$[7][7]' RETURNING varchar array), ARRAY[1]) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(a_bool, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(a_int, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   2 |
|   2 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(a_float, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(a_str, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(a_null, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(a_empty, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(a_mixed, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(a_bool, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(a_int, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(a_float, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(a_str, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(a_null, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(a_empty, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(a_mixed, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(a_nested, 1) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', a_bool) AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| [null,"1","0",null] |
| [null,"1","0",null] |
| [null,null,"0","1"] |
| [null,null,"0","1"] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| [null,"1","0",null] |
| [null,"1","0",null] |
| [null,null,"0","1"] |
| [null,null,"0","1"] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| [null,"1","0",null] |
| [null,"1","0",null] |
| [null,null,"0","1"] |
| [null,null,"0","1"] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', a_int) AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| [null,"1","2",null] |
| [null,"1","2",null] |
| [null,null,"2","1"] |
| [null,null,"2","1"] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| [null,"1","2",null] |
| [null,"1","2",null] |
| [null,null,"2","1"] |
| [null,null,"2","1"] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| [null,"1","2",null] |
| [null,"1","2",null] |
| [null,null,"2","1"] |
| [null,null,"2","1"] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', a_float) AS col
FROM test_array;
+-------------------------+
| col                     |
+-------------------------+
| [null,"0.1","0.2",null] |
| [null,"0.1","0.2",null] |
| [null,null,"0.2","0.1"] |
| [null,null,"0.2","0.1"] |
+-------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
+-------------------------+
| col                     |
+-------------------------+
| [null,"0.1","0.2",null] |
| [null,"0.1","0.2",null] |
| [null,null,"0.2","0.1"] |
| [null,null,"0.2","0.1"] |
+-------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
+-------------------------+
| col                     |
+-------------------------+
| [null,"0.1","0.2",null] |
| [null,"0.1","0.2",null] |
| [null,null,"0.2","0.1"] |
| [null,null,"0.2","0.1"] |
+-------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', a_str) AS col
FROM test_array;
+----------------------+
| col                  |
+----------------------+
| ["A","S1","S2",null] |
| ["A","S1","S2",null] |
| ["A",null,"S2","S1"] |
| ["A",null,"S2","S1"] |
+----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
+----------------------+
| col                  |
+----------------------+
| ["A","S1","S2",null] |
| ["A","S1","S2",null] |
| ["A",null,"S2","S1"] |
| ["A",null,"S2","S1"] |
+----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
+----------------------+
| col                  |
+----------------------+
| ["A","S1","S2",null] |
| ["A","S1","S2",null] |
| ["A",null,"S2","S1"] |
| ["A",null,"S2","S1"] |
+----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', a_null) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [null,null,null,null] |
| [null,null,null,null] |
| [null,null,null,null] |
| [null,null,null,null] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
+----------------------+
| col                  |
+----------------------+
| ["A",null,null,null] |
| ["A",null,null,null] |
| ["A",null,null,null] |
| ["A",null,null,null] |
+----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
+----------------------+
| col                  |
+----------------------+
| ["A",null,null,null] |
| ["A",null,null,null] |
| ["A",null,null,null] |
| ["A",null,null,null] |
+----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', a_empty) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| A   |
| A   |
| A   |
| A   |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| A   |
| A   |
| A   |
| A   |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', a_mixed) AS col
FROM test_array;
+----------------------------------+
| col                              |
+----------------------------------+
| ["A","true","1","0.1","S1",null] |
| ["A","true","1","0.1","S1",null] |
| ["A",null,"S1","0.1","1","true"] |
| ["A",null,"S1","0.1","1","true"] |
+----------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
+----------------------------------+
| col                              |
+----------------------------------+
| ["A","true","1","0.1","S1",null] |
| ["A","true","1","0.1","S1",null] |
| ["A",null,"S1","0.1","1","true"] |
| ["A",null,"S1","0.1","1","true"] |
+----------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
+----------------------------------+
| col                              |
+----------------------------------+
| ["A","true","1","0.1","S1",null] |
| ["A","true","1","0.1","S1",null] |
| ["A",null,"S1","0.1","1","true"] |
| ["A",null,"S1","0.1","1","true"] |
+----------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(a_bool, 'A') AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| ["1","0",null,null] |
| ["1","0",null,null] |
| [null,"0","1",null] |
| [null,"0","1",null] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[0]' RETURNING boolean array), 'A') AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| ["1","0",null,null] |
| ["1","0",null,null] |
| [null,"0","1",null] |
| [null,"0","1",null] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[7][0]' RETURNING boolean array), 'A') AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| ["1","0",null,null] |
| ["1","0",null,null] |
| [null,"0","1",null] |
| [null,"0","1",null] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(a_int, 'A') AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| ["1","2",null,null] |
| ["1","2",null,null] |
| [null,"2","1",null] |
| [null,"2","1",null] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[1]' RETURNING bigint array), 'A') AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| ["1","2",null,null] |
| ["1","2",null,null] |
| [null,"2","1",null] |
| [null,"2","1",null] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[7][1]' RETURNING bigint array), 'A') AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| ["1","2",null,null] |
| ["1","2",null,null] |
| [null,"2","1",null] |
| [null,"2","1",null] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(a_float, 'A') AS col
FROM test_array;
+-------------------------+
| col                     |
+-------------------------+
| ["0.1","0.2",null,null] |
| ["0.1","0.2",null,null] |
| [null,"0.2","0.1",null] |
| [null,"0.2","0.1",null] |
+-------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[2]' RETURNING decimal array), 'A') AS col
FROM test_array;
+-------------------------+
| col                     |
+-------------------------+
| ["0.1","0.2",null,null] |
| ["0.1","0.2",null,null] |
| [null,"0.2","0.1",null] |
| [null,"0.2","0.1",null] |
+-------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[7][2]' RETURNING decimal array), 'A') AS col
FROM test_array;
+-------------------------+
| col                     |
+-------------------------+
| ["0.1","0.2",null,null] |
| ["0.1","0.2",null,null] |
| [null,"0.2","0.1",null] |
| [null,"0.2","0.1",null] |
+-------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(a_str, 'A') AS col
FROM test_array;
+----------------------+
| col                  |
+----------------------+
| ["S1","S2",null,"A"] |
| ["S1","S2",null,"A"] |
| [null,"S2","S1","A"] |
| [null,"S2","S1","A"] |
+----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[3]' RETURNING varchar array), 'A') AS col
FROM test_array;
+----------------------+
| col                  |
+----------------------+
| ["S1","S2",null,"A"] |
| ["S1","S2",null,"A"] |
| [null,"S2","S1","A"] |
| [null,"S2","S1","A"] |
+----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[7][3]' RETURNING varchar array), 'A') AS col
FROM test_array;
+----------------------+
| col                  |
+----------------------+
| ["S1","S2",null,"A"] |
| ["S1","S2",null,"A"] |
| [null,"S2","S1","A"] |
| [null,"S2","S1","A"] |
+----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(a_null, 'A') AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [null,null,null,null] |
| [null,null,null,null] |
| [null,null,null,null] |
| [null,null,null,null] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[4]' RETURNING varchar array), 'A') AS col
FROM test_array;
+----------------------+
| col                  |
+----------------------+
| [null,null,null,"A"] |
| [null,null,null,"A"] |
| [null,null,null,"A"] |
| [null,null,null,"A"] |
+----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[7][4]' RETURNING varchar array), 'A') AS col
FROM test_array;
+----------------------+
| col                  |
+----------------------+
| [null,null,null,"A"] |
| [null,null,null,"A"] |
| [null,null,null,"A"] |
| [null,null,null,"A"] |
+----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(a_empty, 'A') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[5]' RETURNING varchar array), 'A') AS col
FROM test_array;
+-----+
| col |
+-----+
| A   |
| A   |
| A   |
| A   |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[7][5]' RETURNING varchar array), 'A') AS col
FROM test_array;
+-----+
| col |
+-----+
| A   |
| A   |
| A   |
| A   |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(a_mixed, 'A') AS col
FROM test_array;
+----------------------------------+
| col                              |
+----------------------------------+
| ["true","1","0.1","S1",null,"A"] |
| ["true","1","0.1","S1",null,"A"] |
| [null,"S1","0.1","1","true","A"] |
| [null,"S1","0.1","1","true","A"] |
+----------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[6]' RETURNING varchar array), 'A') AS col
FROM test_array;
+----------------------------------+
| col                              |
+----------------------------------+
| ["true","1","0.1","S1",null,"A"] |
| ["true","1","0.1","S1",null,"A"] |
| [null,"S1","0.1","1","true","A"] |
| [null,"S1","0.1","1","true","A"] |
+----------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[7][6]' RETURNING varchar array), 'A') AS col
FROM test_array;
+----------------------------------+
| col                              |
+----------------------------------+
| ["true","1","0.1","S1",null,"A"] |
| ["true","1","0.1","S1",null,"A"] |
| [null,"S1","0.1","1","true","A"] |
| [null,"S1","0.1","1","true","A"] |
+----------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(a_nested, 'A') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[7]' RETURNING varchar array), 'A') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[7][7]' RETURNING varchar array), 'A') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(a_bool, a_bool) AS col
FROM test_array;
+-----------------------------+
| col                         |
+-----------------------------+
| ["1","0",null,"1","0",null] |
| ["1","0",null,"1","0",null] |
| [null,"0","1",null,"0","1"] |
| [null,"0","1",null,"0","1"] |
+-----------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(json_value(a_nested, '$[0]' RETURNING boolean array), json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
+-----------------------------+
| col                         |
+-----------------------------+
| ["1","0",null,"1","0",null] |
| ["1","0",null,"1","0",null] |
| [null,"0","1",null,"0","1"] |
| [null,"0","1",null,"0","1"] |
+-----------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(json_value(a_nested, '$[7][0]' RETURNING boolean array), json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
+-----------------------------+
| col                         |
+-----------------------------+
| ["1","0",null,"1","0",null] |
| ["1","0",null,"1","0",null] |
| [null,"0","1",null,"0","1"] |
| [null,"0","1",null,"0","1"] |
+-----------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(a_int, a_int) AS col
FROM test_array;
+-----------------------------+
| col                         |
+-----------------------------+
| ["1","2",null,"1","2",null] |
| ["1","2",null,"1","2",null] |
| [null,"2","1",null,"2","1"] |
| [null,"2","1",null,"2","1"] |
+-----------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(json_value(a_nested, '$[1]' RETURNING bigint array), json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
+-----------------------------+
| col                         |
+-----------------------------+
| ["1","2",null,"1","2",null] |
| ["1","2",null,"1","2",null] |
| [null,"2","1",null,"2","1"] |
| [null,"2","1",null,"2","1"] |
+-----------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(json_value(a_nested, '$[7][1]' RETURNING bigint array), json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
+-----------------------------+
| col                         |
+-----------------------------+
| ["1","2",null,"1","2",null] |
| ["1","2",null,"1","2",null] |
| [null,"2","1",null,"2","1"] |
| [null,"2","1",null,"2","1"] |
+-----------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(a_float, a_float) AS col
FROM test_array;
+-------------------------------------+
| col                                 |
+-------------------------------------+
| ["0.1","0.2",null,"0.1","0.2",null] |
| ["0.1","0.2",null,"0.1","0.2",null] |
| [null,"0.2","0.1",null,"0.2","0.1"] |
| [null,"0.2","0.1",null,"0.2","0.1"] |
+-------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(json_value(a_nested, '$[2]' RETURNING decimal array), json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
+-------------------------------------+
| col                                 |
+-------------------------------------+
| ["0.1","0.2",null,"0.1","0.2",null] |
| ["0.1","0.2",null,"0.1","0.2",null] |
| [null,"0.2","0.1",null,"0.2","0.1"] |
| [null,"0.2","0.1",null,"0.2","0.1"] |
+-------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(json_value(a_nested, '$[7][2]' RETURNING decimal array), json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
+-------------------------------------+
| col                                 |
+-------------------------------------+
| ["0.1","0.2",null,"0.1","0.2",null] |
| ["0.1","0.2",null,"0.1","0.2",null] |
| [null,"0.2","0.1",null,"0.2","0.1"] |
| [null,"0.2","0.1",null,"0.2","0.1"] |
+-------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(a_str, a_str) AS col
FROM test_array;
+---------------------------------+
| col                             |
+---------------------------------+
| ["S1","S2",null,"S1","S2",null] |
| ["S1","S2",null,"S1","S2",null] |
| [null,"S2","S1",null,"S2","S1"] |
| [null,"S2","S1",null,"S2","S1"] |
+---------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(json_value(a_nested, '$[3]' RETURNING varchar array), json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
+---------------------------------+
| col                             |
+---------------------------------+
| ["S1","S2",null,"S1","S2",null] |
| ["S1","S2",null,"S1","S2",null] |
| [null,"S2","S1",null,"S2","S1"] |
| [null,"S2","S1",null,"S2","S1"] |
+---------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(json_value(a_nested, '$[7][3]' RETURNING varchar array), json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
+---------------------------------+
| col                             |
+---------------------------------+
| ["S1","S2",null,"S1","S2",null] |
| ["S1","S2",null,"S1","S2",null] |
| [null,"S2","S1",null,"S2","S1"] |
| [null,"S2","S1",null,"S2","S1"] |
+---------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(a_null, a_null) AS col
FROM test_array;
+---------------------------------+
| col                             |
+---------------------------------+
| [null,null,null,null,null,null] |
| [null,null,null,null,null,null] |
| [null,null,null,null,null,null] |
| [null,null,null,null,null,null] |
+---------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(json_value(a_nested, '$[4]' RETURNING varchar array), json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
+---------------------------------+
| col                             |
+---------------------------------+
| [null,null,null,null,null,null] |
| [null,null,null,null,null,null] |
| [null,null,null,null,null,null] |
| [null,null,null,null,null,null] |
+---------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(json_value(a_nested, '$[7][4]' RETURNING varchar array), json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
+---------------------------------+
| col                             |
+---------------------------------+
| [null,null,null,null,null,null] |
| [null,null,null,null,null,null] |
| [null,null,null,null,null,null] |
| [null,null,null,null,null,null] |
+---------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(a_empty, a_empty) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(json_value(a_nested, '$[5]' RETURNING varchar array), json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(json_value(a_nested, '$[7][5]' RETURNING varchar array), json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(a_mixed, a_mixed) AS col
FROM test_array;
+---------------------------------------------------------+
| col                                                     |
+---------------------------------------------------------+
| ["true","1","0.1","S1",null,"true","1","0.1","S1",null] |
| ["true","1","0.1","S1",null,"true","1","0.1","S1",null] |
| [null,"S1","0.1","1","true",null,"S1","0.1","1","true"] |
| [null,"S1","0.1","1","true",null,"S1","0.1","1","true"] |
+---------------------------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(json_value(a_nested, '$[6]' RETURNING varchar array), json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
+---------------------------------------------------------+
| col                                                     |
+---------------------------------------------------------+
| ["true","1","0.1","S1",null,"true","1","0.1","S1",null] |
| ["true","1","0.1","S1",null,"true","1","0.1","S1",null] |
| [null,"S1","0.1","1","true",null,"S1","0.1","1","true"] |
| [null,"S1","0.1","1","true",null,"S1","0.1","1","true"] |
+---------------------------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(json_value(a_nested, '$[7][6]' RETURNING varchar array), json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
+---------------------------------------------------------+
| col                                                     |
+---------------------------------------------------------+
| ["true","1","0.1","S1",null,"true","1","0.1","S1",null] |
| ["true","1","0.1","S1",null,"true","1","0.1","S1",null] |
| [null,"S1","0.1","1","true",null,"S1","0.1","1","true"] |
| [null,"S1","0.1","1","true",null,"S1","0.1","1","true"] |
+---------------------------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(a_nested, a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(json_value(a_nested, '$[7]' RETURNING varchar array), json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(json_value(a_nested, '$[7][7]' RETURNING varchar array), json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(a_bool, 0, 2) AS col
FROM test_array;
+------------+
| col        |
+------------+
| ["1","0"]  |
| ["1","0"]  |
| [null,"0"] |
| [null,"0"] |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(json_value(a_nested, '$[0]' RETURNING boolean array), 0, 2) AS col
FROM test_array;
+------------+
| col        |
+------------+
| ["1","0"]  |
| ["1","0"]  |
| [null,"0"] |
| [null,"0"] |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(json_value(a_nested, '$[7][0]' RETURNING boolean array), 0, 2) AS col
FROM test_array;
+------------+
| col        |
+------------+
| ["1","0"]  |
| ["1","0"]  |
| [null,"0"] |
| [null,"0"] |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(a_int, 0, 2) AS col
FROM test_array;
+------------+
| col        |
+------------+
| ["1","2"]  |
| ["1","2"]  |
| [null,"2"] |
| [null,"2"] |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(json_value(a_nested, '$[1]' RETURNING bigint array), 0, 2) AS col
FROM test_array;
+------------+
| col        |
+------------+
| ["1","2"]  |
| ["1","2"]  |
| [null,"2"] |
| [null,"2"] |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(json_value(a_nested, '$[7][1]' RETURNING bigint array), 0, 2) AS col
FROM test_array;
+------------+
| col        |
+------------+
| ["1","2"]  |
| ["1","2"]  |
| [null,"2"] |
| [null,"2"] |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(a_float, 0, 2) AS col
FROM test_array;
+---------------+
| col           |
+---------------+
| ["0.1","0.2"] |
| ["0.1","0.2"] |
| [null,"0.2"]  |
| [null,"0.2"]  |
+---------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(json_value(a_nested, '$[2]' RETURNING decimal array), 0, 2) AS col
FROM test_array;
+---------------+
| col           |
+---------------+
| ["0.1","0.2"] |
| ["0.1","0.2"] |
| [null,"0.2"]  |
| [null,"0.2"]  |
+---------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(json_value(a_nested, '$[7][2]' RETURNING decimal array), 0, 2) AS col
FROM test_array;
+---------------+
| col           |
+---------------+
| ["0.1","0.2"] |
| ["0.1","0.2"] |
| [null,"0.2"]  |
| [null,"0.2"]  |
+---------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(a_str, 0, 2) AS col
FROM test_array;
+-------------+
| col         |
+-------------+
| ["S1","S2"] |
| ["S1","S2"] |
| [null,"S2"] |
| [null,"S2"] |
+-------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(json_value(a_nested, '$[3]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+-------------+
| col         |
+-------------+
| ["S1","S2"] |
| ["S1","S2"] |
| [null,"S2"] |
| [null,"S2"] |
+-------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(json_value(a_nested, '$[7][3]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+-------------+
| col         |
+-------------+
| ["S1","S2"] |
| ["S1","S2"] |
| [null,"S2"] |
| [null,"S2"] |
+-------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(a_null, 0, 2) AS col
FROM test_array;
+-------------+
| col         |
+-------------+
| [null,null] |
| [null,null] |
| [null,null] |
| [null,null] |
+-------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(json_value(a_nested, '$[4]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+-------------+
| col         |
+-------------+
| [null,null] |
| [null,null] |
| [null,null] |
| [null,null] |
+-------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(json_value(a_nested, '$[7][4]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+-------------+
| col         |
+-------------+
| [null,null] |
| [null,null] |
| [null,null] |
| [null,null] |
+-------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(a_empty, 0, 2) AS col
FROM test_array;
+-------------+
| col         |
+-------------+
| [null,null] |
| [null,null] |
| [null,null] |
| [null,null] |
+-------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(json_value(a_nested, '$[5]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+-------------+
| col         |
+-------------+
| [null,null] |
| [null,null] |
| [null,null] |
| [null,null] |
+-------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(json_value(a_nested, '$[7][5]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+-------------+
| col         |
+-------------+
| [null,null] |
| [null,null] |
| [null,null] |
| [null,null] |
+-------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(a_mixed, 0, 2) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| ["true","1"] |
| ["true","1"] |
| [null,"S1"]  |
| [null,"S1"]  |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(json_value(a_nested, '$[6]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| ["true","1"] |
| ["true","1"] |
| [null,"S1"]  |
| [null,"S1"]  |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(json_value(a_nested, '$[7][6]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| ["true","1"] |
| ["true","1"] |
| [null,"S1"]  |
| [null,"S1"]  |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(a_nested, 0, 2) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(json_value(a_nested, '$[7]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(json_value(a_nested, '$[7][7]' RETURNING varchar array), 0, 2) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(a_bool, '|') AS col
FROM test_array;
+----------+
| col      |
+----------+
| 1|0|null |
| 1|0|null |
| null|0|1 |
| null|0|1 |
+----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(json_value(a_nested, '$[0]' RETURNING boolean array), '|') AS col
FROM test_array;
+----------+
| col      |
+----------+
| 1|0|null |
| 1|0|null |
| null|0|1 |
| null|0|1 |
+----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(json_value(a_nested, '$[7][0]' RETURNING boolean array), '|') AS col
FROM test_array;
+----------+
| col      |
+----------+
| 1|0|null |
| 1|0|null |
| null|0|1 |
| null|0|1 |
+----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(a_int, '|') AS col
FROM test_array;
+----------+
| col      |
+----------+
| 1|2|null |
| 1|2|null |
| null|2|1 |
| null|2|1 |
+----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(json_value(a_nested, '$[1]' RETURNING bigint array), '|') AS col
FROM test_array;
+----------+
| col      |
+----------+
| 1|2|null |
| 1|2|null |
| null|2|1 |
| null|2|1 |
+----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(json_value(a_nested, '$[7][1]' RETURNING bigint array), '|') AS col
FROM test_array;
+----------+
| col      |
+----------+
| 1|2|null |
| 1|2|null |
| null|2|1 |
| null|2|1 |
+----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(a_float, '|') AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| 0.1|0.2|null |
| 0.1|0.2|null |
| null|0.2|0.1 |
| null|0.2|0.1 |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(json_value(a_nested, '$[2]' RETURNING decimal array), '|') AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| 0.1|0.2|null |
| 0.1|0.2|null |
| null|0.2|0.1 |
| null|0.2|0.1 |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(json_value(a_nested, '$[7][2]' RETURNING decimal array), '|') AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| 0.1|0.2|null |
| 0.1|0.2|null |
| null|0.2|0.1 |
| null|0.2|0.1 |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(a_str, '|') AS col
FROM test_array;
+------------+
| col        |
+------------+
| S1|S2|null |
| S1|S2|null |
| null|S2|S1 |
| null|S2|S1 |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(json_value(a_nested, '$[3]' RETURNING varchar array), '|') AS col
FROM test_array;
+------------+
| col        |
+------------+
| S1|S2|null |
| S1|S2|null |
| null|S2|S1 |
| null|S2|S1 |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(json_value(a_nested, '$[7][3]' RETURNING varchar array), '|') AS col
FROM test_array;
+------------+
| col        |
+------------+
| S1|S2|null |
| S1|S2|null |
| null|S2|S1 |
| null|S2|S1 |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(a_null, '|') AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| null|null|null |
| null|null|null |
| null|null|null |
| null|null|null |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(json_value(a_nested, '$[4]' RETURNING varchar array), '|') AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| null|null|null |
| null|null|null |
| null|null|null |
| null|null|null |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(json_value(a_nested, '$[7][4]' RETURNING varchar array), '|') AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| null|null|null |
| null|null|null |
| null|null|null |
| null|null|null |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(a_empty, '|') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(json_value(a_nested, '$[5]' RETURNING varchar array), '|') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(json_value(a_nested, '$[7][5]' RETURNING varchar array), '|') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(a_mixed, '|') AS col
FROM test_array;
+--------------------+
| col                |
+--------------------+
| null|S1|0.1|1|true |
| null|S1|0.1|1|true |
| true|1|0.1|S1|null |
| true|1|0.1|S1|null |
+--------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(json_value(a_nested, '$[6]' RETURNING varchar array), '|') AS col
FROM test_array;
+--------------------+
| col                |
+--------------------+
| null|S1|0.1|1|true |
| null|S1|0.1|1|true |
| true|1|0.1|S1|null |
| true|1|0.1|S1|null |
+--------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(json_value(a_nested, '$[7][6]' RETURNING varchar array), '|') AS col
FROM test_array;
+--------------------+
| col                |
+--------------------+
| null|S1|0.1|1|true |
| null|S1|0.1|1|true |
| true|1|0.1|S1|null |
| true|1|0.1|S1|null |
+--------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(a_nested, '|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(json_value(a_nested, '$[7]' RETURNING varchar array), '|') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(json_value(a_nested, '$[7][7]' RETURNING varchar array), '|') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C0_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv('true|1|0.1|S1|null', '\|') AS col
FROM test_array;
+--------------------------------+
| col                            |
+--------------------------------+
| ["true","1","0.1","S1","null"] |
| ["true","1","0.1","S1","null"] |
| ["true","1","0.1","S1","null"] |
| ["true","1","0.1","S1","null"] |
+--------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(a_bool, '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(json_value(a_nested, '$[0]' RETURNING boolean array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(json_value(a_nested, '$[7][0]' RETURNING boolean array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(a_int, '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(json_value(a_nested, '$[1]' RETURNING bigint array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(json_value(a_nested, '$[7][1]' RETURNING bigint array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(a_float, '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(json_value(a_nested, '$[2]' RETURNING decimal array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(json_value(a_nested, '$[7][2]' RETURNING decimal array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(a_str, '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(json_value(a_nested, '$[3]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(json_value(a_nested, '$[7][3]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(a_null, '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(json_value(a_nested, '$[4]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(json_value(a_nested, '$[7][4]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(a_empty, '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(json_value(a_nested, '$[5]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(json_value(a_nested, '$[7][5]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(a_mixed, '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(json_value(a_nested, '$[6]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(json_value(a_nested, '$[7][6]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(a_nested, '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(json_value(a_nested, '$[7]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(json_value(a_nested, '$[7][7]' RETURNING varchar array), '\|') AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(a_bool) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [1, 0, null] |
| [null, 0, 1] |
| [null, 0, 1] |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
should be an identifier expression. Use array() instead
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
should be an identifier expression. Use array() instead
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(a_int) AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [1, 2, null] |
| [null, 2, 1] |
| [null, 2, 1] |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
should be an identifier expression. Use array() instead
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
should be an identifier expression. Use array() instead
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(a_float) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
| [null, 0.2, 0.1] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
should be an identifier expression. Use array() instead
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
should be an identifier expression. Use array() instead
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(a_str) AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [S1, S2, null] |
| [null, S2, S1] |
| [null, S2, S1] |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
should be an identifier expression. Use array() instead
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
should be an identifier expression. Use array() instead
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(a_null) AS col
FROM test_array;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
| [null, null, null] |
| [null, null, null] |
| [null, null, null] |
+--------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
should be an identifier expression. Use array() instead
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
should be an identifier expression. Use array() instead
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(a_empty) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
should be an identifier expression. Use array() instead
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
should be an identifier expression. Use array() instead
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(a_mixed) AS col
FROM test_array;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
should be an identifier expression. Use array() instead
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
should be an identifier expression. Use array() instead
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(a_nested) AS col
FROM test_array;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
should be an identifier expression. Use array() instead
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B16_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_array(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
should be an identifier expression. Use array() instead
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(a_bool, '$.') AS col
FROM test_array;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(json_value(a_nested, '$[0]' RETURNING boolean array), '$.') AS col
FROM test_array;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(json_value(a_nested, '$[7][0]' RETURNING boolean array), '$.') AS col
FROM test_array;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(a_int, '$.') AS col
FROM test_array;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(json_value(a_nested, '$[1]' RETURNING bigint array), '$.') AS col
FROM test_array;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(json_value(a_nested, '$[7][1]' RETURNING bigint array), '$.') AS col
FROM test_array;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(a_float, '$.') AS col
FROM test_array;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(json_value(a_nested, '$[2]' RETURNING decimal array), '$.') AS col
FROM test_array;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(json_value(a_nested, '$[7][2]' RETURNING decimal array), '$.') AS col
FROM test_array;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(a_str, '$.') AS col
FROM test_array;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(json_value(a_nested, '$[3]' RETURNING varchar array), '$.') AS col
FROM test_array;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(json_value(a_nested, '$[7][3]' RETURNING varchar array), '$.') AS col
FROM test_array;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(a_null, '$.') AS col
FROM test_array;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(json_value(a_nested, '$[4]' RETURNING varchar array), '$.') AS col
FROM test_array;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(json_value(a_nested, '$[7][4]' RETURNING varchar array), '$.') AS col
FROM test_array;
+-----------+
| col       |
+-----------+
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
| [0, 1, 2] |
+-----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(a_empty, '$.') AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(json_value(a_nested, '$[5]' RETURNING varchar array), '$.') AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(json_value(a_nested, '$[7][5]' RETURNING varchar array), '$.') AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(a_mixed, '$.') AS col
FROM test_array;
+-----------------+
| col             |
+-----------------+
| [0, 1, 2, 3, 4] |
| [0, 1, 2, 3, 4] |
| [0, 1, 2, 3, 4] |
| [0, 1, 2, 3, 4] |
+-----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(json_value(a_nested, '$[6]' RETURNING varchar array), '$.') AS col
FROM test_array;
+-----------------+
| col             |
+-----------------+
| [0, 1, 2, 3, 4] |
| [0, 1, 2, 3, 4] |
| [0, 1, 2, 3, 4] |
| [0, 1, 2, 3, 4] |
+-----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(json_value(a_nested, '$[7][6]' RETURNING varchar array), '$.') AS col
FROM test_array;
+-----------------+
| col             |
+-----------------+
| [0, 1, 2, 3, 4] |
| [0, 1, 2, 3, 4] |
| [0, 1, 2, 3, 4] |
| [0, 1, 2, 3, 4] |
+-----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C22_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(a_nested, '$.') AS col
FROM test_array;
+--------------------------+
| col                      |
+--------------------------+
| [0, 1, 2, 3, 4, 5, 6, 7] |
| [0, 1, 2, 3, 4, 5, 6, 7] |
| [0, 1, 2, 3, 4, 5, 6, 7] |
| [0, 1, 2, 3, 4, 5, 6, 7] |
+--------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(json_value(a_nested, '$[7]' RETURNING varchar array), '$.') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(json_value(a_nested, '$[7][7]' RETURNING varchar array), '$.') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value a_bool) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| {"k":[1,0,null]} |
| {"k":[1,0,null]} |
| {"k":[null,0,1]} |
| {"k":[null,0,1]} |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| {"k":[1,0,null]} |
| {"k":[1,0,null]} |
| {"k":[null,0,1]} |
| {"k":[null,0,1]} |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| {"k":[1,0,null]} |
| {"k":[1,0,null]} |
| {"k":[null,0,1]} |
| {"k":[null,0,1]} |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value a_int) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| {"k":[1,2,null]} |
| {"k":[1,2,null]} |
| {"k":[null,2,1]} |
| {"k":[null,2,1]} |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| {"k":[1,2,null]} |
| {"k":[1,2,null]} |
| {"k":[null,2,1]} |
| {"k":[null,2,1]} |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| {"k":[1,2,null]} |
| {"k":[1,2,null]} |
| {"k":[null,2,1]} |
| {"k":[null,2,1]} |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value a_float) AS col
FROM test_array;
+----------------------+
| col                  |
+----------------------+
| {"k":[0.1,0.2,null]} |
| {"k":[0.1,0.2,null]} |
| {"k":[null,0.2,0.1]} |
| {"k":[null,0.2,0.1]} |
+----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
+----------------------+
| col                  |
+----------------------+
| {"k":[0.1,0.2,null]} |
| {"k":[0.1,0.2,null]} |
| {"k":[null,0.2,0.1]} |
| {"k":[null,0.2,0.1]} |
+----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
+----------------------+
| col                  |
+----------------------+
| {"k":[0.1,0.2,null]} |
| {"k":[0.1,0.2,null]} |
| {"k":[null,0.2,0.1]} |
| {"k":[null,0.2,0.1]} |
+----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value a_str) AS col
FROM test_array;
+------------------------+
| col                    |
+------------------------+
| {"k":["S1","S2",null]} |
| {"k":["S1","S2",null]} |
| {"k":[null,"S2","S1"]} |
| {"k":[null,"S2","S1"]} |
+------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
+------------------------+
| col                    |
+------------------------+
| {"k":["S1","S2",null]} |
| {"k":["S1","S2",null]} |
| {"k":[null,"S2","S1"]} |
| {"k":[null,"S2","S1"]} |
+------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
+------------------------+
| col                    |
+------------------------+
| {"k":["S1","S2",null]} |
| {"k":["S1","S2",null]} |
| {"k":[null,"S2","S1"]} |
| {"k":[null,"S2","S1"]} |
+------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value a_null) AS col
FROM test_array;
+------------------------+
| col                    |
+------------------------+
| {"k":[null,null,null]} |
| {"k":[null,null,null]} |
| {"k":[null,null,null]} |
| {"k":[null,null,null]} |
+------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
+------------------------+
| col                    |
+------------------------+
| {"k":[null,null,null]} |
| {"k":[null,null,null]} |
| {"k":[null,null,null]} |
| {"k":[null,null,null]} |
+------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
+------------------------+
| col                    |
+------------------------+
| {"k":[null,null,null]} |
| {"k":[null,null,null]} |
| {"k":[null,null,null]} |
| {"k":[null,null,null]} |
+------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value a_empty) AS col
FROM test_array;
+----------+
| col      |
+----------+
| {"k":[]} |
| {"k":[]} |
| {"k":[]} |
| {"k":[]} |
+----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
+----------+
| col      |
+----------+
| {"k":[]} |
| {"k":[]} |
| {"k":[]} |
| {"k":[]} |
+----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
+----------+
| col      |
+----------+
| {"k":[]} |
| {"k":[]} |
| {"k":[]} |
| {"k":[]} |
+----------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value a_mixed) AS col
FROM test_array;
+------------------------------------+
| col                                |
+------------------------------------+
| {"k":["true","1","0.1","S1",null]} |
| {"k":["true","1","0.1","S1",null]} |
| {"k":[null,"S1","0.1","1","true"]} |
| {"k":[null,"S1","0.1","1","true"]} |
+------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
+------------------------------------+
| col                                |
+------------------------------------+
| {"k":["true","1","0.1","S1",null]} |
| {"k":["true","1","0.1","S1",null]} |
| {"k":[null,"S1","0.1","1","true"]} |
| {"k":[null,"S1","0.1","1","true"]} |
+------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
+------------------------------------+
| col                                |
+------------------------------------+
| {"k":["true","1","0.1","S1",null]} |
| {"k":["true","1","0.1","S1",null]} |
| {"k":[null,"S1","0.1","1","true"]} |
| {"k":[null,"S1","0.1","1","true"]} |
+------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C22_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value a_nested) AS col
FROM test_array;
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| col                                                                                                                                                                                                                                                                                                                                 |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| {"k":[[null,false,true],[null,2,1],[null,0.2,0.1],[null,"S2","S1"],[null,null,null],[],[null,"S1",0.1,1,true],[[null,false,true],[null,2,1],[null,0.2,0.1],[null,"S2","S1"],[null,null,null],[],[null,"S1",0.1,1,true],[[null,false,true],[null,2,1],[null,0.2,0.1],[null,"S2","S1"],[null,null,null],[],[null,"S1",0.1,1,true]]]]} |
| {"k":[[null,false,true],[null,2,1],[null,0.2,0.1],[null,"S2","S1"],[null,null,null],[],[null,"S1",0.1,1,true],[[null,false,true],[null,2,1],[null,0.2,0.1],[null,"S2","S1"],[null,null,null],[],[null,"S1",0.1,1,true],[[null,false,true],[null,2,1],[null,0.2,0.1],[null,"S2","S1"],[null,null,null],[],[null,"S1",0.1,1,true]]]]} |
| {"k":[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null]]]]} |
| {"k":[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null]]]]} |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
+------------+
| col        |
+------------+
| {"k":null} |
| {"k":null} |
| {"k":null} |
| {"k":null} |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
+------------+
| col        |
+------------+
| {"k":null} |
| {"k":null} |
| {"k":null} |
| {"k":null} |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(a_bool) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(a_int) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(a_float) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(a_str) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(a_null) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(a_empty) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(a_mixed) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C22_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(a_nested) AS col
FROM test_array;
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| col                                                                                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [$[2], $[7][6], $[7][7][3], $[3], $[7][7][2], $[4], $[7][7][5], $[5], $[7][7][4], $[6], $[7][7][6], $[7][0], $[7][1], $[7][2], $[7][3], $[0], $[7][4], $[7][7][1], $[1], $[7][5], $[7][7][0]] |
| [$[2], $[7][6], $[7][7][3], $[3], $[7][7][2], $[4], $[7][7][5], $[5], $[7][7][4], $[6], $[7][7][6], $[7][0], $[7][1], $[7][2], $[7][3], $[0], $[7][4], $[7][7][1], $[1], $[7][5], $[7][7][0]] |
| [$[2], $[7][6], $[7][7][3], $[3], $[7][7][2], $[4], $[7][7][5], $[5], $[7][7][4], $[6], $[7][7][6], $[7][0], $[7][1], $[7][2], $[7][3], $[0], $[7][4], $[7][7][1], $[1], $[7][5], $[7][7][0]] |
| [$[2], $[7][6], $[7][7][3], $[3], $[7][7][2], $[4], $[7][7][5], $[5], $[7][7][4], $[6], $[7][7][6], $[7][0], $[7][1], $[7][2], $[7][3], $[0], $[7][4], $[7][7][1], $[1], $[7][5], $[7][7][0]] |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(a_bool, '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(json_value(a_nested, '$[0]' RETURNING boolean array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(json_value(a_nested, '$[7][0]' RETURNING boolean array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(a_int, '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(json_value(a_nested, '$[1]' RETURNING bigint array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(json_value(a_nested, '$[7][1]' RETURNING bigint array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(a_float, '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(json_value(a_nested, '$[2]' RETURNING decimal array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(json_value(a_nested, '$[7][2]' RETURNING decimal array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(a_str, '$[0]') AS col
FROM test_array;
+------+
| col  |
+------+
| "S1" |
| "S1" |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(json_value(a_nested, '$[3]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+------+
| col  |
+------+
| "S1" |
| "S1" |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(json_value(a_nested, '$[7][3]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+------+
| col  |
+------+
| "S1" |
| "S1" |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(a_null, '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(json_value(a_nested, '$[4]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(json_value(a_nested, '$[7][4]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(a_empty, '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(json_value(a_nested, '$[5]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(json_value(a_nested, '$[7][5]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(a_mixed, '$[0]') AS col
FROM test_array;
+--------+
| col    |
+--------+
| "true" |
| "true" |
|        |
|        |
+--------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(json_value(a_nested, '$[6]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+--------+
| col    |
+--------+
| "true" |
| "true" |
|        |
|        |
+--------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(json_value(a_nested, '$[7][6]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+--------+
| col    |
+--------+
| "true" |
| "true" |
|        |
|        |
+--------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C22_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(a_nested, '$[0]') AS col
FROM test_array;
+-------------------+
| col               |
+-------------------+
| [null,false,true] |
| [null,false,true] |
| [true,false,null] |
| [true,false,null] |
+-------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(json_value(a_nested, '$[7]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(json_value(a_nested, '$[7][7]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_bool, '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(json_value(a_nested, '$[0]' RETURNING boolean array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(json_value(a_nested, '$[7][0]' RETURNING boolean array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_int, '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(json_value(a_nested, '$[1]' RETURNING bigint array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(json_value(a_nested, '$[7][1]' RETURNING bigint array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| 1   |
| 1   |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_float, '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(json_value(a_nested, '$[2]' RETURNING decimal array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(json_value(a_nested, '$[7][2]' RETURNING decimal array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_str, '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(json_value(a_nested, '$[3]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(json_value(a_nested, '$[7][3]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_null, '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(json_value(a_nested, '$[4]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(json_value(a_nested, '$[7][4]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_empty, '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(json_value(a_nested, '$[5]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(json_value(a_nested, '$[7][5]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_mixed, '$[0]') AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(json_value(a_nested, '$[6]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(json_value(a_nested, '$[7][6]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(json_value(a_nested, '$[7]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(json_value(a_nested, '$[7][7]' RETURNING varchar array), '$[0]') AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING parse_json(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING parse_json(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING parse_json(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING parse_json(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING parse_json(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING parse_json(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING parse_json(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING parse_json(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING try_parse_json(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING try_parse_json(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING try_parse_json(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING try_parse_json(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING try_parse_json(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING try_parse_json(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING try_parse_json(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING try_parse_json(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(a_bool) AS col
FROM test_array;
+------------+
| col        |
+------------+
| [1,0,null] |
| [1,0,null] |
| [null,0,1] |
| [null,0,1] |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
+------------+
| col        |
+------------+
| [1,0,null] |
| [1,0,null] |
| [null,0,1] |
| [null,0,1] |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
+------------+
| col        |
+------------+
| [1,0,null] |
| [1,0,null] |
| [null,0,1] |
| [null,0,1] |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(a_int) AS col
FROM test_array;
+------------+
| col        |
+------------+
| [1,2,null] |
| [1,2,null] |
| [null,2,1] |
| [null,2,1] |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
+------------+
| col        |
+------------+
| [1,2,null] |
| [1,2,null] |
| [null,2,1] |
| [null,2,1] |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
+------------+
| col        |
+------------+
| [1,2,null] |
| [1,2,null] |
| [null,2,1] |
| [null,2,1] |
+------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(a_float) AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| [0.1,0.2,null] |
| [0.1,0.2,null] |
| [null,0.2,0.1] |
| [null,0.2,0.1] |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| [0.1,0.2,null] |
| [0.1,0.2,null] |
| [null,0.2,0.1] |
| [null,0.2,0.1] |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| [0.1,0.2,null] |
| [0.1,0.2,null] |
| [null,0.2,0.1] |
| [null,0.2,0.1] |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(a_str) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| ["S1","S2",null] |
| ["S1","S2",null] |
| [null,"S2","S1"] |
| [null,"S2","S1"] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| ["S1","S2",null] |
| ["S1","S2",null] |
| [null,"S2","S1"] |
| [null,"S2","S1"] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| ["S1","S2",null] |
| ["S1","S2",null] |
| [null,"S2","S1"] |
| [null,"S2","S1"] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(a_null) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| [null,null,null] |
| [null,null,null] |
| [null,null,null] |
| [null,null,null] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| [null,null,null] |
| [null,null,null] |
| [null,null,null] |
| [null,null,null] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| [null,null,null] |
| [null,null,null] |
| [null,null,null] |
| [null,null,null] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(a_empty) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| []  |
| []  |
| []  |
| []  |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(a_mixed) AS col
FROM test_array;
+------------------------------+
| col                          |
+------------------------------+
| ["true","1","0.1","S1",null] |
| ["true","1","0.1","S1",null] |
| [null,"S1","0.1","1","true"] |
| [null,"S1","0.1","1","true"] |
+------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
+------------------------------+
| col                          |
+------------------------------+
| ["true","1","0.1","S1",null] |
| ["true","1","0.1","S1",null] |
| [null,"S1","0.1","1","true"] |
| [null,"S1","0.1","1","true"] |
+------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
+------------------------------+
| col                          |
+------------------------------+
| ["true","1","0.1","S1",null] |
| ["true","1","0.1","S1",null] |
| [null,"S1","0.1","1","true"] |
| [null,"S1","0.1","1","true"] |
+------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C22_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(a_nested) AS col
FROM test_array;
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| col                                                                                                                                                                                                                                                                                                                           |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [[null,false,true],[null,2,1],[null,0.2,0.1],[null,"S2","S1"],[null,null,null],[],[null,"S1",0.1,1,true],[[null,false,true],[null,2,1],[null,0.2,0.1],[null,"S2","S1"],[null,null,null],[],[null,"S1",0.1,1,true],[[null,false,true],[null,2,1],[null,0.2,0.1],[null,"S2","S1"],[null,null,null],[],[null,"S1",0.1,1,true]]]] |
| [[null,false,true],[null,2,1],[null,0.2,0.1],[null,"S2","S1"],[null,null,null],[],[null,"S1",0.1,1,true],[[null,false,true],[null,2,1],[null,0.2,0.1],[null,"S2","S1"],[null,null,null],[],[null,"S1",0.1,1,true],[[null,false,true],[null,2,1],[null,0.2,0.1],[null,"S2","S1"],[null,null,null],[],[null,"S1",0.1,1,true]]]] |
| [[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null]]]] |
| [[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null]]]] |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# Total query count 3599 Positive tests: 1104 Negative tests: 2495
#-------------------------------------------------------------------------
