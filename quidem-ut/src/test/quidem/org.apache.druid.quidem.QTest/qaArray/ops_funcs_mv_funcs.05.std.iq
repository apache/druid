!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardComponentSupplier&datasets=sql/src/test/quidem/qatests/qaArray/ops_funcs
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C8_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C9_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C10_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(a_str, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C11_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C12_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C13_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(a_null, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C14_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C15_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C16_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(a_empty, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C17_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C18_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C19_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(a_mixed, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C20_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C21_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C22_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(a_nested, 1) AS col
FROM test_array;
Cannot apply 'MV_ORDINAL_OF' to arguments of type 'MV_ORDINAL_OF(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C23_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C24_D1
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C1_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', a_bool) AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| [null,"1","0",null] |
| [null,"1","0",null] |
| [null,null,"0","1"] |
| [null,null,"0","1"] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C2_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| [null,"1","0",null] |
| [null,"1","0",null] |
| [null,null,"0","1"] |
| [null,null,"0","1"] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C3_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| [null,"1","0",null] |
| [null,"1","0",null] |
| [null,null,"0","1"] |
| [null,null,"0","1"] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C4_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', a_int) AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| [null,"1","2",null] |
| [null,"1","2",null] |
| [null,null,"2","1"] |
| [null,null,"2","1"] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C5_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| [null,"1","2",null] |
| [null,"1","2",null] |
| [null,null,"2","1"] |
| [null,null,"2","1"] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C6_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| [null,"1","2",null] |
| [null,"1","2",null] |
| [null,null,"2","1"] |
| [null,null,"2","1"] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C7_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', a_float) AS col
FROM test_array;
+-------------------------+
| col                     |
+-------------------------+
| [null,"0.1","0.2",null] |
| [null,"0.1","0.2",null] |
| [null,null,"0.2","0.1"] |
| [null,null,"0.2","0.1"] |
+-------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C8_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
+-------------------------+
| col                     |
+-------------------------+
| [null,"0.1","0.2",null] |
| [null,"0.1","0.2",null] |
| [null,null,"0.2","0.1"] |
| [null,null,"0.2","0.1"] |
+-------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C9_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
+-------------------------+
| col                     |
+-------------------------+
| [null,"0.1","0.2",null] |
| [null,"0.1","0.2",null] |
| [null,null,"0.2","0.1"] |
| [null,null,"0.2","0.1"] |
+-------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C10_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', a_str) AS col
FROM test_array;
+----------------------+
| col                  |
+----------------------+
| ["A","S1","S2",null] |
| ["A","S1","S2",null] |
| ["A",null,"S2","S1"] |
| ["A",null,"S2","S1"] |
+----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C11_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
+----------------------+
| col                  |
+----------------------+
| ["A","S1","S2",null] |
| ["A","S1","S2",null] |
| ["A",null,"S2","S1"] |
| ["A",null,"S2","S1"] |
+----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C12_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
+----------------------+
| col                  |
+----------------------+
| ["A","S1","S2",null] |
| ["A","S1","S2",null] |
| ["A",null,"S2","S1"] |
| ["A",null,"S2","S1"] |
+----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C13_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', a_null) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [null,null,null,null] |
| [null,null,null,null] |
| [null,null,null,null] |
| [null,null,null,null] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C14_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
+----------------------+
| col                  |
+----------------------+
| ["A",null,null,null] |
| ["A",null,null,null] |
| ["A",null,null,null] |
| ["A",null,null,null] |
+----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C15_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
+----------------------+
| col                  |
+----------------------+
| ["A",null,null,null] |
| ["A",null,null,null] |
| ["A",null,null,null] |
| ["A",null,null,null] |
+----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C16_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', a_empty) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C17_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| A   |
| A   |
| A   |
| A   |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C18_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| A   |
| A   |
| A   |
| A   |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C19_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', a_mixed) AS col
FROM test_array;
+----------------------------------+
| col                              |
+----------------------------------+
| ["A","true","1","0.1","S1",null] |
| ["A","true","1","0.1","S1",null] |
| ["A",null,"S1","0.1","1","true"] |
| ["A",null,"S1","0.1","1","true"] |
+----------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C20_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
+----------------------------------+
| col                              |
+----------------------------------+
| ["A","true","1","0.1","S1",null] |
| ["A","true","1","0.1","S1",null] |
| ["A",null,"S1","0.1","1","true"] |
| ["A",null,"S1","0.1","1","true"] |
+----------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C21_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
+----------------------------------+
| col                              |
+----------------------------------+
| ["A","true","1","0.1","S1",null] |
| ["A","true","1","0.1","S1",null] |
| ["A",null,"S1","0.1","1","true"] |
| ["A",null,"S1","0.1","1","true"] |
+----------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C22_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', a_nested) AS col
FROM test_array;
Cannot apply 'MV_PREPEND' to arguments of type 'MV_PREPEND(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C23_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C24_D1
#-------------------------------------------------------------------------
SELECT mv_prepend('A', json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C1_D1
#-------------------------------------------------------------------------
SELECT mv_append(a_bool, 'A') AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| ["1","0",null,null] |
| ["1","0",null,null] |
| [null,"0","1",null] |
| [null,"0","1",null] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C2_D1
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[0]' RETURNING boolean array), 'A') AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| ["1","0",null,null] |
| ["1","0",null,null] |
| [null,"0","1",null] |
| [null,"0","1",null] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C3_D1
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[7][0]' RETURNING boolean array), 'A') AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| ["1","0",null,null] |
| ["1","0",null,null] |
| [null,"0","1",null] |
| [null,"0","1",null] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C4_D1
#-------------------------------------------------------------------------
SELECT mv_append(a_int, 'A') AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| ["1","2",null,null] |
| ["1","2",null,null] |
| [null,"2","1",null] |
| [null,"2","1",null] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C5_D1
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[1]' RETURNING bigint array), 'A') AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| ["1","2",null,null] |
| ["1","2",null,null] |
| [null,"2","1",null] |
| [null,"2","1",null] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C6_D1
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[7][1]' RETURNING bigint array), 'A') AS col
FROM test_array;
+---------------------+
| col                 |
+---------------------+
| ["1","2",null,null] |
| ["1","2",null,null] |
| [null,"2","1",null] |
| [null,"2","1",null] |
+---------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C7_D1
#-------------------------------------------------------------------------
SELECT mv_append(a_float, 'A') AS col
FROM test_array;
+-------------------------+
| col                     |
+-------------------------+
| ["0.1","0.2",null,null] |
| ["0.1","0.2",null,null] |
| [null,"0.2","0.1",null] |
| [null,"0.2","0.1",null] |
+-------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C8_D1
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[2]' RETURNING decimal array), 'A') AS col
FROM test_array;
+-------------------------+
| col                     |
+-------------------------+
| ["0.1","0.2",null,null] |
| ["0.1","0.2",null,null] |
| [null,"0.2","0.1",null] |
| [null,"0.2","0.1",null] |
+-------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C9_D1
#-------------------------------------------------------------------------
SELECT mv_append(json_value(a_nested, '$[7][2]' RETURNING decimal array), 'A') AS col
FROM test_array;
+-------------------------+
| col                     |
+-------------------------+
| ["0.1","0.2",null,null] |
| ["0.1","0.2",null,null] |
| [null,"0.2","0.1",null] |
| [null,"0.2","0.1",null] |
+-------------------------+
(4 rows)

!ok

