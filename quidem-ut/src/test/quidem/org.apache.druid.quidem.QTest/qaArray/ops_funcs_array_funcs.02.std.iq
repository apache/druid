!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardComponentSupplier&datasets=sql/src/test/quidem/qatests/qaArray/ops_funcs
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C17_D1
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[5]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C18_D1
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[7][5]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C19_D1
#-------------------------------------------------------------------------
SELECT array_offset(a_mixed, 0) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C20_D1
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[6]' RETURNING varchar array), 0) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C21_D1
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[7][6]' RETURNING varchar array), 0) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C22_D1
#-------------------------------------------------------------------------
SELECT array_offset(a_nested, 0) AS col
FROM test_array;
Cannot apply 'ARRAY_OFFSET' to arguments of type 'ARRAY_OFFSET(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C23_D1
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[7]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C24_D1
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[7][7]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C1_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(a_bool, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C2_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C3_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C4_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(a_int, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C5_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C6_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C7_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(a_float, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C8_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C9_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C10_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(a_str, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C11_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C12_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C13_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(a_null, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C14_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C15_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C16_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(a_empty, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C17_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C18_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C19_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(a_mixed, 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C20_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C21_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C22_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(a_nested, 1) AS col
FROM test_array;
Cannot apply 'ARRAY_ORDINAL' to arguments of type 'ARRAY_ORDINAL(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C23_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C24_D1
#-------------------------------------------------------------------------
SELECT array_ordinal(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C1_D1
#-------------------------------------------------------------------------
SELECT array_contains(a_bool, 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C2_D1
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C3_D1
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C4_D1
#-------------------------------------------------------------------------
SELECT array_contains(a_int, 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C5_D1
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C6_D1
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C7_D1
#-------------------------------------------------------------------------
SELECT array_contains(a_float, 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C8_D1
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C9_D1
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C10_D1
#-------------------------------------------------------------------------
SELECT array_contains(a_str, 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C11_D1
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C12_D1
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C13_D1
#-------------------------------------------------------------------------
SELECT array_contains(a_null, 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C14_D1
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C15_D1
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C16_D1
#-------------------------------------------------------------------------
SELECT array_contains(a_empty, 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C17_D1
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C18_D1
#-------------------------------------------------------------------------
SELECT array_contains(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
+-------+
(4 rows)

!ok

