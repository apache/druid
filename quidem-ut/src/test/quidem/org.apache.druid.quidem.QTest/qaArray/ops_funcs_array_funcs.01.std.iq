!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardComponentSupplier&datasets=sql/src/test/quidem/qatests/qaArray/ops_funcs
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: SEL_DATASOURCE
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM test_array;
+-----+
| cnt |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C2_D1
#-------------------------------------------------------------------------
SELECT ARRAY[1,
             2,
             NULL] AS col
FROM test_array;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [1, 2, null] |
| [1, 2, null] |
| [1, 2, null] |
+--------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C3_D1
#-------------------------------------------------------------------------
SELECT ARRAY[0.1,
             0.2,
             NULL] AS col
FROM test_array;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [0.1, 0.2, null] |
| [0.1, 0.2, null] |
| [0.1, 0.2, null] |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C4_D1
#-------------------------------------------------------------------------
SELECT ARRAY['S1',
             'S2',
             NULL] AS col
FROM test_array;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [S1, S2, null] |
| [S1, S2, null] |
| [S1, S2, null] |
+----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C6_D1
#-------------------------------------------------------------------------
SELECT ARRAY[] AS col
FROM test_array;
Require at least 1 argument
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C7_D1
#-------------------------------------------------------------------------
SELECT ARRAY[TRUE,
             1,
             0.1,
             'S1',
             NULL,[]] AS col
FROM test_array;
unexpected token
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C8_D1
#-------------------------------------------------------------------------
SELECT ARRAY[TRUE,
             1,
             0.1,
             'S1',
             NULL] AS col
FROM test_array;
Parameters must be of the same type
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C9_D1
#-------------------------------------------------------------------------
SELECT ARRAY['true',
             '1',
             '0.1',
             'S1',
             'null'] AS col
FROM test_array;
+--------------------------+
| col                      |
+--------------------------+
| [true, 1, 0.1, S1, null] |
| [true, 1, 0.1, S1, null] |
| [true, 1, 0.1, S1, null] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C10_D1
#-------------------------------------------------------------------------
SELECT ARRAY[[1,2,3],
             [1,2,3]] AS col
FROM test_array;
unexpected token
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C11_D1
#-------------------------------------------------------------------------
SELECT ARRAY[ARRAY[1,
                   2,
                   3],ARRAY[1,
                            2,
                            3]] AS col
FROM test_array;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C1_D1
#-------------------------------------------------------------------------
SELECT array_length(a_bool) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C2_D1
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C3_D1
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C4_D1
#-------------------------------------------------------------------------
SELECT array_length(a_int) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C5_D1
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C6_D1
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C7_D1
#-------------------------------------------------------------------------
SELECT array_length(a_float) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C8_D1
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C9_D1
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C10_D1
#-------------------------------------------------------------------------
SELECT array_length(a_str) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C11_D1
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C12_D1
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C13_D1
#-------------------------------------------------------------------------
SELECT array_length(a_null) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C14_D1
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C15_D1
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C16_D1
#-------------------------------------------------------------------------
SELECT array_length(a_empty) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C17_D1
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C18_D1
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C19_D1
#-------------------------------------------------------------------------
SELECT array_length(a_mixed) AS col
FROM test_array;
+-----+
| col |
+-----+
|   5 |
|   5 |
|   5 |
|   5 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C20_D1
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   5 |
|   5 |
|   5 |
|   5 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C21_D1
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|   5 |
|   5 |
|   5 |
|   5 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C22_D1
#-------------------------------------------------------------------------
SELECT array_length(a_nested) AS col
FROM test_array;
Cannot apply 'ARRAY_LENGTH' to arguments of type 'ARRAY_LENGTH(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C23_D1
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C24_D1
#-------------------------------------------------------------------------
SELECT array_length(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C1_D1
#-------------------------------------------------------------------------
SELECT array_offset(a_bool, 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C2_D1
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[0]' RETURNING boolean array), 0) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C3_D1
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[7][0]' RETURNING boolean array), 0) AS col
FROM test_array;
+------+
| col  |
+------+
| true |
| true |
|      |
|      |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C4_D1
#-------------------------------------------------------------------------
SELECT array_offset(a_int, 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C5_D1
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[1]' RETURNING bigint array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C6_D1
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[7][1]' RETURNING bigint array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C7_D1
#-------------------------------------------------------------------------
SELECT array_offset(a_float, 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C8_D1
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[2]' RETURNING decimal array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C9_D1
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[7][2]' RETURNING decimal array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| 0.1 |
| 0.1 |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C10_D1
#-------------------------------------------------------------------------
SELECT array_offset(a_str, 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C11_D1
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[3]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C12_D1
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[7][3]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
| S1  |
| S1  |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C13_D1
#-------------------------------------------------------------------------
SELECT array_offset(a_null, 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C14_D1
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[4]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C15_D1
#-------------------------------------------------------------------------
SELECT array_offset(json_value(a_nested, '$[7][4]' RETURNING varchar array), 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C16_D1
#-------------------------------------------------------------------------
SELECT array_offset(a_empty, 0) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

