!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=AllDruidEnginesComponentSupplier&datasets=sql/src/test/quidem/qatests/qaArray/ops_funcs
!set outputformat mysql
#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C21_D1
#-------------------------------------------------------------------------
SELECT array_offset_of(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C22_D1
#-------------------------------------------------------------------------
SELECT array_offset_of(a_nested, 1) AS col
FROM test_array;
Cannot apply 'ARRAY_OFFSET_OF' to arguments of type 'ARRAY_OFFSET_OF(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C23_D1
#-------------------------------------------------------------------------
SELECT array_offset_of(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C24_D1
#-------------------------------------------------------------------------
SELECT array_offset_of(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C1_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(a_bool, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C2_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[0]' RETURNING boolean array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C3_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C4_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(a_int, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C5_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[1]' RETURNING bigint array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C6_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   3 |
|   3 |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C7_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(a_float, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C8_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C9_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C10_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(a_str, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C11_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C12_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C13_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(a_null, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C14_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C15_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C16_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(a_empty, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C17_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C18_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C19_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(a_mixed, 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C20_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[6]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C21_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C22_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(a_nested, 1) AS col
FROM test_array;
Cannot apply 'ARRAY_ORDINAL_OF' to arguments of type 'ARRAY_ORDINAL_OF(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C23_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C24_D1
#-------------------------------------------------------------------------
SELECT array_ordinal_of(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C1_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, a_bool) AS col
FROM test_array;
+-----------------+
| col             |
+-----------------+
| [9, 1, 0, null] |
| [9, 1, 0, null] |
| [9, null, 0, 1] |
| [9, null, 0, 1] |
+-----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C4_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, a_int) AS col
FROM test_array;
+-----------------+
| col             |
+-----------------+
| [9, 1, 2, null] |
| [9, 1, 2, null] |
| [9, null, 2, 1] |
| [9, null, 2, 1] |
+-----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C5_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array;
+-----------------+
| col             |
+-----------------+
| [9, 1, 2, null] |
| [9, 1, 2, null] |
| [9, null, 2, 1] |
| [9, null, 2, 1] |
+-----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C6_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array;
+-----------------+
| col             |
+-----------------+
| [9, 1, 2, null] |
| [9, 1, 2, null] |
| [9, null, 2, 1] |
| [9, null, 2, 1] |
+-----------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C7_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, a_float) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [9.0, 0.1, 0.2, null] |
| [9.0, 0.1, 0.2, null] |
| [9.0, null, 0.2, 0.1] |
| [9.0, null, 0.2, 0.1] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C8_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [9.0, 0.1, 0.2, null] |
| [9.0, 0.1, 0.2, null] |
| [9.0, null, 0.2, 0.1] |
| [9.0, null, 0.2, 0.1] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C9_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [9.0, 0.1, 0.2, null] |
| [9.0, 0.1, 0.2, null] |
| [9.0, null, 0.2, 0.1] |
| [9.0, null, 0.2, 0.1] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C10_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, a_str) AS col
FROM test_array;
+-------------------+
| col               |
+-------------------+
| [9, S1, S2, null] |
| [9, S1, S2, null] |
| [9, null, S2, S1] |
| [9, null, S2, S1] |
+-------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C11_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array;
+-------------------+
| col               |
+-------------------+
| [9, S1, S2, null] |
| [9, S1, S2, null] |
| [9, null, S2, S1] |
| [9, null, S2, S1] |
+-------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C12_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array;
+-------------------+
| col               |
+-------------------+
| [9, S1, S2, null] |
| [9, S1, S2, null] |
| [9, null, S2, S1] |
| [9, null, S2, S1] |
+-------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C13_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, a_null) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [9, null, null, null] |
| [9, null, null, null] |
| [9, null, null, null] |
| [9, null, null, null] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C14_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [9, null, null, null] |
| [9, null, null, null] |
| [9, null, null, null] |
| [9, null, null, null] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C15_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array;
+-----------------------+
| col                   |
+-----------------------+
| [9, null, null, null] |
| [9, null, null, null] |
| [9, null, null, null] |
| [9, null, null, null] |
+-----------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C16_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, a_empty) AS col
FROM test_array;
+-----+
| col |
+-----+
| [9] |
| [9] |
| [9] |
| [9] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C17_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [9] |
| [9] |
| [9] |
| [9] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C18_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
| [9] |
| [9] |
| [9] |
| [9] |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C19_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, a_mixed) AS col
FROM test_array;
+-----------------------------+
| col                         |
+-----------------------------+
| [9, null, S1, 0.1, 1, true] |
| [9, null, S1, 0.1, 1, true] |
| [9, true, 1, 0.1, S1, null] |
| [9, true, 1, 0.1, S1, null] |
+-----------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C20_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array;
+-----------------------------+
| col                         |
+-----------------------------+
| [9, null, S1, 0.1, 1, true] |
| [9, null, S1, 0.1, 1, true] |
| [9, true, 1, 0.1, S1, null] |
| [9, true, 1, 0.1, S1, null] |
+-----------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C21_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array;
+-----------------------------+
| col                         |
+-----------------------------+
| [9, null, S1, 0.1, 1, true] |
| [9, null, S1, 0.1, 1, true] |
| [9, true, 1, 0.1, S1, null] |
| [9, true, 1, 0.1, S1, null] |
+-----------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C22_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, a_nested) AS col
FROM test_array;
Cannot apply 'ARRAY_PREPEND' to arguments of type 'ARRAY_PREPEND(
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C23_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C24_D1
#-------------------------------------------------------------------------
SELECT array_prepend(9, json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array;
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
+-----+
(4 rows)

!ok

