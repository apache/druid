!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/array&numMergeBuffers=3
!set outputformat mysql
SELECT *
FROM test_unnest;
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| __time                  | s_int | s_null | a_bool       | a_int        | a_float          | a_str          | a_null             | a_empty | a_mixed                  | a_nested                                                                                                                                                                                                                                                                                                                      |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 2022-01-01 00:00:00.000 |     1 |        | [1, 0, null] | [1, 2, null] | [0.1, 0.2, null] | [S1, S2, null] | [null, null, null] | []      | [true, 1, 0.1, S1, null] | [[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null]]]] |
| 2022-02-01 00:00:00.000 |     2 |        | [null, 1, 0] | [null, 1, 2] | [null, 0.1, 0.2] | [null, S1, S2] | [null, null, null] | []      | [null, true, 1, 0.1, S1] | [[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"]]]] |
| 2022-03-01 00:00:00.000 |       |        | [0, null, 1] | [2, null, 1] | [0.2, null, 0.1] | [S2, null, S1] | [null, null, null] | []      | [S1, null, true, 1, 0.1] | [[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1]]]] |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING count(*) IN (3);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING count(*) IN (3);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING count(*) IN (3);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING count(*) IN (3);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING count(DISTINCT c) IN (0,
                             1);
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING count(DISTINCT c) IN (0,
                             1);
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING count(DISTINCT c) IN (2);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING count(DISTINCT c) IN (2);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING count(DISTINCT s_int) IN (2);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING count(DISTINCT s_int) IN (2);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING count(DISTINCT s_int) IN (0,
                                 1);
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING count(DISTINCT s_int) IN (0,
                                 1);
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   6 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   6 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   6 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   6 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING sum(c) IN (3,
                  6);
+-----+
| col |
+-----+
|   3 |
|   6 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING sum(c) IN (3,
                  6);
+-----+
| col |
+-----+
|   3 |
|   6 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING sum(c) IN (3);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING sum(c) IN (3);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING sum(s_int) IN (3);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING sum(s_int) IN (3);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING sum(s_int) IN (3,
                      6);
+-----+
| col |
+-----+
|   3 |
|   6 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING sum(s_int) IN (3,
                      6);
+-----+
| col |
+-----+
|   3 |
|   6 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING min(c) IN (1,
                  2);
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING min(c) IN (1,
                  2);
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING min(c) IN (1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING min(c) IN (1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING min(s_int) IN (1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING min(s_int) IN (1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING min(s_int) IN (1,
                      2);
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING min(s_int) IN (1,
                      2);
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING max(c) IN (1,
                  2);
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING max(c) IN (1,
                  2);
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING max(c) IN (2);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING max(c) IN (2);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING max(s_int) IN (2);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING max(s_int) IN (2);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING max(s_int) IN (1,
                      2);
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING max(s_int) IN (1,
                      2);
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING avg(c) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING avg(c) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING avg(c) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING avg(c) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING avg(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING avg(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING avg(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING avg(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING approx_count_distinct(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING approx_count_distinct(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING approx_count_distinct(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING approx_count_distinct(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING approx_count_distinct(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING approx_count_distinct(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING approx_count_distinct(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING approx_count_distinct(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING approx_count_distinct_builtin(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING approx_count_distinct_builtin(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING approx_count_distinct_builtin(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING approx_count_distinct_builtin(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING approx_count_distinct_builtin(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING approx_count_distinct_builtin(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING approx_count_distinct_builtin(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING approx_count_distinct_builtin(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest(s_int, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest(s_int, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest(s_int, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest(s_int, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest_by(c, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest_by(c, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest_by(c, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest_by(c, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest_by(s_int, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest_by(s_int, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest_by(s_int, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest_by(s_int, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest_by(s_int, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest_by(s_int, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest_by(s_int, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest_by(s_int, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest(c, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest(c, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest(c, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest(c, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest(s_int, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest(s_int, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest(s_int, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest(s_int, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest_by(c, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest_by(c, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest_by(c, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest_by(c, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest_by(s_int, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest_by(s_int, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest_by(s_int, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest_by(s_int, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest_by(s_int, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest_by(s_int, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest_by(s_int, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest_by(s_int, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING any_value(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING any_value(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING any_value(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING any_value(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING any_value(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING any_value(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING any_value(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING any_value(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   1 |   3 |  0 |
|   2 |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   1 |   3 |  0 |
|   2 |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C4_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C5_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   1 |   3 |  0 |
|   2 |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   1 |   3 |  0 |
|   2 |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING grouping(c) IS NOT NULL;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   1 |   3 |  0 |
|   2 |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING grouping(c) IS NOT NULL;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   1 |   3 |  0 |
|   2 |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING grouping(c) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C8_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING grouping(c) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING grouping(s_int) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C9_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING grouping(s_int) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING grouping(s_int) IS NOT NULL;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   1 |   3 |  0 |
|   2 |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING grouping(s_int) IS NOT NULL;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   1 |   3 |  0 |
|   2 |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+--------------------------------------+
| col                                  |
+--------------------------------------+
| [1, 2, null, null, 1, 2, 2, null, 1] |
+--------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+--------------------------------------+
| col                                  |
+--------------------------------------+
| [1, 2, null, null, 1, 2, 2, null, 1] |
+--------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+--------------------------------------+
| col                                  |
+--------------------------------------+
| [1, 1, 1, 2, 2, 2, null, null, null] |
+--------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+--------------------------------------+
| col                                  |
+--------------------------------------+
| [1, 1, 1, 2, 2, 2, null, null, null] |
+--------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+--------------------+
| col                |
+--------------------+
| [1, 1, 1]          |
| [2, 2, 2]          |
| [null, null, null] |
+--------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+--------------------+
| col                |
+--------------------+
| [1, 1, 1]          |
| [2, 2, 2]          |
| [null, null, null] |
+--------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [2, null, 1] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [2, null, 1] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [1, 2, null] |
| [1, 2, null] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [1, 2, null] |
| [1, 2, null] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+--------------------+
| col                |
+--------------------+
| [1, 1, 1]          |
| [2, 2, 2]          |
| [null, null, null] |
+--------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+--------------------+
| col                |
+--------------------+
| [1, 1, 1]          |
| [2, 2, 2]          |
| [null, null, null] |
+--------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_agg(c) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [1, 1, 1]          |
| [2, 2, 2]          |
| [null, null, null] |
+--------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_agg(c) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [1, 1, 1]          |
| [2, 2, 2]          |
| [null, null, null] |
+--------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_agg(c) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [2, null, 1] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_agg(c) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [2, null, 1] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_agg(s_int) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [1, 2, null] |
| [1, 2, null] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_agg(s_int) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [1, 2, null] |
| [1, 2, null] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_agg(s_int) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [1, 1, 1]          |
| [2, 2, 2]          |
| [null, null, null] |
+--------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_agg(s_int) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [1, 1, 1]          |
| [2, 2, 2]          |
| [null, null, null] |
+--------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
+--------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
+--------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
+--------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
+--------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [null] |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [null] |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [null] |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [null] |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_agg(DISTINCT c) IS NOT NULL;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [null] |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_agg(DISTINCT c) IS NOT NULL;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [null] |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_agg(DISTINCT c) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_agg(DISTINCT c) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_agg(DISTINCT s_int) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_agg(DISTINCT s_int) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_agg(DISTINCT s_int) IS NOT NULL;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [null] |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_agg(DISTINCT s_int) IS NOT NULL;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [null] |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C3_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C4_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C5_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C6_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(c) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C7_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(c) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(c) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C8_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(c) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(s_int) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C9_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(s_int) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(s_int) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C10_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(s_int) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C3_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C4_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C5_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C6_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(DISTINCT c) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C7_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(DISTINCT c) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(DISTINCT c) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C8_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(DISTINCT c) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(DISTINCT s_int) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C9_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(DISTINCT s_int) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(DISTINCT s_int) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C10_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(DISTINCT s_int) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-------------+
| col         |
+-------------+
| 1|2|1|2|2|1 |
+-------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-------------+
| col         |
+-------------+
| 1|2|1|2|2|1 |
+-------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-------------+
| col         |
+-------------+
| 1|1|1|2|2|2 |
+-------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-------------+
| col         |
+-------------+
| 1|1|1|2|2|2 |
+-------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
|       |
+-------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
|       |
+-------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 2|1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 2|1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
|       |
+-------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
|       |
+-------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(c, '|') IS NOT NULL;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
+-------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(c, '|') IS NOT NULL;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
+-------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING string_agg(c, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 2|1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING string_agg(c, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 2|1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(s_int, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(s_int, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING string_agg(s_int, '|') IS NOT NULL;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
+-------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING string_agg(s_int, '|') IS NOT NULL;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
+-------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
| 1|2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
| 1|2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
| 1|2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
| 1|2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
| 1   |
| 2   |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
| 1   |
| 2   |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
| 1   |
| 2   |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
| 1   |
| 2   |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(DISTINCT c, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1   |
| 2   |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(DISTINCT c, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1   |
| 2   |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING string_agg(DISTINCT c, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING string_agg(DISTINCT c, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(DISTINCT s_int, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(DISTINCT s_int, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING string_agg(DISTINCT s_int, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1   |
| 2   |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING string_agg(DISTINCT s_int, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1   |
| 2   |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   0 |
|   0 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   0 |
|   0 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   0 |
|   0 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   0 |
|   0 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_and(c) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_and(c) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_and(c) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_and(c) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_and(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_and(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_and(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_and(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_or(c) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_or(c) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_or(c) IS NOT NULL;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_or(c) IS NOT NULL;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_or(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_or(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_or(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_or(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_xor(c) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_xor(c) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_xor(c) IS NOT NULL;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_xor(c) IS NOT NULL;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_xor(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_xor(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_xor(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_xor(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[1,
             2,
             3] AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[1,
             2,
             3]<array[99999]);
+-----------+
| col       |
+-----------+
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[1,
             2,
             3] AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[1,
             2,
             3]<array[99999]);
+-----------+
| col       |
+-----------+
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[c,
             c,
             3] AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[c,
             c,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 1, 3]       |
| [1, 1, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [null, null, 3] |
| [null, null, 3] |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[c,
             c,
             3] AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[c,
             c,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 1, 3]       |
| [1, 1, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [null, null, 3] |
| [null, null, 3] |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[c,
             s_int,
             3] AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[c,
             s_int,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 2, 3]       |
| [1, null, 3]    |
| [2, 1, 3]       |
| [2, 2, 3]       |
| [2, null, 3]    |
| [null, 1, 3]    |
| [null, 2, 3]    |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[c,
             s_int,
             3] AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[c,
             s_int,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 2, 3]       |
| [1, null, 3]    |
| [2, 1, 3]       |
| [2, 2, 3]       |
| [2, null, 3]    |
| [null, 1, 3]    |
| [null, 2, 3]    |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[s_int,
             c,
             3] AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[s_int,
             c,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 2, 3]       |
| [1, null, 3]    |
| [2, 1, 3]       |
| [2, 2, 3]       |
| [2, null, 3]    |
| [null, 1, 3]    |
| [null, 2, 3]    |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[s_int,
             c,
             3] AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[s_int,
             c,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 2, 3]       |
| [1, null, 3]    |
| [2, 1, 3]       |
| [2, 2, 3]       |
| [2, null, 3]    |
| [null, 1, 3]    |
| [null, 2, 3]    |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[s_int,
             s_int,
             3] AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[s_int,
             s_int,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 1, 3]       |
| [1, 1, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [null, null, 3] |
| [null, null, 3] |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[s_int,
             s_int,
             3] AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[s_int,
             s_int,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 1, 3]       |
| [1, 1, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [null, null, 3] |
| [null, null, 3] |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(c)<99999
       OR array_length(c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(c)<99999
       OR array_length(c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(s_int)<99999
       OR array_length(s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(s_int)<99999
       OR array_length(s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[c, c, 3])<99999
       OR array_length(array[c, c, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[c, c, 3])<99999
       OR array_length(array[c, c, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[s_int, c, 3])<99999
       OR array_length(array[s_int, c, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[s_int, c, 3])<99999
       OR array_length(array[s_int, c, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[c, s_int, 3])<99999
       OR array_length(array[c, s_int, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[c, s_int, 3])<99999
       OR array_length(array[c, s_int, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[s_int, s_int, 3])<99999
       OR array_length(array[s_int, s_int, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[s_int, s_int, 3])<99999
       OR array_length(array[s_int, s_int, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(c, 0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(c, 0)<99999
       OR array_offset(c, 0) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(c, 0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(c, 0)<99999
       OR array_offset(c, 0) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(s_int, 0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(s_int, 0)<99999
       OR array_offset(s_int, 0) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(s_int, 0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(s_int, 0)<99999
       OR array_offset(s_int, 0) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(array[c, c, 3],0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[c, c, 3],0)<99999
       OR array_offset(array[c, c, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(array[c, c, 3],0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[c, c, 3],0)<99999
       OR array_offset(array[c, c, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(array[s_int, c, 3],0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[s_int, c, 3],0)<99999
       OR array_offset(array[s_int, c, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(array[s_int, c, 3],0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[s_int, c, 3],0)<99999
       OR array_offset(array[s_int, c, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(array[c, s_int, 3],0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[c, s_int, 3],0)<99999
       OR array_offset(array[c, s_int, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(array[c, s_int, 3],0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[c, s_int, 3],0)<99999
       OR array_offset(array[c, s_int, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(array[s_int, s_int, 3],0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[s_int, s_int, 3],0)<99999
       OR array_offset(array[s_int, s_int, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(array[s_int, s_int, 3],0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[s_int, s_int, 3],0)<99999
       OR array_offset(array[s_int, s_int, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(c, 1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(c, 1)<99999
       OR array_ordinal(c, 1) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(c, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(c, 1)<99999
       OR array_ordinal(c, 1) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(s_int, 1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(s_int, 1)<99999
       OR array_ordinal(s_int, 1) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(s_int, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(s_int, 1)<99999
       OR array_ordinal(s_int, 1) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(array[c, c, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[c, c, 3],1)<99999
       OR array_ordinal(array[c, c, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(array[c, c, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[c, c, 3],1)<99999
       OR array_ordinal(array[c, c, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(array[s_int, c, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[s_int, c, 3],1)<99999
       OR array_ordinal(array[s_int, c, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(array[s_int, c, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[s_int, c, 3],1)<99999
       OR array_ordinal(array[s_int, c, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(array[c, s_int, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[c, s_int, 3],1)<99999
       OR array_ordinal(array[c, s_int, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(array[c, s_int, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[c, s_int, 3],1)<99999
       OR array_ordinal(array[c, s_int, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(array[s_int, s_int, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[s_int, s_int, 3],1)<99999
       OR array_ordinal(array[s_int, s_int, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(array[s_int, s_int, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[s_int, s_int, 3],1)<99999
       OR array_ordinal(array[s_int, s_int, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(c,array[1, 2, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(c,array[1, 2, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(c,array[1, 2, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(c,array[1, 2, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(s_int,array[1, 2, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(s_int,array[1, 2, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(s_int,array[1, 2, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(s_int,array[1, 2, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, c, 3],c) IS NOT NULL);
Invalid expression
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C3_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, c, 3],c) IS NOT NULL);
Invalid expression
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, c, 3],s_int) IS NOT NULL);
Invalid expression
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C4_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, c, 3],s_int) IS NOT NULL);
Invalid expression
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, s_int, 3],c) IS NOT NULL);
Invalid expression
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C5_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, s_int, 3],c) IS NOT NULL);
Invalid expression
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, s_int, 3],s_int) IS NOT NULL);
Invalid expression
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C6_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, s_int, 3],s_int) IS NOT NULL);
Invalid expression
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, c, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, c, 3],1) IS NOT NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, c, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, c, 3],1) IS NOT NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, c, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, c, 3],1) IS NOT NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, c, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, c, 3],1) IS NOT NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, s_int, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, s_int, 3],1) IS NOT NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, s_int, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, s_int, 3],1) IS NOT NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, s_int, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, s_int, 3],1) IS NOT NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, s_int, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, s_int, 3],1) IS NOT NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, c, 3],array[c, c, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C11_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, c, 3],array[c, c, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, c, 3],array[s_int, c, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C12_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, c, 3],array[s_int, c, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, s_int, 3],array[c, s_int, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C13_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, s_int, 3],array[c, s_int, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C14_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(c, s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(c, s_int) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(c, s_int) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(s_int, c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(s_int, c) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(s_int, c) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[c, c, 3],c) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C3_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[c, c, 3],c) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[s_int, c, 3],s_int) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C4_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[s_int, c, 3],s_int) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[c, s_int, 3],c) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C5_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[c, s_int, 3],c) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[s_int, s_int, 3],s_int) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C6_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[s_int, s_int, 3],s_int) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(c,array[c, c, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C7_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(c,array[c, c, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(s_int,array[s_int, c, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C8_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(s_int,array[s_int, c, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(c,array[c, s_int, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C9_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(c,array[c, s_int, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(s_int,array[s_int, s_int, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C10_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(s_int,array[s_int, s_int, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[c, c, 3],array[c, c, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C11_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[c, c, 3],array[c, c, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[s_int, c, 3],array[s_int, c, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C12_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[s_int, c, 3],array[s_int, c, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[c, s_int, 3],array[c, s_int, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C13_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[c, s_int, 3],array[c, s_int, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C14_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(c, s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(c, s_int)<99999
       OR array_offset_of(c, s_int) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(c, s_int)<99999
       OR array_offset_of(c, s_int) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(s_int, c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(s_int, c)<99999
       OR array_offset_of(s_int, c) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(s_int, c)<99999
       OR array_offset_of(s_int, c) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, c, 3],c)<99999
       OR array_offset_of(array[c, c, 3],c) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, c, 3],c)<99999
       OR array_offset_of(array[c, c, 3],c) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, c, 3],s_int)<99999
       OR array_offset_of(array[s_int, c, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, c, 3],s_int)<99999
       OR array_offset_of(array[s_int, c, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, s_int, 3],c)<99999
       OR array_offset_of(array[c, s_int, 3],c) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, s_int, 3],c)<99999
       OR array_offset_of(array[c, s_int, 3],c) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, s_int, 3],s_int)<99999
       OR array_offset_of(array[s_int, s_int, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, s_int, 3],s_int)<99999
       OR array_offset_of(array[s_int, s_int, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(c,array[c, c, 3])<99999
       OR array_offset_of(c,array[c, c, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C7_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(c,array[c, c, 3])<99999
       OR array_offset_of(c,array[c, c, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(s_int,array[s_int, c, 3])<99999
       OR array_offset_of(s_int,array[s_int, c, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C8_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(s_int,array[s_int, c, 3])<99999
       OR array_offset_of(s_int,array[s_int, c, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(c,array[c, s_int, 3])<99999
       OR array_offset_of(c,array[c, s_int, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C9_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(c,array[c, s_int, 3])<99999
       OR array_offset_of(c,array[c, s_int, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(s_int,array[s_int, s_int, 3])<99999
       OR array_offset_of(s_int,array[s_int, s_int, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C10_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(s_int,array[s_int, s_int, 3])<99999
       OR array_offset_of(s_int,array[s_int, s_int, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, c, 3],array[c, c, 3])<99999
       OR array_offset_of(array[c, c, 3],array[c, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C11_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, c, 3],array[c, c, 3])<99999
       OR array_offset_of(array[c, c, 3],array[c, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, c, 3],array[s_int, c, 3])<99999
       OR array_offset_of(array[s_int, c, 3],array[s_int, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C12_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, c, 3],array[s_int, c, 3])<99999
       OR array_offset_of(array[s_int, c, 3],array[s_int, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, s_int, 3],array[c, s_int, 3])<99999
       OR array_offset_of(array[c, s_int, 3],array[c, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C13_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, s_int, 3],array[c, s_int, 3])<99999
       OR array_offset_of(array[c, s_int, 3],array[c, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, s_int, 3],array[s_int, s_int, 3])<99999
       OR array_offset_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C14_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, s_int, 3],array[s_int, s_int, 3])<99999
       OR array_offset_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c, s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(c, s_int)<99999
       OR array_ordinal_of(c, s_int) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(c, s_int)<99999
       OR array_ordinal_of(c, s_int) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(s_int, c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(s_int, c)<99999
       OR array_ordinal_of(s_int, c) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(s_int, c)<99999
       OR array_ordinal_of(s_int, c) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, c, 3],c)<99999
       OR array_ordinal_of(array[c, c, 3],c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, c, 3],c)<99999
       OR array_ordinal_of(array[c, c, 3],c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, c, 3],s_int)<99999
       OR array_ordinal_of(array[s_int, c, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, c, 3],s_int)<99999
       OR array_ordinal_of(array[s_int, c, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, s_int, 3],c)<99999
       OR array_ordinal_of(array[c, s_int, 3],c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, s_int, 3],c)<99999
       OR array_ordinal_of(array[c, s_int, 3],c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, s_int, 3],s_int)<99999
       OR array_ordinal_of(array[s_int, s_int, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, s_int, 3],s_int)<99999
       OR array_ordinal_of(array[s_int, s_int, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(c,array[c, c, 3])<99999
       OR array_ordinal_of(c,array[c, c, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C7_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(c,array[c, c, 3])<99999
       OR array_ordinal_of(c,array[c, c, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(s_int,array[s_int, c, 3])<99999
       OR array_ordinal_of(s_int,array[s_int, c, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C8_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(s_int,array[s_int, c, 3])<99999
       OR array_ordinal_of(s_int,array[s_int, c, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(c,array[c, s_int, 3])<99999
       OR array_ordinal_of(c,array[c, s_int, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C9_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(c,array[c, s_int, 3])<99999
       OR array_ordinal_of(c,array[c, s_int, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(s_int,array[s_int, s_int, 3])<99999
       OR array_ordinal_of(s_int,array[s_int, s_int, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C10_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(s_int,array[s_int, s_int, 3])<99999
       OR array_ordinal_of(s_int,array[s_int, s_int, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, c, 3],array[c, c, 3])<99999
       OR array_ordinal_of(array[c, c, 3],array[c, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C11_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, c, 3],array[c, c, 3])<99999
       OR array_ordinal_of(array[c, c, 3],array[c, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, c, 3],array[s_int, c, 3])<99999
       OR array_ordinal_of(array[s_int, c, 3],array[s_int, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C12_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, c, 3],array[s_int, c, 3])<99999
       OR array_ordinal_of(array[s_int, c, 3],array[s_int, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, s_int, 3],array[c, s_int, 3])<99999
       OR array_ordinal_of(array[c, s_int, 3],array[c, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C13_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, s_int, 3],array[c, s_int, 3])<99999
       OR array_ordinal_of(array[c, s_int, 3],array[c, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, s_int, 3],array[s_int, s_int, 3])<99999
       OR array_ordinal_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C14_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, s_int, 3],array[s_int, s_int, 3])<99999
       OR array_ordinal_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(c, s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(c, s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(c, s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(s_int, c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(s_int, c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(s_int, c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, c, 3],c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C3_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, c, 3],c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, c, 3],s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C4_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, c, 3],s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, s_int, 3],c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C5_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, s_int, 3],c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, s_int, 3],s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C6_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, s_int, 3],s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(c,array[c, c, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [null, null, null, 3] |
| [null, null, null, 3] |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(c,array[c, c, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [null, null, null, 3] |
| [null, null, null, 3] |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(s_int,array[s_int, c, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 2, 3]          |
| [1, 1, null, 3]       |
| [2, 2, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, null, 3]       |
| [null, null, 1, 3]    |
| [null, null, 2, 3]    |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(s_int,array[s_int, c, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 2, 3]          |
| [1, 1, null, 3]       |
| [2, 2, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, null, 3]       |
| [null, null, 1, 3]    |
| [null, null, 2, 3]    |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(c,array[c, s_int, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 2, 3]          |
| [1, 1, null, 3]       |
| [2, 2, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, null, 3]       |
| [null, null, 1, 3]    |
| [null, null, 2, 3]    |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(c,array[c, s_int, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 2, 3]          |
| [1, 1, null, 3]       |
| [2, 2, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, null, 3]       |
| [null, null, 1, 3]    |
| [null, null, 2, 3]    |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(s_int,array[s_int, s_int, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [null, null, null, 3] |
| [null, null, null, 3] |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(s_int,array[s_int, s_int, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [null, null, null, 3] |
| [null, null, null, 3] |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, c, 3],array[c, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C11_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, c, 3],array[c, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, c, 3],array[s_int, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C12_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, c, 3],array[s_int, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, s_int, 3],array[c, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C13_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, s_int, 3],array[c, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, s_int, 3],array[s_int, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C14_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, s_int, 3],array[s_int, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(c, s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(c, s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(c, s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(s_int, c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(s_int, c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(s_int, c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, c, 3],c)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [null, null, 3, null] |
| [null, null, 3, null] |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, c, 3],c)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [null, null, 3, null] |
| [null, null, 3, null] |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, c, 3],s_int)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 2, 3, 1]          |
| [1, null, 3, 1]       |
| [2, 1, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, null, 3, 2]       |
| [null, 1, 3, null]    |
| [null, 2, 3, null]    |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, c, 3],s_int)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 2, 3, 1]          |
| [1, null, 3, 1]       |
| [2, 1, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, null, 3, 2]       |
| [null, 1, 3, null]    |
| [null, 2, 3, null]    |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, s_int, 3],c)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 2, 3, 1]          |
| [1, null, 3, 1]       |
| [2, 1, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, null, 3, 2]       |
| [null, 1, 3, null]    |
| [null, 2, 3, null]    |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, s_int, 3],c)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 2, 3, 1]          |
| [1, null, 3, 1]       |
| [2, 1, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, null, 3, 2]       |
| [null, 1, 3, null]    |
| [null, 2, 3, null]    |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, s_int, 3],s_int)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [null, null, 3, null] |
| [null, null, 3, null] |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, s_int, 3],s_int)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [null, null, 3, null] |
| [null, null, 3, null] |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(c,array[c, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C7_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(c,array[c, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(s_int,array[s_int, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C8_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(s_int,array[s_int, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(c,array[c, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C9_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(c,array[c, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(s_int,array[s_int, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C10_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(s_int,array[s_int, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, c, 3],array[c, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C11_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, c, 3],array[c, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, c, 3],array[s_int, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C12_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, c, 3],array[s_int, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, s_int, 3],array[c, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C13_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, s_int, 3],array[c, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, s_int, 3],array[s_int, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C14_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, s_int, 3],array[s_int, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(c, s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(c, s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(c, s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(s_int, c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(s_int, c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(s_int, c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[c, c, 3],c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C3_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[c, c, 3],c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[s_int, c, 3],s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C4_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[s_int, c, 3],s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[c, s_int, 3],c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C5_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[c, s_int, 3],c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[s_int, s_int, 3],s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C6_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[s_int, s_int, 3],s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(c,array[c, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C7_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(c,array[c, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(s_int,array[s_int, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C8_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(s_int,array[s_int, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(c,array[c, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C9_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(c,array[c, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(s_int,array[s_int, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C10_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(s_int,array[s_int, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[c, c, 3],array[c, c, 3])<ARRAY[99999]);
+--------------------------------+
| col                            |
+--------------------------------+
| [1, 1, 3, 1, 1, 3]             |
| [1, 1, 3, 1, 1, 3]             |
| [1, 1, 3, 1, 1, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [null, null, 3, null, null, 3] |
| [null, null, 3, null, null, 3] |
| [null, null, 3, null, null, 3] |
+--------------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C11_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[c, c, 3],array[c, c, 3])<ARRAY[99999]);
+--------------------------------+
| col                            |
+--------------------------------+
| [1, 1, 3, 1, 1, 3]             |
| [1, 1, 3, 1, 1, 3]             |
| [1, 1, 3, 1, 1, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [null, null, 3, null, null, 3] |
| [null, null, 3, null, null, 3] |
| [null, null, 3, null, null, 3] |
+--------------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[s_int, c, 3],array[s_int, c, 3])<ARRAY[99999]);
+--------------------------------+
| col                            |
+--------------------------------+
| [1, 1, 3, 1, 1, 3]             |
| [1, 2, 3, 1, 2, 3]             |
| [1, null, 3, 1, null, 3]       |
| [2, 1, 3, 2, 1, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, null, 3, 2, null, 3]       |
| [null, 1, 3, null, 1, 3]       |
| [null, 2, 3, null, 2, 3]       |
| [null, null, 3, null, null, 3] |
+--------------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C12_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[s_int, c, 3],array[s_int, c, 3])<ARRAY[99999]);
+--------------------------------+
| col                            |
+--------------------------------+
| [1, 1, 3, 1, 1, 3]             |
| [1, 2, 3, 1, 2, 3]             |
| [1, null, 3, 1, null, 3]       |
| [2, 1, 3, 2, 1, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, null, 3, 2, null, 3]       |
| [null, 1, 3, null, 1, 3]       |
| [null, 2, 3, null, 2, 3]       |
| [null, null, 3, null, null, 3] |
+--------------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[c, s_int, 3],array[c, s_int, 3])<ARRAY[99999]);
+--------------------------------+
| col                            |
+--------------------------------+
| [1, 1, 3, 1, 1, 3]             |
| [1, 2, 3, 1, 2, 3]             |
| [1, null, 3, 1, null, 3]       |
| [2, 1, 3, 2, 1, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, null, 3, 2, null, 3]       |
| [null, 1, 3, null, 1, 3]       |
| [null, 2, 3, null, 2, 3]       |
| [null, null, 3, null, null, 3] |
+--------------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C13_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[c, s_int, 3],array[c, s_int, 3])<ARRAY[99999]);
+--------------------------------+
| col                            |
+--------------------------------+
| [1, 1, 3, 1, 1, 3]             |
| [1, 2, 3, 1, 2, 3]             |
| [1, null, 3, 1, null, 3]       |
| [2, 1, 3, 2, 1, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, null, 3, 2, null, 3]       |
| [null, 1, 3, null, 1, 3]       |
| [null, 2, 3, null, 2, 3]       |
| [null, null, 3, null, null, 3] |
+--------------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[s_int, s_int, 3],array[s_int, s_int, 3])<ARRAY[99999]);
+--------------------------------+
| col                            |
+--------------------------------+
| [1, 1, 3, 1, 1, 3]             |
| [1, 1, 3, 1, 1, 3]             |
| [1, 1, 3, 1, 1, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [null, null, 3, null, null, 3] |
| [null, null, 3, null, null, 3] |
| [null, null, 3, null, null, 3] |
+--------------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C14_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[s_int, s_int, 3],array[s_int, s_int, 3])<ARRAY[99999]);
+--------------------------------+
| col                            |
+--------------------------------+
| [1, 1, 3, 1, 1, 3]             |
| [1, 1, 3, 1, 1, 3]             |
| [1, 1, 3, 1, 1, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [null, null, 3, null, null, 3] |
| [null, null, 3, null, null, 3] |
| [null, null, 3, null, null, 3] |
+--------------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(c, 1, 2) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(c, 1, 2)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(c, 1, 2) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(c, 1, 2)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(s_int, 1, 2) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(s_int, 1, 2)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(s_int, 1, 2) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(s_int, 1, 2)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(array[c, c, 3],1, 2) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(array[c, c, 3],1, 2)<ARRAY[99999]);
+--------+
| col    |
+--------+
| [1]    |
| [1]    |
| [1]    |
| [2]    |
| [2]    |
| [2]    |
| [null] |
| [null] |
| [null] |
+--------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(array[c, c, 3],1, 2) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(array[c, c, 3],1, 2)<ARRAY[99999]);
+--------+
| col    |
+--------+
| [1]    |
| [1]    |
| [1]    |
| [2]    |
| [2]    |
| [2]    |
| [null] |
| [null] |
| [null] |
+--------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(array[s_int, c, 3],1, 2) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(array[s_int, c, 3],1, 2)<ARRAY[99999]);
+--------+
| col    |
+--------+
| [1]    |
| [1]    |
| [1]    |
| [2]    |
| [2]    |
| [2]    |
| [null] |
| [null] |
| [null] |
+--------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(array[s_int, c, 3],1, 2) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(array[s_int, c, 3],1, 2)<ARRAY[99999]);
+--------+
| col    |
+--------+
| [1]    |
| [1]    |
| [1]    |
| [2]    |
| [2]    |
| [2]    |
| [null] |
| [null] |
| [null] |
+--------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(array[c, s_int, 3],1, 2) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(array[c, s_int, 3],1, 2)<ARRAY[99999]);
+--------+
| col    |
+--------+
| [1]    |
| [1]    |
| [1]    |
| [2]    |
| [2]    |
| [2]    |
| [null] |
| [null] |
| [null] |
+--------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(array[c, s_int, 3],1, 2) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(array[c, s_int, 3],1, 2)<ARRAY[99999]);
+--------+
| col    |
+--------+
| [1]    |
| [1]    |
| [1]    |
| [2]    |
| [2]    |
| [2]    |
| [null] |
| [null] |
| [null] |
+--------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(array[s_int, s_int, 3],1, 2) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(array[s_int, s_int, 3],1, 2)<ARRAY[99999]);
+--------+
| col    |
+--------+
| [1]    |
| [1]    |
| [1]    |
| [2]    |
| [2]    |
| [2]    |
| [null] |
| [null] |
| [null] |
+--------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(array[s_int, s_int, 3],1, 2) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(array[s_int, s_int, 3],1, 2)<ARRAY[99999]);
+--------+
| col    |
+--------+
| [1]    |
| [1]    |
| [1]    |
| [2]    |
| [2]    |
| [2]    |
| [null] |
| [null] |
| [null] |
+--------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(c, '|')<'0'
       OR array_to_string(c, '|')>'0');
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(c, '|')<'0'
       OR array_to_string(c, '|')>'0');
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(s_int, '|')<'0'
       OR array_to_string(s_int, '|')>'0');
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(s_int, '|')<'0'
       OR array_to_string(s_int, '|')>'0');
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(array[c, c, 3],'|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(array[c, c, 3],'|')<'0'
       OR array_to_string(array[c, c, 3],'|')>'0');
+-------------+
| col         |
+-------------+
| 1|1|3       |
| 1|1|3       |
| 1|1|3       |
| 2|2|3       |
| 2|2|3       |
| 2|2|3       |
| null|null|3 |
| null|null|3 |
| null|null|3 |
+-------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(array[c, c, 3],'|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(array[c, c, 3],'|')<'0'
       OR array_to_string(array[c, c, 3],'|')>'0');
+-------------+
| col         |
+-------------+
| 1|1|3       |
| 1|1|3       |
| 1|1|3       |
| 2|2|3       |
| 2|2|3       |
| 2|2|3       |
| null|null|3 |
| null|null|3 |
| null|null|3 |
+-------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(array[s_int, c, 3],'|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(array[s_int, c, 3],'|')<'0'
       OR array_to_string(array[s_int, c, 3],'|')>'0');
+-------------+
| col         |
+-------------+
| 1|1|3       |
| 1|2|3       |
| 1|null|3    |
| 2|1|3       |
| 2|2|3       |
| 2|null|3    |
| null|1|3    |
| null|2|3    |
| null|null|3 |
+-------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(array[s_int, c, 3],'|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(array[s_int, c, 3],'|')<'0'
       OR array_to_string(array[s_int, c, 3],'|')>'0');
+-------------+
| col         |
+-------------+
| 1|1|3       |
| 1|2|3       |
| 1|null|3    |
| 2|1|3       |
| 2|2|3       |
| 2|null|3    |
| null|1|3    |
| null|2|3    |
| null|null|3 |
+-------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(array[c, s_int, 3],'|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(array[c, s_int, 3],'|')<'0'
       OR array_to_string(array[c, s_int, 3],'|')>'0');
+-------------+
| col         |
+-------------+
| 1|1|3       |
| 1|2|3       |
| 1|null|3    |
| 2|1|3       |
| 2|2|3       |
| 2|null|3    |
| null|1|3    |
| null|2|3    |
| null|null|3 |
+-------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(array[c, s_int, 3],'|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(array[c, s_int, 3],'|')<'0'
       OR array_to_string(array[c, s_int, 3],'|')>'0');
+-------------+
| col         |
+-------------+
| 1|1|3       |
| 1|2|3       |
| 1|null|3    |
| 2|1|3       |
| 2|2|3       |
| 2|null|3    |
| null|1|3    |
| null|2|3    |
| null|null|3 |
+-------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(array[s_int, s_int, 3],'|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(array[s_int, s_int, 3],'|')<'0'
       OR array_to_string(array[s_int, s_int, 3],'|')>'0');
+-------------+
| col         |
+-------------+
| 1|1|3       |
| 1|1|3       |
| 1|1|3       |
| 2|2|3       |
| 2|2|3       |
| 2|2|3       |
| null|null|3 |
| null|null|3 |
| null|null|3 |
+-------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(array[s_int, s_int, 3],'|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(array[s_int, s_int, 3],'|')<'0'
       OR array_to_string(array[s_int, s_int, 3],'|')>'0');
+-------------+
| col         |
+-------------+
| 1|1|3       |
| 1|1|3       |
| 1|1|3       |
| 2|2|3       |
| 2|2|3       |
| 2|2|3       |
| null|null|3 |
| null|null|3 |
| null|null|3 |
+-------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(c, ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(c, '|')<ARRAY['99999']
       OR string_to_array(c, ',') IS NULL);
+-----+
| col |
+-----+
| [1] |
| [1] |
| [1] |
| [2] |
| [2] |
| [2] |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(c, ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(c, '|')<ARRAY['99999']
       OR string_to_array(c, ',') IS NULL);
+-----+
| col |
+-----+
| [1] |
| [1] |
| [1] |
| [2] |
| [2] |
| [2] |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(s_int, ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(s_int, '|')<ARRAY['99999']
       OR string_to_array(s_int, ',') IS NULL);
+-----+
| col |
+-----+
| [1] |
| [1] |
| [1] |
| [2] |
| [2] |
| [2] |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(s_int, ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(s_int, '|')<ARRAY['99999']
       OR string_to_array(s_int, ',') IS NULL);
+-----+
| col |
+-----+
| [1] |
| [1] |
| [1] |
| [2] |
| [2] |
| [2] |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(c||','||c||','||3, ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(c||','||c||','||3, '|')<ARRAY['99999']
       OR string_to_array(c||','||c||','||3, ',') IS NULL);
+-----------+
| col       |
+-----------+
| [1, 1, 3] |
| [1, 1, 3] |
| [1, 1, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(c||','||c||','||3, ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(c||','||c||','||3, '|')<ARRAY['99999']
       OR string_to_array(c||','||c||','||3, ',') IS NULL);
+-----------+
| col       |
+-----------+
| [1, 1, 3] |
| [1, 1, 3] |
| [1, 1, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(s_int||','||c||','||3, ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(s_int||','||c||','||3, ',')<ARRAY['99999']
       OR string_to_array(s_int||','||c||','||3, ',') IS NULL);
+-----------+
| col       |
+-----------+
| [1, 1, 3] |
| [1, 2, 3] |
| [2, 1, 3] |
| [2, 2, 3] |
|           |
|           |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(s_int||','||c||','||3, ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(s_int||','||c||','||3, ',')<ARRAY['99999']
       OR string_to_array(s_int||','||c||','||3, ',') IS NULL);
+-----------+
| col       |
+-----------+
| [1, 1, 3] |
| [1, 2, 3] |
| [2, 1, 3] |
| [2, 2, 3] |
|           |
|           |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(c||','||s_int||','||3, ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(c||','||s_int||','||3, ',')<ARRAY['99999']
       OR string_to_array(c||','||s_int||','||3, ',') IS NULL);
+-----------+
| col       |
+-----------+
| [1, 1, 3] |
| [1, 2, 3] |
| [2, 1, 3] |
| [2, 2, 3] |
|           |
|           |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(c||','||s_int||','||3, ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(c||','||s_int||','||3, ',')<ARRAY['99999']
       OR string_to_array(c||','||s_int||','||3, ',') IS NULL);
+-----------+
| col       |
+-----------+
| [1, 1, 3] |
| [1, 2, 3] |
| [2, 1, 3] |
| [2, 2, 3] |
|           |
|           |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(s_int||','||s_int||','||3, ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(s_int||','||s_int||','||3, ',')<ARRAY['99999']
       OR string_to_array(s_int||','||s_int||','||3, ',') IS NULL);
+-----------+
| col       |
+-----------+
| [1, 1, 3] |
| [1, 1, 3] |
| [1, 1, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(s_int||','||s_int||','||3, ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(s_int||','||s_int||','||3, ',')<ARRAY['99999']
       OR string_to_array(s_int||','||s_int||','||3, ',') IS NULL);
+-----------+
| col       |
+-----------+
| [1, 1, 3] |
| [1, 1, 3] |
| [1, 1, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_mv(c) IS NOT NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_mv(c) IS NOT NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_mv(s_int) IS NOT NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_mv(s_int) IS NOT NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(string_to_mv('1,2,3', ','), array['2', '3', '4']) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_filter_only(string_to_mv('1,2,3', ','), array['2', '3', '4']) IS NOT NULL
       OR mv_filter_only(string_to_mv('1,2,3', ','), array['2', '3', '4']) IS NULL);
+-----------+
| col       |
+-----------+
| ["2","3"] |
| ["2","3"] |
| ["2","3"] |
| ["2","3"] |
| ["2","3"] |
| ["2","3"] |
| ["2","3"] |
| ["2","3"] |
| ["2","3"] |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(string_to_mv('1,2,3', ','), array['2', '3', '4']) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_filter_only(string_to_mv('1,2,3', ','), array['2', '3', '4']) IS NOT NULL
       OR mv_filter_only(string_to_mv('1,2,3', ','), array['2', '3', '4']) IS NULL);
+-----------+
| col       |
+-----------+
| ["2","3"] |
| ["2","3"] |
| ["2","3"] |
| ["2","3"] |
| ["2","3"] |
| ["2","3"] |
| ["2","3"] |
| ["2","3"] |
| ["2","3"] |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(string_to_mv(cast(c AS char), ','), array['2', '3', '4']) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_filter_only(cast(c AS char),array['2', '3', '4']) IS NOT NULL
       OR mv_filter_only(cast(c AS char),array['2', '3', '4']) IS NULL);
+-----+
| col |
+-----+
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(string_to_mv(cast(c AS char), ','), array['2', '3', '4']) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_filter_only(cast(c AS char),array['2', '3', '4']) IS NOT NULL
       OR mv_filter_only(cast(c AS char),array['2', '3', '4']) IS NULL);
+-----+
| col |
+-----+
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(string_to_mv(cast(s_int AS char), ','), array['2', '3', '4']) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_filter_only(cast(s_int AS char),array['2', '3', '4']) IS NOT NULL
       OR mv_filter_only(cast(s_int AS char),array['2', '3', '4']) IS NULL);
+-----+
| col |
+-----+
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B1_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_only(string_to_mv(cast(s_int AS char), ','), array['2', '3', '4']) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_filter_only(cast(s_int AS char),array['2', '3', '4']) IS NOT NULL
       OR mv_filter_only(cast(s_int AS char),array['2', '3', '4']) IS NULL);
+-----+
| col |
+-----+
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(string_to_mv('1,2,3', ','), array['2', '3', '4']) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_filter_none(string_to_mv('1,2,3', ','), array['2', '3', '4']) IS NOT NULL
       OR mv_filter_none(string_to_mv('1,2,3', ','), array['2', '3', '4']) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(string_to_mv('1,2,3', ','), array['2', '3', '4']) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_filter_none(string_to_mv('1,2,3', ','), array['2', '3', '4']) IS NOT NULL
       OR mv_filter_none(string_to_mv('1,2,3', ','), array['2', '3', '4']) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
| 1   |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(string_to_mv(cast(c AS char), ','), array['2', '3', '4']) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_filter_none(cast(c AS char),array['2', '3', '4']) IS NOT NULL
       OR mv_filter_none(cast(c AS char),array['2', '3', '4']) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(string_to_mv(cast(c AS char), ','), array['2', '3', '4']) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_filter_none(cast(c AS char),array['2', '3', '4']) IS NOT NULL
       OR mv_filter_none(cast(c AS char),array['2', '3', '4']) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(string_to_mv(cast(s_int AS char), ','), array['2', '3', '4']) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_filter_none(cast(s_int AS char),array['2', '3', '4']) IS NOT NULL
       OR mv_filter_none(cast(s_int AS char),array['2', '3', '4']) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B2_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_filter_none(string_to_mv(cast(s_int AS char), ','), array['2', '3', '4']) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_filter_none(cast(s_int AS char),array['2', '3', '4']) IS NOT NULL
       OR mv_filter_none(cast(s_int AS char),array['2', '3', '4']) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_length(cast(c AS char))<99999
       OR mv_length(cast(c AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_length(cast(c AS char))<99999
       OR mv_length(cast(c AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_length(cast(s_int AS char))<99999
       OR mv_length(cast(s_int AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B3_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_length(cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_length(cast(s_int AS char))<99999
       OR mv_length(cast(s_int AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(cast(c AS char), 0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_offset(cast(c AS char), 0)<'99999'
       OR mv_offset(cast(c AS char), 0) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(cast(c AS char), 0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_offset(cast(c AS char), 0)<'99999'
       OR mv_offset(cast(c AS char), 0) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(cast(s_int AS char), 0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_offset(cast(s_int AS char), 0)<'99999'
       OR mv_offset(cast(s_int AS char), 0) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B4_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset(cast(s_int AS char), 0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_offset(cast(s_int AS char), 0)<'99999'
       OR mv_offset(cast(s_int AS char), 0) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(cast(c AS char), 1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_ordinal(cast(c AS char), 1)<'99999'
       OR mv_ordinal(cast(c AS char), 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(cast(c AS char), 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_ordinal(cast(c AS char), 1)<'99999'
       OR mv_ordinal(cast(c AS char), 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(cast(s_int AS char), 1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_ordinal(cast(s_int AS char), 1)<'99999'
       OR mv_ordinal(cast(s_int AS char), 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B5_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal(cast(s_int AS char), 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_ordinal(cast(s_int AS char), 1)<'99999'
       OR mv_ordinal(cast(s_int AS char), 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_contains(cast(c AS char), cast(c AS char)) IS TRUE
       OR mv_contains(cast(c AS char), cast(c AS char)) IS FALSE
       OR mv_contains(cast(c AS char), cast(c AS char)) IS NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_contains(cast(c AS char), cast(c AS char)) IS TRUE
       OR mv_contains(cast(c AS char), cast(c AS char)) IS FALSE
       OR mv_contains(cast(c AS char), cast(c AS char)) IS NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_contains(cast(c AS char), cast(s_int AS char)) IS TRUE
       OR mv_contains(cast(c AS char), cast(s_int AS char)) IS FALSE
       OR mv_contains(cast(c AS char), cast(s_int AS char)) IS NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_contains(cast(c AS char), cast(s_int AS char)) IS TRUE
       OR mv_contains(cast(c AS char), cast(s_int AS char)) IS FALSE
       OR mv_contains(cast(c AS char), cast(s_int AS char)) IS NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_contains(cast(s_int AS char), cast(c AS char)) IS TRUE
       OR mv_contains(cast(s_int AS char), cast(c AS char)) IS FALSE
       OR mv_contains(cast(s_int AS char), cast(c AS char)) IS NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_contains(cast(s_int AS char), cast(c AS char)) IS TRUE
       OR mv_contains(cast(s_int AS char), cast(c AS char)) IS FALSE
       OR mv_contains(cast(s_int AS char), cast(c AS char)) IS NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_contains(cast(s_int AS char), cast(s_int AS char)) IS TRUE
       OR mv_contains(cast(s_int AS char), cast(s_int AS char)) IS FALSE
       OR mv_contains(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B6_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_contains(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_contains(cast(s_int AS char), cast(s_int AS char)) IS TRUE
       OR mv_contains(cast(s_int AS char), cast(s_int AS char)) IS FALSE
       OR mv_contains(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_overlap(cast(c AS char), cast(c AS char)) IS TRUE
       OR mv_overlap(cast(c AS char), cast(c AS char)) IS FALSE
       OR mv_overlap(cast(c AS char), cast(c AS char)) IS NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| true  |
| true  |
| true  |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_overlap(cast(c AS char), cast(c AS char)) IS TRUE
       OR mv_overlap(cast(c AS char), cast(c AS char)) IS FALSE
       OR mv_overlap(cast(c AS char), cast(c AS char)) IS NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| true  |
| true  |
| true  |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_overlap(cast(c AS char), cast(s_int AS char)) IS TRUE
       OR mv_overlap(cast(c AS char), cast(s_int AS char)) IS FALSE
       OR mv_overlap(cast(c AS char), cast(s_int AS char)) IS NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_overlap(cast(c AS char), cast(s_int AS char)) IS TRUE
       OR mv_overlap(cast(c AS char), cast(s_int AS char)) IS FALSE
       OR mv_overlap(cast(c AS char), cast(s_int AS char)) IS NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_overlap(cast(s_int AS char), cast(c AS char)) IS TRUE
       OR mv_overlap(cast(s_int AS char), cast(c AS char)) IS FALSE
       OR mv_overlap(cast(s_int AS char), cast(c AS char)) IS NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_overlap(cast(s_int AS char), cast(c AS char)) IS TRUE
       OR mv_overlap(cast(s_int AS char), cast(c AS char)) IS FALSE
       OR mv_overlap(cast(s_int AS char), cast(c AS char)) IS NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_overlap(cast(s_int AS char), cast(s_int AS char)) IS TRUE
       OR mv_overlap(cast(s_int AS char), cast(s_int AS char)) IS FALSE
       OR mv_overlap(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| true  |
| true  |
| true  |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B7_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_overlap(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_overlap(cast(s_int AS char), cast(s_int AS char)) IS TRUE
       OR mv_overlap(cast(s_int AS char), cast(s_int AS char)) IS FALSE
       OR mv_overlap(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| true  |
| true  |
| true  |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_offset_of(cast(c AS char), cast(c AS char)) IS NOT NULL
       OR mv_offset_of(cast(c AS char), cast(c AS char)) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_offset_of(cast(c AS char), cast(c AS char)) IS NOT NULL
       OR mv_offset_of(cast(c AS char), cast(c AS char)) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_offset_of(cast(c AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_offset_of(cast(c AS char), cast(s_int AS char)) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_offset_of(cast(c AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_offset_of(cast(c AS char), cast(s_int AS char)) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_offset_of(cast(s_int AS char), cast(c AS char)) IS NOT NULL
       OR mv_offset_of(cast(s_int AS char), cast(c AS char)) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_offset_of(cast(s_int AS char), cast(c AS char)) IS NOT NULL
       OR mv_offset_of(cast(s_int AS char), cast(c AS char)) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_offset_of(cast(s_int AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_offset_of(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B8_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_offset_of(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_offset_of(cast(s_int AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_offset_of(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_ordinal_of(cast(c AS char), cast(c AS char)) IS NOT NULL
       OR mv_ordinal_of(cast(c AS char), cast(c AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_ordinal_of(cast(c AS char), cast(c AS char)) IS NOT NULL
       OR mv_ordinal_of(cast(c AS char), cast(c AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_ordinal_of(cast(c AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_ordinal_of(cast(c AS char), cast(s_int AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_ordinal_of(cast(c AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_ordinal_of(cast(c AS char), cast(s_int AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_ordinal_of(cast(s_int AS char), cast(c AS char)) IS NOT NULL
       OR mv_ordinal_of(cast(s_int AS char), cast(c AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_ordinal_of(cast(s_int AS char), cast(c AS char)) IS NOT NULL
       OR mv_ordinal_of(cast(s_int AS char), cast(c AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_ordinal_of(cast(s_int AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_ordinal_of(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B9_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_ordinal_of(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_ordinal_of(cast(s_int AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_ordinal_of(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_prepend(cast(c AS char), cast(c AS char)) IS NOT NULL
       OR mv_prepend(cast(c AS char), cast(c AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_prepend(cast(c AS char), cast(c AS char)) IS NOT NULL
       OR mv_prepend(cast(c AS char), cast(c AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_prepend(cast(c AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_prepend(cast(c AS char), cast(s_int AS char)) IS NULL);
+------------+
| col        |
+------------+
| ["1","1"]  |
| ["1","2"]  |
| ["2","1"]  |
| ["2","2"]  |
| [null,"1"] |
| [null,"2"] |
|            |
|            |
|            |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_prepend(cast(c AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_prepend(cast(c AS char), cast(s_int AS char)) IS NULL);
+------------+
| col        |
+------------+
| ["1","1"]  |
| ["1","2"]  |
| ["2","1"]  |
| ["2","2"]  |
| [null,"1"] |
| [null,"2"] |
|            |
|            |
|            |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_prepend(cast(s_int AS char), cast(c AS char)) IS NOT NULL
       OR mv_prepend(cast(s_int AS char), cast(c AS char)) IS NULL);
+------------+
| col        |
+------------+
| ["1","1"]  |
| ["1","2"]  |
| ["2","1"]  |
| ["2","2"]  |
| [null,"1"] |
| [null,"2"] |
|            |
|            |
|            |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_prepend(cast(s_int AS char), cast(c AS char)) IS NOT NULL
       OR mv_prepend(cast(s_int AS char), cast(c AS char)) IS NULL);
+------------+
| col        |
+------------+
| ["1","1"]  |
| ["1","2"]  |
| ["2","1"]  |
| ["2","2"]  |
| [null,"1"] |
| [null,"2"] |
|            |
|            |
|            |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_prepend(cast(s_int AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_prepend(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B10_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_prepend(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_prepend(cast(s_int AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_prepend(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_append(cast(c AS char), cast(c AS char)) IS NOT NULL
       OR mv_append(cast(c AS char), cast(c AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_append(cast(c AS char), cast(c AS char)) IS NOT NULL
       OR mv_append(cast(c AS char), cast(c AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_append(cast(c AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_append(cast(c AS char), cast(s_int AS char)) IS NULL);
+------------+
| col        |
+------------+
| ["1","1"]  |
| ["1","2"]  |
| ["1",null] |
| ["2","1"]  |
| ["2","2"]  |
| ["2",null] |
|            |
|            |
|            |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_append(cast(c AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_append(cast(c AS char), cast(s_int AS char)) IS NULL);
+------------+
| col        |
+------------+
| ["1","1"]  |
| ["1","2"]  |
| ["1",null] |
| ["2","1"]  |
| ["2","2"]  |
| ["2",null] |
|            |
|            |
|            |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_append(cast(s_int AS char), cast(c AS char)) IS NOT NULL
       OR mv_append(cast(s_int AS char), cast(c AS char)) IS NULL);
+------------+
| col        |
+------------+
| ["1","1"]  |
| ["1","2"]  |
| ["1",null] |
| ["2","1"]  |
| ["2","2"]  |
| ["2",null] |
|            |
|            |
|            |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_append(cast(s_int AS char), cast(c AS char)) IS NOT NULL
       OR mv_append(cast(s_int AS char), cast(c AS char)) IS NULL);
+------------+
| col        |
+------------+
| ["1","1"]  |
| ["1","2"]  |
| ["1",null] |
| ["2","1"]  |
| ["2","2"]  |
| ["2",null] |
|            |
|            |
|            |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_append(cast(s_int AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_append(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B11_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_append(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_append(cast(s_int AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_append(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_concat(cast(c AS char), cast(c AS char)) IS NOT NULL
       OR mv_concat(cast(c AS char), cast(c AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_concat(cast(c AS char), cast(c AS char)) IS NOT NULL
       OR mv_concat(cast(c AS char), cast(c AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_concat(cast(c AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_concat(cast(c AS char), cast(s_int AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","2"] |
| ["2","1"] |
| ["2","2"] |
|           |
|           |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_concat(cast(c AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_concat(cast(c AS char), cast(s_int AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","2"] |
| ["2","1"] |
| ["2","2"] |
|           |
|           |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_concat(cast(s_int AS char), cast(c AS char)) IS NOT NULL
       OR mv_concat(cast(s_int AS char), cast(c AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","2"] |
| ["2","1"] |
| ["2","2"] |
|           |
|           |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_concat(cast(s_int AS char), cast(c AS char)) IS NOT NULL
       OR mv_concat(cast(s_int AS char), cast(c AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","2"] |
| ["2","1"] |
| ["2","2"] |
|           |
|           |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_concat(cast(s_int AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_concat(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B12_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_concat(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_concat(cast(s_int AS char), cast(s_int AS char)) IS NOT NULL
       OR mv_concat(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-----------+
| col       |
+-----------+
| ["1","1"] |
| ["1","1"] |
| ["1","1"] |
| ["2","2"] |
| ["2","2"] |
| ["2","2"] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(cast(c AS char), 0, 1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_slice(cast(c AS char), 0, 1) IS NOT NULL
       OR mv_slice(cast(c AS char), 0, 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(cast(c AS char), 0, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_slice(cast(c AS char), 0, 1) IS NOT NULL
       OR mv_slice(cast(c AS char), 0, 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(cast(s_int AS char), 0, 1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_slice(cast(s_int AS char), 0, 1) IS NOT NULL
       OR mv_slice(cast(s_int AS char), 0, 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B13_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_slice(cast(s_int AS char), 0, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_slice(cast(s_int AS char), 0, 1) IS NOT NULL
       OR mv_slice(cast(s_int AS char), 0, 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(cast(c AS char), ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_to_string(cast(c AS char), ',') IS NOT NULL
       OR mv_to_string(cast(c AS char), ',') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(cast(c AS char), ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_to_string(cast(c AS char), ',') IS NOT NULL
       OR mv_to_string(cast(c AS char), ',') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(cast(s_int AS char), ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_to_string(cast(s_int AS char), ',') IS NOT NULL
       OR mv_to_string(cast(s_int AS char), ',') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B14_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mv_to_string(cast(s_int AS char), ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mv_to_string(cast(s_int AS char), ',') IS NOT NULL
       OR mv_to_string(cast(s_int AS char), ',') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(cast(c AS char), ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_mv(cast(c AS char), ',') IS NOT NULL
       OR string_to_mv(cast(c AS char), ',') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(cast(c AS char), ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_mv(cast(c AS char), ',') IS NOT NULL
       OR string_to_mv(cast(c AS char), ',') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(cast(s_int AS char), ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_mv(cast(s_int AS char), ',') IS NOT NULL
       OR string_to_mv(cast(s_int AS char), ',') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_mv_funcs TEST_ID: A1_B15_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_mv(cast(s_int AS char), ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_mv(cast(s_int AS char), ',') IS NOT NULL
       OR string_to_mv(cast(s_int AS char), ',') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(c, '$.') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_keys(c, '$.') IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(c, '$.') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_keys(c, '$.') IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(s_int, '$.') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_keys(s_int, '$.') IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B1_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_keys(s_int, '$.') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_keys(s_int, '$.') IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_object(KEY 'k' value c) IS NOT NULL);
+------------+
| col        |
+------------+
| {"k":1}    |
| {"k":1}    |
| {"k":1}    |
| {"k":2}    |
| {"k":2}    |
| {"k":2}    |
| {"k":null} |
| {"k":null} |
| {"k":null} |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_object(KEY 'k' value c) IS NOT NULL);
+------------+
| col        |
+------------+
| {"k":1}    |
| {"k":1}    |
| {"k":1}    |
| {"k":2}    |
| {"k":2}    |
| {"k":2}    |
| {"k":null} |
| {"k":null} |
| {"k":null} |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_object(KEY 'k' value s_int) IS NOT NULL);
+------------+
| col        |
+------------+
| {"k":1}    |
| {"k":1}    |
| {"k":1}    |
| {"k":2}    |
| {"k":2}    |
| {"k":2}    |
| {"k":null} |
| {"k":null} |
| {"k":null} |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B2_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_object(KEY 'k' value s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_object(KEY 'k' value s_int) IS NOT NULL);
+------------+
| col        |
+------------+
| {"k":1}    |
| {"k":1}    |
| {"k":1}    |
| {"k":2}    |
| {"k":2}    |
| {"k":2}    |
| {"k":null} |
| {"k":null} |
| {"k":null} |
+------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_paths(c) IS NOT NULL);
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_paths(c) IS NOT NULL);
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_paths(s_int) IS NOT NULL);
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B3_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_paths(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_paths(s_int) IS NOT NULL);
+-----+
| col |
+-----+
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
| [$] |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(c, '$.') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_query(c, '$.') IS NOT NULL
       OR json_query(c, '$.') IS NULL);
java.lang.IllegalArgumentException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(c, '$.') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_query(c, '$.') IS NOT NULL
       OR json_query(c, '$.') IS NULL);
java.lang.IllegalArgumentException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(s_int, '$.') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_query(s_int, '$.') IS NOT NULL
       OR json_query(s_int, '$.') IS NULL);
java.lang.IllegalArgumentException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B4_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(s_int, '$.') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_query(s_int, '$.') IS NOT NULL
       OR json_query(s_int, '$.') IS NULL);
java.lang.IllegalArgumentException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(c, '$.') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_value(c, '$.') IS NOT NULL
       OR json_value(c, '$.') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(c, '$.') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_value(c, '$.') IS NOT NULL
       OR json_value(c, '$.') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(s_int, '$.') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_value(s_int, '$.') IS NOT NULL
       OR json_value(s_int, '$.') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B5_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(s_int, '$.') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (json_value(s_int, '$.') IS NOT NULL
       OR json_value(s_int, '$.') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (parse_json(cast(c AS char)) IS NOT NULL
       OR parse_json(cast(c AS char)) IS NULL);
java.lang.IllegalArgumentException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (parse_json(cast(c AS char)) IS NOT NULL
       OR parse_json(cast(c AS char)) IS NULL);
java.lang.IllegalArgumentException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (parse_json(cast(s_int AS char)) IS NOT NULL
       OR parse_json(cast(s_int AS char)) IS NULL);
java.lang.IllegalArgumentException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B6_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (parse_json(cast(s_int AS char)) IS NOT NULL
       OR parse_json(cast(s_int AS char)) IS NULL);
java.lang.IllegalArgumentException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(cast(c AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (try_parse_json(cast(c AS char)) IS NOT NULL
       OR try_parse_json(cast(c AS char)) IS NULL);
java.lang.IllegalArgumentException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (try_parse_json(cast(c AS char)) IS NOT NULL
       OR try_parse_json(cast(c AS char)) IS NULL);
java.lang.IllegalArgumentException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (try_parse_json(cast(s_int AS char)) IS NOT NULL
       OR try_parse_json(cast(s_int AS char)) IS NULL);
java.lang.IllegalArgumentException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B7_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT try_parse_json(cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (try_parse_json(cast(s_int AS char)) IS NOT NULL
       OR try_parse_json(cast(s_int AS char)) IS NULL);
java.lang.IllegalArgumentException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (to_json_string(c) IS NOT NULL
       OR to_json_string(c) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (to_json_string(c) IS NOT NULL
       OR to_json_string(c) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (to_json_string(s_int) IS NOT NULL
       OR to_json_string(s_int) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_json_funcs TEST_ID: A1_B8_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT to_json_string(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (to_json_string(s_int) IS NOT NULL
       OR to_json_string(s_int) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# Total query count 937 Positive tests: 725 Negative tests: 212
#-------------------------------------------------------------------------
