!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/array&numMergeBuffers=3
!set outputformat mysql
SELECT *
FROM test_unnest;
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| __time                  | s_int | s_null | a_bool       | a_int        | a_float          | a_str          | a_null             | a_empty | a_mixed                  | a_nested                                                                                                                                                                                                                                                                                                                      |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 2022-01-01 00:00:00.000 |     1 |        | [1, 0, null] | [1, 2, null] | [0.1, 0.2, null] | [S1, S2, null] | [null, null, null] | []      | [true, 1, 0.1, S1, null] | [[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null]]]] |
| 2022-02-01 00:00:00.000 |     2 |        | [null, 1, 0] | [null, 1, 2] | [null, 0.1, 0.2] | [null, S1, S2] | [null, null, null] | []      | [null, true, 1, 0.1, S1] | [[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"]]]] |
| 2022-03-01 00:00:00.000 |       |        | [0, null, 1] | [2, null, 1] | [0.2, null, 0.1] | [S2, null, S1] | [null, null, null] | []      | [S1, null, true, 1, 0.1] | [[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1]]]] |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B1_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT pi+pi AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((pi+pi)<99999
       OR (pi+pi) IS NULL);
+-------------------+
| col               |
+-------------------+
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
| 6.283185307179586 |
+-------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B1_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT pi AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (pi<99999
       OR pi IS NULL);
+-------------------+
| col               |
+-------------------+
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
+-------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B2_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT abs(c)+abs(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((abs(c)+abs(c))<99999
       OR (abs(c)+abs(c)) IS NULL);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   4 |
|   4 |
|   4 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B2_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT abs(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (abs(c+c)<99999
       OR abs(c+c) IS NULL);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   4 |
|   4 |
|   4 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B2_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT abs(c)+abs(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((abs(c)+abs(s_int))<99999
       OR (abs(c)+abs(s_int)) IS NULL);
+-----+
| col |
+-----+
|   2 |
|   3 |
|   3 |
|   4 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B2_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT abs(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((abs(c)+abs(s_int))<99999
       OR (abs(c)+abs(s_int)) IS NULL);
+-----+
| col |
+-----+
|   2 |
|   3 |
|   3 |
|   4 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B3_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(c)+ceil(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((ceil(c)+ceil(c))<99999
       OR (ceil(c)+ceil(c)) IS NULL);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   4 |
|   4 |
|   4 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B3_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (ceil(c+c)<99999
       OR ceil(c+c) IS NULL);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   4 |
|   4 |
|   4 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B3_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(c)+ceil(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((ceil(c)+ceil(s_int))<99999
       OR (ceil(c)+ceil(s_int)) IS NULL);
+-----+
| col |
+-----+
|   2 |
|   3 |
|   3 |
|   4 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B3_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (ceil(c+s_int)<99999
       OR ceil(c+s_int) IS NULL);
+-----+
| col |
+-----+
|   2 |
|   3 |
|   3 |
|   4 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B4_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT exp(c)+exp(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((exp(c)+exp(c))<99999
       OR (exp(c)+exp(c)) IS NULL);
+------------------+
| col              |
+------------------+
| 14.7781121978613 |
| 14.7781121978613 |
| 14.7781121978613 |
| 5.43656365691809 |
| 5.43656365691809 |
| 5.43656365691809 |
|                  |
|                  |
|                  |
+------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B4_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT exp(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (exp(c+c)<99999
       OR exp(c+c) IS NULL);
+--------------------+
| col                |
+--------------------+
| 54.598150033144236 |
| 54.598150033144236 |
| 54.598150033144236 |
|   7.38905609893065 |
|   7.38905609893065 |
|   7.38905609893065 |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B4_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT exp(c)+exp(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((exp(c)+exp(s_int))<99999
       OR (exp(c)+exp(s_int)) IS NULL);
+--------------------+
| col                |
+--------------------+
| 10.107337927389695 |
| 10.107337927389695 |
|   14.7781121978613 |
|   5.43656365691809 |
|                    |
|                    |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B4_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT exp(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (exp(c+s_int)<99999
       OR exp(c+s_int) IS NULL);
+--------------------+
| col                |
+--------------------+
| 20.085536923187668 |
| 20.085536923187668 |
| 54.598150033144236 |
|   7.38905609893065 |
|                    |
|                    |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B5_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT floor(c)+floor(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((floor(c)+floor(c))<99999
       OR (floor(c)+floor(c)) IS NULL);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   4 |
|   4 |
|   4 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B5_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT floor(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (floor(c+c)<99999
       OR floor(c+c) IS NULL);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   4 |
|   4 |
|   4 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B5_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT floor(c)+floor(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((floor(c)+floor(s_int))<99999
       OR (floor(c)+floor(s_int)) IS NULL);
+-----+
| col |
+-----+
|   2 |
|   3 |
|   3 |
|   4 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A3_B5_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT floor(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (floor(c+s_int)<99999
       OR floor(c+s_int)<99999 IS NULL);
+-----+
| col |
+-----+
|   2 |
|   3 |
|   3 |
|   4 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B6_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ln(c)+ln(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((ln(c)+ln(c))<99999
       OR (ln(c)+ln(c)) IS NULL);
+--------------------+
| col                |
+--------------------+
|                0.0 |
|                0.0 |
|                0.0 |
| 1.3862943611198906 |
| 1.3862943611198906 |
| 1.3862943611198906 |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B6_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ln(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (ln(c+c)<99999
       OR ln(c+c) IS NULL);
+--------------------+
| col                |
+--------------------+
| 0.6931471805599453 |
| 0.6931471805599453 |
| 0.6931471805599453 |
| 1.3862943611198906 |
| 1.3862943611198906 |
| 1.3862943611198906 |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B6_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ln(c)+ln(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((ln(c)+ln(s_int))<99999
       OR (ln(c)+ln(s_int)) IS NULL);
+--------------------+
| col                |
+--------------------+
|                0.0 |
| 0.6931471805599453 |
| 0.6931471805599453 |
| 1.3862943611198906 |
|                    |
|                    |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B6_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ln(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (ln(c+s_int)<99999
       OR ln(c+s_int)<99999 IS NULL);
+--------------------+
| col                |
+--------------------+
| 0.6931471805599453 |
| 1.0986122886681098 |
| 1.0986122886681098 |
| 1.3862943611198906 |
|                    |
|                    |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B7_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT log10(c)+log10(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((log10(c)+log10(c))<99999
       OR (log10(c)+log10(c)) IS NULL);
+--------------------+
| col                |
+--------------------+
|                0.0 |
|                0.0 |
|                0.0 |
| 0.6020599913279624 |
| 0.6020599913279624 |
| 0.6020599913279624 |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B7_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT log10(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (log10(c+c)<99999
       OR log10(c+c) IS NULL);
+--------------------+
| col                |
+--------------------+
| 0.3010299956639812 |
| 0.3010299956639812 |
| 0.3010299956639812 |
| 0.6020599913279624 |
| 0.6020599913279624 |
| 0.6020599913279624 |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B7_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT log10(c)+log10(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((log10(c)+log10(s_int))<99999
       OR (log10(c)+log10(s_int)) IS NULL);
+--------------------+
| col                |
+--------------------+
|                0.0 |
| 0.3010299956639812 |
| 0.3010299956639812 |
| 0.6020599913279624 |
|                    |
|                    |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B7_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT log10(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (log10(c+s_int)<99999
       OR log10(c+s_int) IS NULL);
+---------------------+
| col                 |
+---------------------+
|  0.3010299956639812 |
| 0.47712125471966244 |
| 0.47712125471966244 |
|  0.6020599913279624 |
|                     |
|                     |
|                     |
|                     |
|                     |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B8_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT power(c, 1)+power(c, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((power(c, 1)+power(c, 1))<99999
       OR (power(c, 1)+power(c, 1)) IS NULL);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B8_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT power(c+c, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (power(c+c, 1)<99999
       OR power(c+c, 1) IS NULL);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B8_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT power(c, 1)+power(s_int, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((power(c, 1)+power(s_int, 1))<99999
       OR (power(c, 1)+power(s_int, 1)) IS NULL);
+-----+
| col |
+-----+
| 2.0 |
| 3.0 |
| 3.0 |
| 4.0 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B8_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT power(c+s_int, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (power(c+s_int, 1)<99999
       OR power(c+s_int, 1) IS NULL);
+-----+
| col |
+-----+
| 2.0 |
| 3.0 |
| 3.0 |
| 4.0 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B9_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(c)+sqrt(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((sqrt(c)+sqrt(c))<99999
       OR (sqrt(c)+sqrt(c)) IS NULL);
+--------------------+
| col                |
+--------------------+
|                2.0 |
|                2.0 |
|                2.0 |
| 2.8284271247461903 |
| 2.8284271247461903 |
| 2.8284271247461903 |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B9_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (sqrt(c+c)<99999
       OR sqrt(c+c) IS NULL);
+--------------------+
| col                |
+--------------------+
| 1.4142135623730951 |
| 1.4142135623730951 |
| 1.4142135623730951 |
|                2.0 |
|                2.0 |
|                2.0 |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B9_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(c)+sqrt(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((sqrt(c)+sqrt(s_int))<99999
       OR (sqrt(c)+sqrt(s_int)) IS NULL);
+--------------------+
| col                |
+--------------------+
|                2.0 |
|  2.414213562373095 |
|  2.414213562373095 |
| 2.8284271247461903 |
|                    |
|                    |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B9_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sqrt(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (sqrt(c+s_int)<99999
       OR sqrt(c+s_int) IS NULL);
+--------------------+
| col                |
+--------------------+
| 1.4142135623730951 |
| 1.7320508075688772 |
| 1.7320508075688772 |
|                2.0 |
|                    |
|                    |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B10_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(cast(c AS decimal), 1)+truncate(cast(c AS decimal), 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((truncate(cast(c AS decimal), 1)+truncate(cast(c AS decimal), 1))<99999
       OR (truncate(cast(c AS decimal), 1)+truncate(cast(c AS decimal), 1)) IS NULL);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B10_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(cast(c AS decimal)+cast(c AS decimal), 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (truncate(cast(c AS decimal)+cast(c AS decimal), 1)<99999
       OR truncate(cast(c AS decimal)+cast(c AS decimal), 1) IS NULL);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B10_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(cast(c AS decimal), 1)+truncate(s_int, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((truncate(cast(c AS decimal), 1)+truncate(s_int, 1))<99999
       OR (truncate(cast(c AS decimal), 1)+truncate(s_int, 1)) IS NULL);
+-----+
| col |
+-----+
| 2.0 |
| 3.0 |
| 3.0 |
| 4.0 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B10_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT truncate(cast(c AS decimal)+s_int, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (truncate(cast(c AS decimal)+s_int, 1)<99999
       OR truncate(cast(c AS decimal)+s_int, 1) IS NULL);
+-----+
| col |
+-----+
| 2.0 |
| 3.0 |
| 3.0 |
| 4.0 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B11_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(cast(c AS decimal), 1)+trunc(cast(c AS decimal), 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((trunc(cast(c AS decimal), 1)+trunc(cast(c AS decimal), 1))<99999
       OR (trunc(cast(c AS decimal), 1)+trunc(cast(c AS decimal), 1)) IS NULL);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B11_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(cast(c AS decimal)+cast(c AS decimal), 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (trunc(cast(c AS decimal)+cast(c AS decimal), 1)<99999
       OR trunc(cast(c AS decimal)+cast(c AS decimal), 1) IS NULL);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B11_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(cast(c AS decimal), 1)+trunc(s_int, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((trunc(cast(c AS decimal), 1)+trunc(s_int, 1))<99999
       OR (trunc(cast(c AS decimal), 1)+trunc(s_int, 1)) IS NULL);
+-----+
| col |
+-----+
| 2.0 |
| 3.0 |
| 3.0 |
| 4.0 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B11_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT trunc(cast(c AS decimal)+s_int, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (trunc(cast(c AS decimal)+s_int, 1)<99999
       OR trunc(cast(c AS decimal)+s_int, 1) IS NULL);
+-----+
| col |
+-----+
| 2.0 |
| 3.0 |
| 3.0 |
| 4.0 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B12_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT round(cast(c AS decimal), 1)+round(cast(c AS decimal), 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((round(cast(c AS decimal), 1)+round(cast(c AS decimal), 1))<99999
       OR (round(cast(c AS decimal), 1)+round(cast(c AS decimal), 1)) IS NULL);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B12_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT round(cast(c AS decimal)+cast(c AS decimal), 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (round(cast(c AS decimal)+cast(c AS decimal), 1)<99999
       OR round(cast(c AS decimal)+cast(c AS decimal), 1) IS NULL);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B12_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT round(cast(c AS decimal), 1)+round(s_int, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((round(cast(c AS decimal), 1)+round(s_int, 1))<99999
       OR (round(cast(c AS decimal), 1)+round(s_int, 1)) IS NULL);
+-----+
| col |
+-----+
| 2.0 |
| 3.0 |
| 3.0 |
| 4.0 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B12_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT round(cast(c AS decimal)+s_int, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (round(cast(c AS decimal)+s_int, 1)<99999
       OR round(cast(c AS decimal)+s_int, 1) IS NULL);
+-----+
| col |
+-----+
| 2.0 |
| 3.0 |
| 3.0 |
| 4.0 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B13_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mod(c, 2)+mod(c, 2) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((mod(c, 2)+mod(c, 2))<99999
       OR (mod(c, 2)+mod(c, 2))<99999 IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B13_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mod(c, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mod(c, c)<99999
       OR mod(c, c) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B13_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mod(c, 2)+mod(s_int, 2) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((mod(c, 2)+mod(s_int, 2))<99999
       OR (mod(c, 2)+mod(s_int, 2)) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
|   2 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B13_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT mod(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (mod(c, s_int)<99999
       OR mod(c, s_int) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   1 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B14_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sin(c)+sin(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((sin(c)+sin(c))<99999
       OR (sin(c)+sin(c)) IS NULL);
+--------------------+
| col                |
+--------------------+
|  1.682941969615793 |
|  1.682941969615793 |
|  1.682941969615793 |
| 1.8185948536513634 |
| 1.8185948536513634 |
| 1.8185948536513634 |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B14_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sin(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (sin(c+c)<99999
       OR sin(c+c) IS NULL);
+---------------------+
| col                 |
+---------------------+
| -0.7568024953079282 |
| -0.7568024953079282 |
| -0.7568024953079282 |
|  0.9092974268256817 |
|  0.9092974268256817 |
|  0.9092974268256817 |
|                     |
|                     |
|                     |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B14_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sin(c)+sin(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((sin(c)+sin(s_int))<99999
       OR (sin(c)+sin(s_int)) IS NULL);
+--------------------+
| col                |
+--------------------+
|  1.682941969615793 |
| 1.7507684116335782 |
| 1.7507684116335782 |
| 1.8185948536513634 |
|                    |
|                    |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B14_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sin(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (sin(c+s_int)<99999
       OR sin(c+s_int)<99999 IS NULL);
+---------------------+
| col                 |
+---------------------+
| -0.7568024953079282 |
|  0.1411200080598672 |
|  0.1411200080598672 |
|  0.9092974268256817 |
|                     |
|                     |
|                     |
|                     |
|                     |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B15_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cos(c)+cos(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((cos(c)+cos(c))<99999
       OR (cos(c)+cos(c)) IS NULL);
+---------------------+
| col                 |
+---------------------+
| -0.8322936730942848 |
| -0.8322936730942848 |
| -0.8322936730942848 |
|  1.0806046117362795 |
|  1.0806046117362795 |
|  1.0806046117362795 |
|                     |
|                     |
|                     |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B15_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cos(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (cos(c+c)<99999
       OR cos(c+c) IS NULL);
+---------------------+
| col                 |
+---------------------+
| -0.4161468365471424 |
| -0.4161468365471424 |
| -0.4161468365471424 |
| -0.6536436208636119 |
| -0.6536436208636119 |
| -0.6536436208636119 |
|                     |
|                     |
|                     |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B15_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cos(c)+cos(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((cos(c)+cos(s_int))<99999
       OR (cos(c)+cos(s_int)) IS NULL);
+---------------------+
| col                 |
+---------------------+
| -0.8322936730942848 |
| 0.12415546932099736 |
| 0.12415546932099736 |
|  1.0806046117362795 |
|                     |
|                     |
|                     |
|                     |
|                     |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B15_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cos(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (cos(c+s_int)<99999
       OR cos(c+s_int) IS NULL);
+---------------------+
| col                 |
+---------------------+
| -0.4161468365471424 |
| -0.6536436208636119 |
| -0.9899924966004454 |
| -0.9899924966004454 |
|                     |
|                     |
|                     |
|                     |
|                     |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B16_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT tan(c)+tan(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((tan(c)+tan(c))<99999
       OR (tan(c)+tan(c)) IS NULL);
+--------------------+
| col                |
+--------------------+
| -4.370079726523038 |
| -4.370079726523038 |
| -4.370079726523038 |
| 3.1148154493098046 |
| 3.1148154493098046 |
| 3.1148154493098046 |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B16_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT tan(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (tan(c+c)<99999
       OR tan(c+c) IS NULL);
+--------------------+
| col                |
+--------------------+
| -2.185039863261519 |
| -2.185039863261519 |
| -2.185039863261519 |
| 1.1578212823495775 |
| 1.1578212823495775 |
| 1.1578212823495775 |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B16_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT tan(c)+tan(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((tan(c)+tan(s_int))<99999
       OR (tan(c)+tan(s_int)) IS NULL);
+---------------------+
| col                 |
+---------------------+
| -0.6276321386066166 |
| -0.6276321386066166 |
|  -4.370079726523038 |
|  3.1148154493098046 |
|                     |
|                     |
|                     |
|                     |
|                     |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B16_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT tan(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (tan(c+s_int)<99999
       OR tan(c+s_int) IS NULL);
+---------------------+
| col                 |
+---------------------+
| -0.1425465430742778 |
| -0.1425465430742778 |
|  -2.185039863261519 |
|  1.1578212823495775 |
|                     |
|                     |
|                     |
|                     |
|                     |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B17_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cot(c)+cot(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((cot(c)+cot(c))<99999
       OR (cot(c)+cot(c)) IS NULL);
+---------------------+
| col                 |
+---------------------+
| -0.9153151087205715 |
| -0.9153151087205715 |
| -0.9153151087205715 |
|  1.2841852318686615 |
|  1.2841852318686615 |
|  1.2841852318686615 |
|                     |
|                     |
|                     |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B17_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cot(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (cot(c+c)<99999
       OR cot(c+c) IS NULL);
+----------------------+
| col                  |
+----------------------+
| -0.45765755436028577 |
| -0.45765755436028577 |
| -0.45765755436028577 |
|   0.8636911544506167 |
|   0.8636911544506167 |
|   0.8636911544506167 |
|                      |
|                      |
|                      |
+----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B17_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cot(c)+cot(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((cot(c)+cot(s_int))<99999
       OR (cot(c)+cot(s_int)) IS NULL);
+---------------------+
| col                 |
+---------------------+
| -0.9153151087205715 |
|   0.184435061574045 |
|   0.184435061574045 |
|  1.2841852318686615 |
|                     |
|                     |
|                     |
|                     |
|                     |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B17_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cot(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (cot(c+s_int)<99999
       OR cot(c+s_int) IS NULL);
+----------------------+
| col                  |
+----------------------+
| -0.45765755436028577 |
|   -7.015252551434534 |
|   -7.015252551434534 |
|   0.8636911544506167 |
|                      |
|                      |
|                      |
|                      |
|                      |
+----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B18_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT asin(c)+asin(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((asin(c)+asin(c))<99999
       OR (asin(c)+asin(c)) IS NULL);
+-------------------+
| col               |
+-------------------+
| 3.141592653589793 |
| 3.141592653589793 |
| 3.141592653589793 |
|                   |
|                   |
|                   |
+-------------------+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B18_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT asin(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (asin(c+c)<99999
       OR asin(c+c)<99999 IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B18_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT asin(c)+asin(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((asin(c)+asin(s_int))<99999
       OR (asin(c)+asin(s_int)) IS NULL);
+-------------------+
| col               |
+-------------------+
| 3.141592653589793 |
|                   |
|                   |
|                   |
|                   |
|                   |
+-------------------+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B18_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT asin(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (asin(c+s_int)<99999
       OR asin(c+s_int)<99999 IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B19_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT acos(c)+acos(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((acos(c)+acos(c))<99999
       OR (acos(c)+acos(c)) IS NULL);
+-----+
| col |
+-----+
| 0.0 |
| 0.0 |
| 0.0 |
|     |
|     |
|     |
+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B19_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT acos(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (acos(c+c)<99999
       OR acos(c+c) IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B19_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT acos(c)+acos(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((acos(c)+acos(s_int))<99999
       OR (acos(c)+acos(s_int)) IS NULL);
+-----+
| col |
+-----+
| 0.0 |
|     |
|     |
|     |
|     |
|     |
+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B19_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT acos(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (acos(c+s_int)<99999
       OR acos(c+s_int) IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
+-----+
(5 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B20_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT atan(c)+atan(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((atan(c)+atan(c))<99999
       OR (atan(c)+atan(c)) IS NULL);
+--------------------+
| col                |
+--------------------+
| 1.5707963267948966 |
| 1.5707963267948966 |
| 1.5707963267948966 |
|  2.214297435588181 |
|  2.214297435588181 |
|  2.214297435588181 |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B20_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT atan(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (atan(c+c)<99999
       OR atan(c+c) IS NULL);
+--------------------+
| col                |
+--------------------+
| 1.1071487177940904 |
| 1.1071487177940904 |
| 1.1071487177940904 |
| 1.3258176636680326 |
| 1.3258176636680326 |
| 1.3258176636680326 |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B20_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT atan(c)+atan(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((atan(c)+atan(s_int))<99999
       OR (atan(c)+atan(s_int)) IS NULL);
+--------------------+
| col                |
+--------------------+
| 1.5707963267948966 |
| 1.8925468811915387 |
| 1.8925468811915387 |
|  2.214297435588181 |
|                    |
|                    |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B20_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT atan(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (atan(c+s_int)<99999
       OR atan(c+s_int) IS NULL);
+--------------------+
| col                |
+--------------------+
| 1.1071487177940904 |
| 1.2490457723982544 |
| 1.2490457723982544 |
| 1.3258176636680326 |
|                    |
|                    |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B21_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(c, 1)+atan2(c, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((atan2(c, 1)+atan2(c, 1))<99999
       OR (atan2(c, 1)+atan2(c, 1)) IS NULL);
+--------------------+
| col                |
+--------------------+
| 1.5707963267948966 |
| 1.5707963267948966 |
| 1.5707963267948966 |
|  2.214297435588181 |
|  2.214297435588181 |
|  2.214297435588181 |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B21_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(c, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (atan2(c, c)<99999
       OR atan2(c, c) IS NULL);
+--------------------+
| col                |
+--------------------+
| 0.7853981633974483 |
| 0.7853981633974483 |
| 0.7853981633974483 |
| 0.7853981633974483 |
| 0.7853981633974483 |
| 0.7853981633974483 |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B21_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(c, 1)+atan2(s_int, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((atan2(c, 1)+atan2(s_int, 1))<99999
       OR (atan2(c, 1)+atan2(s_int, 1)) IS NULL);
+--------------------+
| col                |
+--------------------+
| 1.5707963267948966 |
| 1.8925468811915387 |
| 1.8925468811915387 |
|  2.214297435588181 |
|                    |
|                    |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B21_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT atan2(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (atan2(c, s_int)<99999
       OR atan2(c, s_int) IS NULL);
+--------------------+
| col                |
+--------------------+
| 0.4636476090008061 |
| 0.7853981633974483 |
| 0.7853981633974483 |
| 1.1071487177940904 |
|                    |
|                    |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B22_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(c)+degrees(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((degrees(c)+degrees(c))<99999
       OR (degrees(c)+degrees(c)) IS NULL);
+--------------------+
| col                |
+--------------------+
| 114.59155902616465 |
| 114.59155902616465 |
| 114.59155902616465 |
|  229.1831180523293 |
|  229.1831180523293 |
|  229.1831180523293 |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B22_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (degrees(c+c)<99999
       OR degrees(c+c) IS NULL);
+--------------------+
| col                |
+--------------------+
| 114.59155902616465 |
| 114.59155902616465 |
| 114.59155902616465 |
|  229.1831180523293 |
|  229.1831180523293 |
|  229.1831180523293 |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B22_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(c)+degrees(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((degrees(c)+degrees(s_int))<99999
       OR (degrees(c)+degrees(s_int)) IS NULL);
+--------------------+
| col                |
+--------------------+
| 114.59155902616465 |
| 171.88733853924697 |
| 171.88733853924697 |
|  229.1831180523293 |
|                    |
|                    |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B22_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT degrees(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (degrees(c+s_int)<99999
       OR degrees(c+s_int) IS NULL);
+--------------------+
| col                |
+--------------------+
| 114.59155902616465 |
| 171.88733853924697 |
| 171.88733853924697 |
|  229.1831180523293 |
|                    |
|                    |
|                    |
|                    |
|                    |
+--------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B23_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT radians(c)+radians(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((radians(c)+radians(c))<99999
       OR (radians(c)+radians(c)) IS NULL);
+---------------------+
| col                 |
+---------------------+
| 0.03490658503988659 |
| 0.03490658503988659 |
| 0.03490658503988659 |
| 0.06981317007977318 |
| 0.06981317007977318 |
| 0.06981317007977318 |
|                     |
|                     |
|                     |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B23_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT radians(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (radians(c+c)<99999
       OR radians(c+c) IS NULL);
+---------------------+
| col                 |
+---------------------+
| 0.03490658503988659 |
| 0.03490658503988659 |
| 0.03490658503988659 |
| 0.06981317007977318 |
| 0.06981317007977318 |
| 0.06981317007977318 |
|                     |
|                     |
|                     |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B23_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT radians(c)+radians(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((radians(c)+radians(s_int))<99999
       OR (radians(c)+radians(s_int)) IS NULL);
+---------------------+
| col                 |
+---------------------+
| 0.03490658503988659 |
| 0.05235987755982989 |
| 0.05235987755982989 |
| 0.06981317007977318 |
|                     |
|                     |
|                     |
|                     |
|                     |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B23_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT radians(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (radians(c+s_int)<99999
       OR radians(c+s_int) IS NULL);
+---------------------+
| col                 |
+---------------------+
| 0.03490658503988659 |
| 0.05235987755982989 |
| 0.05235987755982989 |
| 0.06981317007977318 |
|                     |
|                     |
|                     |
|                     |
|                     |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B24_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(c, 1)+bitwise_and(c, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((bitwise_and(c, 1)+bitwise_and(c, 1))<99999
       OR (bitwise_and(c, 1)+bitwise_and(c, 1)) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B24_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(c, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (bitwise_and(c, c)<99999
       OR bitwise_and(c, c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B24_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(c, 1)+bitwise_and(s_int, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((bitwise_and(c, 1)+bitwise_and(s_int, 1))<99999
       OR (bitwise_and(c, 1)+bitwise_and(s_int, 1)) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
|   2 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B24_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_and(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (bitwise_and(c, s_int)<99999
       OR bitwise_and(c, s_int) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   1 |
|   2 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B25_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(c)+bitwise_complement(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((bitwise_complement(c)+bitwise_complement(c))<99999
       OR (bitwise_complement(c)+bitwise_complement(c)) IS NULL);
+-----+
| col |
+-----+
|  -4 |
|  -4 |
|  -4 |
|  -6 |
|  -6 |
|  -6 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B25_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (bitwise_complement(c+c)<99999
       OR bitwise_complement(c+c) IS NULL);
+-----+
| col |
+-----+
|  -3 |
|  -3 |
|  -3 |
|  -5 |
|  -5 |
|  -5 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B25_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(c)+bitwise_complement(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((bitwise_complement(c)+bitwise_complement(s_int))<99999
       OR (bitwise_complement(c)+bitwise_complement(s_int)) IS NULL);
+-----+
| col |
+-----+
|  -4 |
|  -5 |
|  -5 |
|  -6 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B25_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_complement(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (bitwise_complement(c+s_int)<99999
       OR bitwise_complement(c+s_int) IS NULL);
+-----+
| col |
+-----+
|  -3 |
|  -4 |
|  -4 |
|  -5 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B26_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(cast(c AS DOUBLE))+bitwise_convert_double_to_long_bits(cast(c AS DOUBLE)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((bitwise_convert_double_to_long_bits(cast(c AS DOUBLE))+bitwise_convert_double_to_long_bits(cast(c AS DOUBLE)))>0
       OR (bitwise_convert_double_to_long_bits(cast(c AS DOUBLE))+bitwise_convert_double_to_long_bits(cast(c AS DOUBLE)))<0
       OR (bitwise_convert_double_to_long_bits(cast(c AS DOUBLE))+bitwise_convert_double_to_long_bits(cast(c AS DOUBLE))) IS NULL);
+----------------------+
| col                  |
+----------------------+
| -9223372036854775808 |
| -9223372036854775808 |
| -9223372036854775808 |
|  9214364837600034816 |
|  9214364837600034816 |
|  9214364837600034816 |
|                      |
|                      |
|                      |
+----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B26_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(cast(c AS DOUBLE)+cast(c AS DOUBLE)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (bitwise_convert_double_to_long_bits(cast(c AS DOUBLE)+cast(c AS DOUBLE))>0
       OR bitwise_convert_double_to_long_bits(cast(c AS DOUBLE)+cast(c AS DOUBLE))<0
       OR bitwise_convert_double_to_long_bits(cast(c AS DOUBLE)+cast(c AS DOUBLE)) IS NULL);
+---------------------+
| col                 |
+---------------------+
| 4611686018427387904 |
| 4611686018427387904 |
| 4611686018427387904 |
| 4616189618054758400 |
| 4616189618054758400 |
| 4616189618054758400 |
|                     |
|                     |
|                     |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B26_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(cast(c AS DOUBLE))+bitwise_convert_double_to_long_bits(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((bitwise_convert_double_to_long_bits(cast(c AS DOUBLE))+bitwise_convert_double_to_long_bits(s_int))>0
       OR (bitwise_convert_double_to_long_bits(cast(c AS DOUBLE))+bitwise_convert_double_to_long_bits(s_int))<0
       OR (bitwise_convert_double_to_long_bits(cast(c AS DOUBLE))+bitwise_convert_double_to_long_bits(s_int)) IS NULL);
+----------------------+
| col                  |
+----------------------+
| -9223372036854775808 |
|  9214364837600034816 |
|  9218868437227405312 |
|  9218868437227405312 |
|                      |
|                      |
|                      |
|                      |
|                      |
+----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B26_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_convert_double_to_long_bits(cast(c AS DOUBLE)+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (bitwise_convert_double_to_long_bits(cast(c AS DOUBLE)+s_int)>0
       OR bitwise_convert_double_to_long_bits(cast(c AS DOUBLE)+s_int)<0
       OR bitwise_convert_double_to_long_bits(cast(c AS DOUBLE)+s_int) IS NULL);
+---------------------+
| col                 |
+---------------------+
| 4611686018427387904 |
| 4613937818241073152 |
| 4613937818241073152 |
| 4616189618054758400 |
|                     |
|                     |
|                     |
|                     |
|                     |
+---------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B27_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT bitwise_convert_long_bits_to_double(c)+bitwise_convert_long_bits_to_double(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE (s_int IN (0,
                    1,
                    2)
          OR s_int IS NULL)
     AND ((bitwise_convert_long_bits_to_double(c)+bitwise_convert_long_bits_to_double(c))<99999
          OR (bitwise_convert_long_bits_to_double(c)+bitwise_convert_long_bits_to_double(c)) IS NULL));
+--------+
| EXPR$0 |
+--------+
|      9 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B27_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT bitwise_convert_long_bits_to_double(c+c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE (s_int IN (0,
                    1,
                    2)
          OR s_int IS NULL)
     AND (bitwise_convert_long_bits_to_double(c+c)<99999
          OR bitwise_convert_long_bits_to_double(c+c) IS NULL));
+--------+
| EXPR$0 |
+--------+
|      9 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B27_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT bitwise_convert_long_bits_to_double(c)+bitwise_convert_long_bits_to_double(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE (s_int IN (0,
                    1,
                    2)
          OR s_int IS NULL)
     AND ((bitwise_convert_long_bits_to_double(c)+bitwise_convert_long_bits_to_double(s_int))<99999
          OR (bitwise_convert_long_bits_to_double(c)+bitwise_convert_long_bits_to_double(s_int)) IS NULL));
+--------+
| EXPR$0 |
+--------+
|      9 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B27_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT bitwise_convert_long_bits_to_double(c+s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE (s_int IN (0,
                    1,
                    2)
          OR s_int IS NULL)
     AND (bitwise_convert_long_bits_to_double(c+s_int)<99999
          OR bitwise_convert_long_bits_to_double(c+s_int) IS NULL));
+--------+
| EXPR$0 |
+--------+
|      9 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B28_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(c, 1)+bitwise_or(c, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((bitwise_or(c, 1)+bitwise_or(c, 1))<99999
       OR (bitwise_or(c, 1)+bitwise_or(c, 1)) IS NULL);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   6 |
|   6 |
|   6 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B28_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(c, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (bitwise_or(c, c)<99999
       OR bitwise_or(c, c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B28_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(c, 1)+bitwise_or(s_int, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((bitwise_or(c, 1)+bitwise_or(s_int, 1))<99999
       OR (bitwise_or(c, 1)+bitwise_or(s_int, 1)) IS NULL);
+-----+
| col |
+-----+
|   2 |
|   4 |
|   4 |
|   6 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B28_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_or(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (bitwise_or(c, s_int)<99999
       OR bitwise_or(c, s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   2 |
|   3 |
|   3 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B29_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(c, 1)+bitwise_shift_left(c, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((bitwise_shift_left(c, 1)+bitwise_shift_left(c, 1))<99999
       OR (bitwise_shift_left(c, 1)+bitwise_shift_left(c, 1)) IS NULL);
+-----+
| col |
+-----+
|   4 |
|   4 |
|   4 |
|   8 |
|   8 |
|   8 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B29_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(c, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (bitwise_shift_left(c, c)<99999
       OR bitwise_shift_left(c, c) IS NULL);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
|   8 |
|   8 |
|   8 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B29_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(c, 1)+bitwise_shift_left(s_int, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((bitwise_shift_left(c, 1)+bitwise_shift_left(s_int, 1))<99999
       OR (bitwise_shift_left(c, 1)+bitwise_shift_left(s_int, 1)) IS NULL);
+-----+
| col |
+-----+
|   4 |
|   6 |
|   6 |
|   8 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B29_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_left(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (bitwise_shift_left(c, s_int)<99999
       OR bitwise_shift_left(c, s_int) IS NULL);
+-----+
| col |
+-----+
|   2 |
|   4 |
|   4 |
|   8 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B30_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(c, 1)+bitwise_shift_right(c, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((bitwise_shift_right(c, 1)+bitwise_shift_right(c, 1))<99999
       OR (bitwise_shift_right(c, 1)+bitwise_shift_right(c, 1)) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B30_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(c, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (bitwise_shift_right(c, c)<99999
       OR bitwise_shift_right(c, c) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B30_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(c, 1)+bitwise_shift_right(s_int, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((bitwise_shift_right(c, 1)+bitwise_shift_right(s_int, 1))<99999
       OR (bitwise_shift_right(c, 1)+bitwise_shift_right(s_int, 1)) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
|   2 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B30_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_shift_right(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (bitwise_shift_right(c, s_int)<99999
       OR bitwise_shift_right(c, s_int) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   1 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B31_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(c, 1)+bitwise_xor(c, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((bitwise_xor(c, 1)+bitwise_xor(c, 1))<99999
       OR (bitwise_xor(c, 1)+bitwise_xor(c, 1)) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   6 |
|   6 |
|   6 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B31_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(c, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (bitwise_xor(c, c)<99999
       OR bitwise_xor(c, c) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B31_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(c, 1)+bitwise_xor(s_int, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((bitwise_xor(c, 1)+bitwise_xor(s_int, 1))<99999
       OR (bitwise_xor(c, 1)+bitwise_xor(s_int, 1)) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   3 |
|   3 |
|   6 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B31_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bitwise_xor(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (bitwise_xor(c, s_int)<99999
       OR bitwise_xor(c, s_int) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   3 |
|   3 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B33_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(c)+human_readable_binary_byte_format(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((human_readable_binary_byte_format(c)+human_readable_binary_byte_format(c))<'99999'
       OR (human_readable_binary_byte_format(c)+human_readable_binary_byte_format(c)) IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B33_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (human_readable_binary_byte_format(c+c)<'99999'
       OR human_readable_binary_byte_format(c+c) IS NULL);
+-----+
| col |
+-----+
| 2 B |
| 2 B |
| 2 B |
| 4 B |
| 4 B |
| 4 B |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B33_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(c)+human_readable_binary_byte_format(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((human_readable_binary_byte_format(c)+human_readable_binary_byte_format(s_int))<'99999'
       OR (human_readable_binary_byte_format(c)+human_readable_binary_byte_format(s_int)) IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B33_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_binary_byte_format(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (human_readable_binary_byte_format(c+s_int)<'99999'
       OR human_readable_binary_byte_format(c+s_int) IS NULL);
+-----+
| col |
+-----+
| 2 B |
| 3 B |
| 3 B |
| 4 B |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B34_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(c)+human_readable_decimal_byte_format(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((human_readable_decimal_byte_format(c)+human_readable_decimal_byte_format(c))<'99999'
       OR (human_readable_decimal_byte_format(c)+human_readable_decimal_byte_format(c)) IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B34_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (human_readable_decimal_byte_format(c+c)<'99999'
       OR human_readable_decimal_byte_format(c+c) IS NULL);
+-----+
| col |
+-----+
| 2 B |
| 2 B |
| 2 B |
| 4 B |
| 4 B |
| 4 B |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B34_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(c)+human_readable_decimal_byte_format(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((human_readable_decimal_byte_format(c)+human_readable_decimal_byte_format(s_int))<'99999'
       OR (human_readable_decimal_byte_format(c)+human_readable_decimal_byte_format(s_int)) IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B34_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_byte_format(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (human_readable_decimal_byte_format(c+s_int)<'99999'
       OR human_readable_decimal_byte_format(c+s_int) IS NULL);
+-----+
| col |
+-----+
| 2 B |
| 3 B |
| 3 B |
| 4 B |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B35_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(c)+human_readable_decimal_format(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((human_readable_decimal_format(c)+human_readable_decimal_format(c))<99999
       OR (human_readable_decimal_format(c)+human_readable_decimal_format(c)) IS NULL);
+-----+
| col |
+-----+
| 2.0 |
| 2.0 |
| 2.0 |
| 4.0 |
| 4.0 |
| 4.0 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B35_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(c+c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (human_readable_decimal_format(c+c)<99999
       OR human_readable_decimal_format(c+c) IS NULL);
+-----+
| col |
+-----+
| 2   |
| 2   |
| 2   |
| 4   |
| 4   |
| 4   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B35_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(c)+human_readable_decimal_format(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((human_readable_decimal_format(c)+human_readable_decimal_format(s_int))<99999
       OR (human_readable_decimal_format(c)+human_readable_decimal_format(s_int)) IS NULL);
+-----+
| col |
+-----+
| 2.0 |
| 3.0 |
| 3.0 |
| 4.0 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B35_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT human_readable_decimal_format(c+s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (human_readable_decimal_format(c+s_int)<99999
       OR human_readable_decimal_format(c+s_int) IS NULL);
+-----+
| col |
+-----+
| 2   |
| 3   |
| 3   |
| 4   |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B36_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(c, 0)+safe_divide(c, 0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((safe_divide(c, 0)+safe_divide(c, 0))<99999
       OR (safe_divide(c, 0)+safe_divide(c, 0)) IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B36_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(c, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (safe_divide(c, c)<99999
       OR safe_divide(c, c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B36_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(c, 0)+safe_divide(s_int, 0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((safe_divide(c, 0)+safe_divide(s_int, 0))<99999
       OR (safe_divide(c, 0)+safe_divide(s_int, 0)) IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_numeric_funcs TEST_ID: A1_B36_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT safe_divide(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (safe_divide(c, s_int)<99999
       OR safe_divide(c, s_int) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
|   2 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B1_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT concat(c, c)||concat(c, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((concat(c, c)||concat(c, c))<'99999'
       OR (concat(c, c)||concat(c, c)) IS NULL);
+------+
| col  |
+------+
| 1111 |
| 1111 |
| 1111 |
| 2222 |
| 2222 |
| 2222 |
|      |
|      |
|      |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B1_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT concat(c, s_int)||concat(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((concat(c, s_int)||concat(c, s_int))<'99999'
       OR (concat(c, s_int)||concat(c, s_int)) IS NULL);
+------+
| col  |
+------+
| 1111 |
| 1212 |
| 2121 |
| 2222 |
|      |
|      |
|      |
|      |
|      |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B2_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(cast(c AS char), cast(c AS char))||textcat(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((textcat(cast(c AS char), cast(c AS char))||textcat(cast(c AS char), cast(c AS char)))<'99999'
       OR (textcat(cast(c AS char), cast(c AS char))||textcat(cast(c AS char), cast(c AS char))) IS NULL);
+------+
| col  |
+------+
| 1111 |
| 1111 |
| 1111 |
| 2222 |
| 2222 |
| 2222 |
|      |
|      |
|      |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B2_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT textcat(cast(c AS char), cast(s_int AS char))||textcat(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((textcat(cast(c AS char), cast(s_int AS char))||textcat(cast(c AS char), cast(s_int AS char)))<'99999'
       OR (textcat(cast(c AS char), cast(s_int AS char))||textcat(cast(c AS char), cast(s_int AS char))) IS NULL);
+------+
| col  |
+------+
| 1111 |
| 1212 |
| 2121 |
| 2222 |
|      |
|      |
|      |
|      |
|      |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B3_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_format('%sZ', c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_format('%sZ', c)<'0'
       OR string_format('%sZ', c)>'0'
       OR string_format('%sZ', c) IS NULL);
+-------+
| col   |
+-------+
| 1Z    |
| 1Z    |
| 1Z    |
| 2Z    |
| 2Z    |
| 2Z    |
| nullZ |
| nullZ |
| nullZ |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B3_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_format('%sZ', s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_format('%sZ', s_int)<'0'
       OR string_format('%sZ', s_int)>'0'
       OR string_format('%sZ', s_int) IS NULL);
+-------+
| col   |
+-------+
| 1Z    |
| 1Z    |
| 1Z    |
| 2Z    |
| 2Z    |
| 2Z    |
| nullZ |
| nullZ |
| nullZ |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B4_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT length(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (length(c)<99999
       OR length(c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B4_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT length(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (length(s_int)<99999
       OR length(s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B5_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (char_length(c)<99999
       OR char_length(c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B5_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT char_length(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (char_length(s_int)<99999
       OR char_length(s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B6_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (character_length(c)<99999
       OR character_length(c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B6_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT character_length(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (character_length(s_int)<99999
       OR character_length(s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B7_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (strlen(c)<99999
       OR strlen(c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B7_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT strlen(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (strlen(s_int)<99999
       OR strlen(s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B8_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT lower(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (lower(c)<'99999'
       OR lower(c) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B8_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT lower(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (lower(s_int)<'99999'
       OR lower(s_int) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B9_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT upper(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (upper(c)<'99999'
       OR upper(c) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B9_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT upper(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (upper(s_int)<'99999'
       OR upper(s_int) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B10_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (parse_long(cast(c AS char))<99999
       OR parse_long(cast(c AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B10_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_long(cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (parse_long(cast(s_int AS char))<99999
       OR parse_long(cast(s_int AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B11_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT position(c IN c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (position(c IN c)<99999
       OR position(c IN c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B11_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT position(s_int IN c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (position(s_int IN c)<99999
       OR position(s_int IN c) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   1 |
|   1 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B11_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT position(c IN s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (position(c IN s_int)<99999
       OR position(c IN s_int) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   1 |
|   1 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B11_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT position(s_int IN s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (position(s_int IN s_int)<99999
       OR position(s_int IN s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B12_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(cast(c AS char), '.*') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (regexp_extract(cast(c AS char), '.*')<'99999'
       OR regexp_extract(cast(c AS char), '.*') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B12_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_extract(cast(s_int AS char), '.*') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (regexp_extract(cast(s_int AS char), '.*')<99999
       OR regexp_extract(cast(s_int AS char), '.*') IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B13_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(cast(c AS char), '.*') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (regexp_like(cast(c AS char), '.*') IS TRUE
       OR regexp_like(cast(c AS char), '.*') IS FALSE);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B13_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT regexp_like(cast(s_int AS char), '.*') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (regexp_like(cast(s_int AS char), '.*') IS TRUE
       OR regexp_like(cast(s_int AS char), '.*') IS FALSE);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B14_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(cast(c AS char), '1') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (contains_string(cast(c AS char), '1') IS TRUE
       OR contains_string(cast(c AS char), '1') IS FALSE);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| true  |
| true  |
| true  |
+-------+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B14_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT contains_string(cast(s_int AS char), '1') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (contains_string(cast(s_int AS char), '1') IS TRUE
       OR contains_string(cast(s_int AS char), '1') IS FALSE);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| true  |
| true  |
| true  |
+-------+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B15_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(cast(c AS char), '1') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (icontains_string(cast(c AS char), '1') IS TRUE
       OR icontains_string(cast(c AS char), '1') IS FALSE);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| true  |
| true  |
| true  |
+-------+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B15_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT icontains_string(cast(s_int AS char), '1') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (icontains_string(cast(s_int AS char), '1') IS TRUE
       OR icontains_string(cast(s_int AS char), '1') IS FALSE);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| true  |
| true  |
| true  |
+-------+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B16_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT replace(c, '1', 'Z') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (replace(c, '1', 'Z')<'0'
       OR replace(c, '1', 'Z')>'0'
       OR replace(c, '1', 'Z') IS NULL);
+-----+
| col |
+-----+
| 2   |
| 2   |
| 2   |
| Z   |
| Z   |
| Z   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B16_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT replace(s_int, '1', 'Z') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (replace(s_int, '1', 'Z')<'0'
       OR replace(s_int, '1', 'Z')>'0'
       OR replace(s_int, '1', 'Z') IS NULL);
+-----+
| col |
+-----+
| 2   |
| 2   |
| 2   |
| Z   |
| Z   |
| Z   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B17_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(cast(c AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (strpos(cast(c AS char), cast(c AS char))<99999
       OR strpos(cast(c AS char), cast(c AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B17_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(cast(s_int AS char), cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (strpos(cast(s_int AS char), cast(c AS char))<99999
       OR strpos(cast(s_int AS char), cast(c AS char)) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   1 |
|   1 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B17_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(cast(c AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (strpos(cast(c AS char), cast(s_int AS char))<99999
       OR strpos(cast(c AS char), cast(s_int AS char)) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   1 |
|   1 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B17_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT strpos(cast(s_int AS char), cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (strpos(cast(s_int AS char), cast(s_int AS char))<99999
       OR strpos(cast(s_int AS char), cast(s_int AS char)) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B18_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT substring(cast(c AS char), 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (substring(cast(c AS char), 1)<'99999'
       OR substring(cast(c AS char), 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B18_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT substring(cast(s_int AS char), 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (substring(cast(s_int AS char), 1)<'99999'
       OR substring(cast(s_int AS char), 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B19_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT right(cast(c AS char), 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (right(cast(c AS char), 1)<'99999'
       OR right(cast(c AS char), 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B19_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT right(cast(s_int AS char), 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (right(cast(s_int AS char), 1)<'99999'
       OR right(cast(s_int AS char), 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B20_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT left(cast(c AS char), 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (left(cast(c AS char), 1)<'99999'
       OR left(cast(c AS char), 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B20_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT left(cast(s_int AS char), 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (left(cast(s_int AS char), 1)<'99999'
       OR left(cast(s_int AS char), 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B21_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT substr(cast(c AS char), 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (substr(cast(c AS char), 1)<'99999'
       OR substr(cast(c AS char), 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B21_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT substr(cast(s_int AS char), 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (substr(cast(s_int AS char), 1)<'99999'
       OR substr(cast(s_int AS char), 1) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B22_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT trim(BOTH '1'
            FROM c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (trim(BOTH '1'
            FROM c)<'99999'
       OR trim(BOTH '1'
               FROM c) IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B22_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT trim(BOTH '1'
            FROM s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (trim(BOTH '1'
            FROM s_int)<'99999'
       OR trim(BOTH '1'
               FROM s_int) IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B23_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(cast(c AS char), '1') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (btrim(cast(c AS char), '1')<'99999'
       OR btrim(cast(c AS char), '1') IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B23_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT btrim(cast(s_int AS char), '1') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (btrim(cast(s_int AS char), '1')<'99999'
       OR btrim(cast(s_int AS char), '1') IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B24_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(cast(c AS char), '1') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (ltrim(cast(c AS char), '1')<'99999'
       OR ltrim(cast(c AS char), '1') IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B24_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT ltrim(cast(s_int AS char), '1') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (ltrim(cast(s_int AS char), '1')<'99999'
       OR ltrim(cast(s_int AS char), '1') IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B25_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(cast(c AS char), '1') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (rtrim(cast(c AS char), '1')<'99999'
       OR rtrim(cast(c AS char), '1') IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B25_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT rtrim(cast(s_int AS char), '1') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (rtrim(cast(s_int AS char), '1')<'99999'
       OR rtrim(cast(s_int AS char), '1') IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B26_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(cast(c AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (reverse(cast(c AS char))<'99999'
       OR reverse(cast(c AS char)) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B26_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT reverse(cast(s_int AS char)) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (reverse(cast(s_int AS char))<'99999'
       OR reverse(cast(s_int AS char)) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B27_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(cast(c AS char), 2) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (repeat(cast(c AS char), 2)<'99999'
       OR repeat(cast(c AS char), 2) IS NULL);
+-----+
| col |
+-----+
| 11  |
| 11  |
| 11  |
| 22  |
| 22  |
| 22  |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B27_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT repeat(cast(s_int AS char), 2) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (repeat(cast(s_int AS char), 2)<'99999'
       OR repeat(cast(s_int AS char), 2) IS NULL);
+-----+
| col |
+-----+
| 11  |
| 11  |
| 11  |
| 22  |
| 22  |
| 22  |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B28_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(cast(c AS char), 3, 'Z') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (lpad(cast(c AS char), 3, 'Z')<'0'
       OR lpad(cast(c AS char), 3, 'Z')>'0'
       OR lpad(cast(c AS char), 3, 'Z') IS NULL);
+-----+
| col |
+-----+
| ZZ1 |
| ZZ1 |
| ZZ1 |
| ZZ2 |
| ZZ2 |
| ZZ2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B28_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT lpad(cast(s_int AS char), 3, 'Z') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (lpad(cast(s_int AS char), 3, 'Z')<'0'
       OR lpad(cast(s_int AS char), 3, 'Z')>'0'
       OR lpad(cast(s_int AS char), 3, 'Z') IS NULL);
+-----+
| col |
+-----+
| ZZ1 |
| ZZ1 |
| ZZ1 |
| ZZ2 |
| ZZ2 |
| ZZ2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B29_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(cast(c AS char), 3, 'Z') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (rpad(cast(c AS char), 3, 'Z')<'0'
       OR rpad(cast(c AS char), 3, 'Z')>'0'
       OR rpad(cast(c AS char), 3, 'Z') IS NULL);
+-----+
| col |
+-----+
| 1ZZ |
| 1ZZ |
| 1ZZ |
| 2ZZ |
| 2ZZ |
| 2ZZ |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_string_funcs TEST_ID: A1_B29_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT rpad(cast(s_int AS char), 3, 'Z') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (rpad(cast(s_int AS char), 3, 'Z')<'0'
       OR rpad(cast(s_int AS char), 3, 'Z')>'0'
       OR rpad(cast(s_int AS char), 3, 'Z') IS NULL);
+-----+
| col |
+-----+
| 1ZZ |
| 1ZZ |
| 1ZZ |
| 2ZZ |
| 2ZZ |
| 2ZZ |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B1_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT CURRENT_TIMESTAMP AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE (s_int IN (0,
                    1,
                    2)
          OR s_int IS NULL)
     AND (CURRENT_TIMESTAMP IS NOT NULL));
+--------+
| EXPR$0 |
+--------+
|      9 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B2_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*)
FROM
  (SELECT CURRENT_DATE AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE (s_int IN (0,
                    1,
                    2)
          OR s_int IS NULL)
     AND (CURRENT_DATE IS NOT NULL));
+--------+
| EXPR$0 |
+--------+
|      9 |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B3_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (date_trunc('year', c) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B3_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT date_trunc('year', s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (date_trunc('year', s_int) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B4_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(c, 'P1D') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_ceil(c, 'P1D') IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B4_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_ceil(s_int, 'P1D') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_ceil(s_int, 'P1D') IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B5_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(c, 'P1D') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_floor(c, 'P1D') IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B5_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_floor(s_int, 'P1D') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_floor(s_int, 'P1D') IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B6_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(c, 'P1D', 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_shift(c, 'P1D', 1) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B6_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_shift(s_int, 'P1D', 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_shift(s_int, 'P1D', 1) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B7_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(c, 'HOUR') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_extract(c, 'HOUR') IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B7_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_extract(s_int, 'HOUR') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_extract(s_int, 'HOUR') IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B8_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_parse(c) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B8_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_parse(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_parse(s_int) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B9_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(c, '2001-01-01/P1D') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_in_interval(c, '2001-01-01/P1D') IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B9_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT time_in_interval(s_int, '2001-01-01/P1D') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (time_in_interval(c, '2001-01-01/P1D') IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B10_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (millis_to_timestamp(c)<>'2000-01-01T00:00:00.000Z');
+-------------------------+
| col                     |
+-------------------------+
| 1970-01-01 00:00:00.001 |
| 1970-01-01 00:00:00.001 |
| 1970-01-01 00:00:00.001 |
| 1970-01-01 00:00:00.002 |
| 1970-01-01 00:00:00.002 |
| 1970-01-01 00:00:00.002 |
+-------------------------+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B10_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT millis_to_timestamp(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (millis_to_timestamp(s_int)<>'2000-01-01T00:00:00.000Z');
+-------------------------+
| col                     |
+-------------------------+
| 1970-01-01 00:00:00.001 |
| 1970-01-01 00:00:00.001 |
| 1970-01-01 00:00:00.001 |
| 1970-01-01 00:00:00.002 |
| 1970-01-01 00:00:00.002 |
| 1970-01-01 00:00:00.002 |
+-------------------------+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B11_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (timestamp_to_millis(c) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B11_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestamp_to_millis(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (timestamp_to_millis(s_int) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B12_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (extract(DAY
               FROM c) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B12_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT extract(DAY
               FROM s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (extract(DAY
               FROM s_int) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B13_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(c TO DAY) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (floor(c TO DAY) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B13_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT floor(s_int TO DAY) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (floor(s_int TO DAY) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B14_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(c TO DAY) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (ceil(c TO DAY) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B14_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ceil(s_int TO DAY) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (ceil(s_int TO DAY) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B15_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (timestampadd(DAY, 1, c) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B15_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampadd(DAY, 1, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (timestampadd(DAY, 1, s_int) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B16_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, c, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (timestampdiff(DAY, c, c) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B16_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (timestampdiff(DAY, s_int, c) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B16_C3_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (timestampdiff(DAY, c, s_int) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_datetime_funcs TEST_ID: A1_B16_C4_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT timestampdiff(DAY, s_int, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (timestampdiff(DAY, s_int, s_int) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_reduction_funcs TEST_ID: A1_B1_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(c, c, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (greatest(c, c, 1)<99999
       OR greatest(c, c, 1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_reduction_funcs TEST_ID: A1_B1_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT greatest(c, s_int, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (greatest(c, s_int, 1)<99999
       OR greatest(c, s_int, 1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|   2 |
|   2 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_reduction_funcs TEST_ID: A1_B2_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT least(c, c, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (least(c, c, 1)<99999
       OR least(c, c, 1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_reduction_funcs TEST_ID: A1_B2_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT least(c, s_int, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (least(c, s_int, 1)<99999
       OR least(c, s_int, 1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_ipaddr_funcs TEST_ID: A1_B1_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ip4_match(c, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (ip4_match(c, c) IS NOT NULL);
No match found
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_ipaddr_funcs TEST_ID: A1_B1_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ip4_match(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (ip4_match(c, s_int) IS TRUE);
No match found
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_ipaddr_funcs TEST_ID: A1_B2_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ip4_parse(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (ip4_parse(c) IS NOT NULL);
No match found
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_ipaddr_funcs TEST_ID: A1_B2_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ip4_parse(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (ip4_parse(s_int) IS NOT NULL);
No match found
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_ipaddr_funcs TEST_ID: A1_B3_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ip4_stringify(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (ip4_stringify(c) IS NOT NULL);
No match found
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_ipaddr_funcs TEST_ID: A1_B3_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT ip4_stringify(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (ip4_stringify(s_int) IS NOT NULL);
No match found
!error

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B1_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(c AS char) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (cast(c AS char)<99999
       OR cast(c AS char) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B1_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(s_int AS char) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (cast(s_int AS char)<99999
       OR cast(s_int AS char) IS NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B2_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE c
            WHEN 1 THEN 6
            ELSE 7
        END) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((CASE c
            WHEN 1 THEN 6
            ELSE 7
        END)<99999
       OR (CASE c
               WHEN 1 THEN 6
               ELSE 7
           END) IS NULL);
+-----+
| col |
+-----+
|   6 |
|   6 |
|   6 |
|   7 |
|   7 |
|   7 |
|   7 |
|   7 |
|   7 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B2_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE s_int
            WHEN 1 THEN 8
            ELSE 9
        END) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((CASE s_int
            WHEN 1 THEN 8
            ELSE 9
        END)<99999
       OR (CASE s_int
               WHEN 1 THEN 8
               ELSE 9
           END) IS NULL);
+-----+
| col |
+-----+
|   8 |
|   8 |
|   8 |
|   9 |
|   9 |
|   9 |
|   9 |
|   9 |
|   9 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B3_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN c=1 THEN 6
            ELSE 7
        END) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((CASE
            WHEN c=1 THEN 6
            ELSE 7
        END)<99999
       OR (CASE
               WHEN c=1 THEN 6
               ELSE 7
           END) IS NULL);
+-----+
| col |
+-----+
|   6 |
|   6 |
|   6 |
|   7 |
|   7 |
|   7 |
|   7 |
|   7 |
|   7 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B3_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT (CASE
            WHEN s_int=1 THEN 8
            ELSE 9
        END) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND ((CASE
            WHEN s_int=1 THEN 8
            ELSE 9
        END)<99999
       OR (CASE
               WHEN s_int=1 THEN 8
               ELSE 9
           END) IS NULL);
+-----+
| col |
+-----+
|   8 |
|   8 |
|   8 |
|   9 |
|   9 |
|   9 |
|   9 |
|   9 |
|   9 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B4_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(c, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (nullif(c, c)<99999
       OR nullif(c, c) IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B4_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (nullif(c, s_int)<99999
       OR nullif(c, s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B4_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (nullif(s_int, c)<99999
       OR nullif(s_int, c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   2 |
|   2 |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B4_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nullif(s_int, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (nullif(s_int, s_int)<99999
       OR nullif(s_int, s_int) IS NULL);
+-----+
| col |
+-----+
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B5_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(c, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (coalesce(c, c)<99999
       OR coalesce(c, c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B5_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (coalesce(c, s_int)<99999
       OR coalesce(c, s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|   2 |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B5_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (coalesce(s_int, c)<99999
       OR coalesce(s_int, c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|   2 |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B5_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT coalesce(s_int, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (coalesce(s_int, s_int)<99999
       OR coalesce(s_int, s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B6_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(c, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (nvl(c, c)<99999
       OR nvl(c, c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B6_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (nvl(c, s_int)<99999
       OR nvl(c, s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|   2 |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B6_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (nvl(s_int, c)<99999
       OR nvl(s_int, c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|   2 |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_scalar_other_funcs TEST_ID: A1_B6_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT nvl(s_int, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (nvl(s_int, s_int)<99999
       OR nvl(s_int, s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# Total query count 261 Positive tests: 227 Negative tests: 34
#-------------------------------------------------------------------------
