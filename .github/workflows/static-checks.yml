# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Static Checks CI"
on:
  push:
    branches:
      - master
      - '[0-9]+.[0-9]+.[0-9]+' # release branches
      - '[0-9]+.[0-9]+.[0-9]+-[A-Za-z0-9]+' # release branches
  pull_request:
    branches:
      - master
      - '[0-9]+.[0-9]+.[0-9]+' # release branches
      - '[0-9]+.[0-9]+.[0-9]+-[A-Za-z0-9]+' # release branches

#concurrency:
#  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.run_id }}' # group workflows only on pull_requests and not on branch commits
#  cancel-in-progress: true

env:
  MVN: mvn -B
  MAVEN_SKIP: -P skip-static-checks -Dweb.console.skip=true -Dmaven.javadoc.skip=true
  MAVEN_SKIP_TESTS: -P skip-tests
  MAVEN_OPTS: -Xmx8g
  MYSQL_DRIVER_CLASSNAME: com.mysql.jdbc.Driver # Used to set druid config in docker image for revised ITs
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 5
  BACKWARD_COMPATIBILITY_IT_ENABLED: false
  DRUID_PREVIOUS_VERSION: 30.0.0
  DRUID_PREVIOUS_VERSION_DOWNLOAD_URL: https://dlcdn.apache.org/druid/30.0.0/apache-druid-30.0.0-bin.tar.gz
  DRUID_PREVIOUS_IT_IMAGE_NAME: org.apache.druid.integration-tests/test:30.0.0


jobs:
  static-checks:
    strategy:
      fail-fast: false
      matrix:
        java: [ '8']
    runs-on: ubuntu-latest
    steps:
      - name: checkout branch
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java }}
          cache: 'maven'

      - name: packaging check
        if: false
        run: |
          ./.github/scripts/setup_generate_license.sh
          ${MVN} clean install -Prat --fail-at-end \
          -pl '!benchmarks, !distribution' ${MAVEN_SKIP} ${MAVEN_SKIP_TESTS} -Dweb.console.skip=false -T1C
          ${MVN} install -Prat -Pdist -Pbundle-contrib-exts --fail-at-end \
          -pl 'distribution' ${MAVEN_SKIP} ${MAVEN_SKIP_TESTS} -Dweb.console.skip=false -T1C

      - name: script checks
        # who watches the watchers?
        if: false #${{ matrix.java == '8' }}
        run: ./check_test_suite_test.py

      - name: (openjdk17) strict compilation
        if: ${{ matrix.java == '17' }}
        # errorprone requires JDK 11+
        # Strict compilation requires more than 2 GB
        run: ${MVN} clean -DstrictCompile compile test-compile --fail-at-end ${MAVEN_SKIP} ${MAVEN_SKIP_TESTS}

      - name: maven install
        if: ${{ matrix.java == '8' }}
        run: |
          echo 'Running Maven install...' &&
          ${MVN} clean install -q -ff -pl '!distribution' ${MAVEN_SKIP} ${MAVEN_SKIP_TESTS} -T1C &&
          ${MVN} install -q -ff -pl 'distribution' ${MAVEN_SKIP} ${MAVEN_SKIP_TESTS}

      - name: checkstyle
        if: false #${{ matrix.java == '8' }}
        run: ${MVN} checkstyle:checkstyle --fail-at-end

      - name: license checks
        if: false #${{ matrix.java == '8' }}
        run: ./.github/scripts/license_checks_script.sh

      - name: analyze dependencies
        if: false #${{ matrix.java == '8' }}
        run: |
          ./.github/scripts/analyze_dependencies_script.sh

      - name: animal sniffer checks
        if:  false #${{ matrix.java == '8' }}
        run: ${MVN} animal-sniffer:check --fail-at-end

      - name: enforcer checks
        if:  false #${{ matrix.java == '8' }}
        run: ${MVN} enforcer:enforce --fail-at-end

      - name: forbidden api checks
        if:  false #${{ matrix.java == '8' }}
        run: ${MVN} forbiddenapis:check forbiddenapis:testCheck --fail-at-end

      - name: pmd checks
        if:  false #${{ matrix.java == '8' }}
        run: ${MVN} pmd:check --fail-at-end  # TODO: consider adding pmd:cpd-check

      - name: spotbugs checks
        if:  false #${{ matrix.java == '8' }}
        run: ${MVN} spotbugs:check --fail-at-end -pl '!benchmarks'

  intellij-inspections:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: checkout branch
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '8'
          cache: 'maven'

      - name: maven install
        run: |
          echo 'Running Maven install...' &&
          ${MVN} clean install -q -ff -pl '!distribution' ${MAVEN_SKIP} ${MAVEN_SKIP_TESTS} -T1C &&
          ${MVN} install -q -ff -pl 'distribution' ${MAVEN_SKIP} ${MAVEN_SKIP_TESTS}

      - name: intellij inspections
        run: |
          docker run --rm \
          -v $(pwd):/project \
          -v ~/.m2:/home/inspect/.m2 \
          -v $(pwd)/.idea/misc-for-inspection.xml:/project/.idea/misc.xml \
          ccaominh/intellij-inspect:1.0.0 \
          /project/pom.xml \
          /project/.idea/inspectionProfiles/Druid.xml \
          --levels ERROR \
          --scope JavaInspectionsScope

  openrewrite:
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: checkout branch
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '8'
          cache: 'maven'

      - name: maven install
        run: |
          echo 'Running Maven install...' &&
          ${MVN} clean install -q -ff -pl '!distribution' ${MAVEN_SKIP} ${MAVEN_SKIP_TESTS} -T1C &&
          ${MVN} install -q -ff -pl 'distribution' ${MAVEN_SKIP} ${MAVEN_SKIP_TESTS}

      - name: rewrite:dryRun
        id: rewrite-dryRun
        run: |
          ${MVN} rewrite:dryRun ${MAVEN_SKIP}

      - name: Upload open rewrite patch
        if: ${{ failure() && steps.rewrite-dryRun.conclusion == 'failure' }}
        uses: actions/upload-artifact@master
        with:
          name: Rewrite patch
          path: ./target/rewrite/rewrite.patch

  web-checks:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: checkout branch
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'maven'

      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16.17.0

      - name: docs
        run: |
          (cd website && npm install)
          cd website
          npm run build
          npm run link-lint
          npm run spellcheck

      - name: web console
        run: |
          ${MVN} test -pl 'web-console'
          cd web-console
          { for i in 1 2 3; do npm run codecov && break || sleep 15; done }

      - name: web console end-to-end test
        id: web-console-test
        run: |
          ./.github/scripts/setup_generate_license.sh
          web-console/script/druid build
          web-console/script/druid start
          (cd web-console && npm run test-e2e)
          web-console/script/druid stop

      - name: Tar druid logs
        if: ${{ failure() && steps.web-console-test.conclusion == 'failure' }}
        run: tar cvzf ./druid-logs.tgz -C ./distribution/target/apache-druid-*-SNAPSHOT/ log

      - name: Upload druid logs to GitHub
        if: ${{ failure() && steps.web-console-test.conclusion == 'failure' }}
        uses: actions/upload-artifact@master
        with:
          name: Druid logs web-checks
          path: druid-logs.tgz


  build:
    name: "build (jdk${{ matrix.jdk }})"
    strategy:
      fail-fast: false
      matrix:
        jdk: [ '8' ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      # skip the "cache: maven" step from setup-java. We explicitly use a
      # different cache key since we cannot reuse it across commits.
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.jdk }}

      # the build step produces SNAPSHOT artifacts into the local maven repository,
      # we include github.sha in the cache key to make it specific to that build/jdk
      - name: Cache Maven m2 repository
        id: maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ matrix.jdk }}-${{ github.sha }}
          restore-keys: setup-java-Linux-maven-${{ hashFiles('**/pom.xml') }}

      - name: Cache targets
        id: target
        uses: actions/cache@v4
        with:
          path: |
            ./**/target
          key: maven-${{ runner.os }}-${{ matrix.jdk }}-targets-${{ github.sha }}

      - name: Cache image
        id: docker_container
        uses: actions/cache@v4
        with:
          key: druid-container-jdk${{ matrix.jdk }}.tar.gz-${{ github.sha }}
          path: |
            ./druid-container-jdk${{ matrix.jdk }}.tar.gz
            ./integration-tests-ex/image/target/env.sh

      - name: Maven build
        id: maven_build
        run: |
          ./it.sh ci

      - name: Container build
        run: |
          ./it.sh image
          source ./integration-tests-ex/image/target/env.sh
          docker tag $DRUID_IT_IMAGE_NAME $DRUID_IT_IMAGE_NAME-jdk${{ matrix.jdk }}

      - name: Save docker container to archive
        run: |
          source ./integration-tests-ex/image/target/env.sh
          echo $DRUID_IT_IMAGE_NAME
          docker save "$DRUID_IT_IMAGE_NAME" | gzip > druid-container-jdk${{ matrix.jdk }}.tar.gz

      - name: Save old version docker image
        if: ${{ env.BACKWARD_COMPATIBILITY_IT_ENABLED == "true" }}
        run: |
          docker tag $DRUID_PREVIOUS_IT_IMAGE_NAME $DRUID_PREVIOUS_IT_IMAGE_NAME-jdk${{ inputs.build_jdk }}-version${{ inputs.DRUID_PREVIOUS_VERSION }}
          echo $DRUID_PREVIOUS_IT_IMAGE_NAME
          docker save "$DRUID_PREVIOUS_IT_IMAGE_NAME" | gzip > druid-container-jdk${{ inputs.build_jdk }}-version${{ inputs.DRUID_PREVIOUS_VERSION }}.tar.gz

  #  unit-tests-phase2:
  #    strategy:
  #      fail-fast: false
  #      matrix:
  #        jdk: [ 11, 17, 21 ]
  #    name: "unit tests (jdk${{ matrix.jdk }}, sql-compat=true)"
  #    uses: ./.github/workflows/unit-tests.yml
  #    needs: unit-tests
  #    if: false #${{ always() && (needs.unit-tests.result == 'success' || needs.unit-tests.outputs.continue_tests) }}
  #    with:
  #      jdk: ${{ matrix.jdk }}
  #      sql_compatibility: true
  #
  #  unit-tests:
  #    if: false
  #    strategy:
  #      fail-fast: false
  #      matrix:
  #        sql_compatibility: [ false, true ]
  #    name: "unit tests (jdk8, sql-compat=${{ matrix.sql_compatibility }})"
  #    uses: ./.github/workflows/unit-tests.yml
  #    needs: build
  #    with:
  #      jdk: 8
  #      sql_compatibility: ${{ matrix.sql_compatibility }}
  #
  #  standard-its:
  #    needs: unit-tests
  #    if: false #${{ always() && (needs.unit-tests.result == 'success' || needs.unit-tests.outputs.continue_tests) }}
  #    uses: ./.github/workflows/standard-its.yml
  #
  #
  revised-its:
    needs: build
    if: true #${{ always() && (needs.unit-tests.result == 'success' || needs.unit-tests.outputs.continue_tests) }}
    uses: ./.github/workflows/revised-its.yml
    with:
      BACKWARD_COMPATIBILITY_IT_ENABLED: ${{ env.BACKWARD_COMPATIBILITY_IT_ENABLED }}
      DRUID_PREVIOUS_VERSION: ${{ env.DRUID_PREVIOUS_VERSION }}
      DRUID_PREVIOUS_VERSION_DOWNLOAD_URL: ${{ env.DRUID_PREVIOUS_VERSION_DOWNLOAD_URL }}
      DRUID_PREVIOUS_IT_IMAGE_NAME: ${{ env.DRUID_PREVIOUS_IT_IMAGE_NAME }}
