/*
 * Copyright (c) Imply Data, Inc. All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of Imply Data, Inc. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with Imply.
 */

package org.apache.druid.java.util.common.granularity;

import com.google.common.collect.Sets;
import org.apache.druid.java.util.common.guava.Comparators;
import org.joda.time.Interval;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;

/**
 * Produce a stream of intervals generated by a given set of intervals as input and a given
 * granularity. This class avoids materializing the granularity intervals whenever possible.
 */
public class IntervalsByGranularity
{
  final List<Interval> sortedIntervals;
  final Granularity granularity;

  public IntervalsByGranularity(Collection<Interval> intervals, Granularity granularity)
  {
    // eliminate dups & sort intervals:
    HashSet<Interval> intervalSet = Sets.newHashSetWithExpectedSize(intervals.size());
    intervalSet.addAll(intervals);
    this.sortedIntervals = new ArrayList<>(intervals.size());
    this.sortedIntervals.addAll(intervalSet);
    this.sortedIntervals.sort(Comparators.intervalsByStartThenEnd());

    this.granularity = granularity;
  }

  public Iterator<Interval> granularityIntervalsIterator()
  {
    IntervalIterator ite = new IntervalIterator(sortedIntervals);
    return ite;
  }

  private class IntervalIterator implements Iterator<Interval>
  {
    final private List<Interval> sortedIntervals;
    private int currentInterval;
    private Iterator<Interval> currentIterator;

    public IntervalIterator(List<Interval> sortedIntervals)
    {
      this.sortedIntervals = sortedIntervals;
      this.currentInterval = 0;
      currentIterator = granularity.getIterable(sortedIntervals.get(currentInterval)).iterator();
    }

    @Override
    public boolean hasNext()
    {
      while (true) {
        if (currentIterator != null) {
          if (currentIterator.hasNext()) {
            return true;
          } else if (currentInterval < sortedIntervals.size() - 1) {
            currentIterator = granularity.getIterable(sortedIntervals.get(++currentInterval)).iterator();
            continue;
          } else {
            break;
          }
        }
      }
      return false;
    }

    @Override
    public Interval next()
    {
      if (!hasNext()) {
        throw new NoSuchElementException("There are no more intervals");
      }
      return currentIterator.next();
    }

    @Override
    public void remove()
    {
      throw new UnsupportedOperationException();
    }
  }

}
