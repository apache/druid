/*
 * Licensed to Metamarkets Group Inc. (Metamarkets) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. Metamarkets licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package io.druid.segment;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.Function;
import com.metamx.common.io.smoosh.FileSmoosher;
import io.druid.query.dimension.DimensionSpec;
import io.druid.segment.column.Column;
import io.druid.segment.column.ColumnCapabilities;
import io.druid.segment.data.IOPeon;

import java.io.File;
import java.util.Comparator;

/**
 * Processing related interface
 *
 * A DimensionHandler is an object that encapsulates indexing, column merging/building, and querying operations
 * for a given dimension type (e.g., dict-encoded String, Long).
 *
 * These operations are handled by sub-objects created through a DimensionHandler's methods:
 *   DimensionIndexer, DimensionMerger, and DimensionColumnReader, respectively.
 *
 * Each DimensionHandler object is associated with a single dimension.
 *
 * This interface allows type-specific behavior column logic, such as choice of indexing structures and disk formats.
 * to be contained within a type-specific set of handler objects, simplifying processing classes
 * such as IncrementalIndex and IndexMerger and allowing for abstracted development of additional dimension types.
 *
 * A dimension may have two representations, an encoded representation and a full representation.
 * For example, a value for a String dimension has an integer dictionary encoding, and an actual String representation.
 *
 * @param <EncodedType> class of the encoded values
 * @param <ActualType> class of the actual values
 */
public interface DimensionHandler<EncodedType extends Comparable<EncodedType>, ActualType extends Comparable<ActualType>>
{
  /**
   * Creates a new DimensionIndexer, a per-dimension object responsible for processing ingested rows in-memory, used by the
   * IncrementalIndex. See {@link DimensionIndexer} interface for more information.
   *
   * @param lock An object to synchronize on. The IncrementalIndex will pass in its dimensionsDescs
   *             Map object, which stores descriptors for each dimension.
   *
   * @return A new DimensionIndexer object that synchronizes on the provided lock.
   */
  public DimensionIndexer makeIndexer(Object lock);


  /**
   * Creates a new DimensionMerger, a per-dimension object responsible for merging indexes/row data across segments
   * and building the on-disk representation of a dimension.
   *
   * See {@link DimensionMerger} interface for more information.
   *
   * @param indexSpec     Specification object for the index merge
   * @param outDir        Location to store files generated by the merging process
   * @param ioPeon        ioPeon object passed in by IndexMerger, manages files created by the merging process
   * @param v9Smoosher    FileSmoosher used for combining files created by the merging process.
   * @param mapper        Object mapper used for JSON serde
   * @param capabilities  The ColumnCapabilities of the dimension represented by this DimensionHandler
   * @param progress      ProgressIndicator used by the merging process

   * @return A new DimensionMerger object.
   */
  public DimensionMerger makeMerger(
      IndexSpec indexSpec,
      File outDir,
      IOPeon ioPeon,
      FileSmoosher v9Smoosher,
      ObjectMapper mapper,
      ColumnCapabilities capabilities,
      ProgressIndicator progress
  );


  /**
   * Creates a new DimensionColumnReader, a per-dimension object responsible for reading data from an on-disk column.
   * Used by QueryableIndex and associated wrapper classes.
   *
   * See {@link DimensionColumnReader} interface for more information.
   *
   * @param column The Column object associated with this DimensionHandler's dimension.

   * @return A new DimensionColumnReader object.
   */
  public DimensionColumnReader makeColumnReader(Column column);


  /**
   * Creates a DimensionSelector of a type suitable for reading values from this dimension, used for querying and filtering.
   *
   * @param cursor        Cursor object created by a StorageAdapter.
   * @param dimSpec       Specifies extraction function and output name for a dimension.
   * @param capabilities  The capabilities associated with this handler's dimension.
   *
   * @return A new DimensionSelector object linked with the provided cursor and dimSpec
   */
  public DimensionSelector getDimensionSelector(ColumnSelectorFactory cursor, DimensionSpec dimSpec, ColumnCapabilities capabilities);


  /**
   * Returns a function that attempts to convert Object values to this dimension's type.
   * Needed because the types of arriving row values may not always match this dimension's type during ingestion.
   *
   * If no transformation was performed, the transformation function must return the input object.
   *
   * @return A value transformation function.
   */
  public Function<Object, ActualType> getValueTypeTransformer();


  /**
   * Returns a Comparator suitable for comparing values of EncodedType
   *
   * @return An EncodedType Comparator.
   */
  public Comparator<EncodedType> getEncodedComparator();


  /**
   * Returns a Comparator suitable for comparing values of ActualType
   *
   * @return An ActualType Comparator.
   */
  public Comparator<ActualType> getActualComparator();


  /**
   * Convert a value of this dimension's EncodedType to a byte array representation.
   *
   * @param rowVal value to convert
   *
   * @return Converted byte array
   */
  public byte[] getBytesFromRowValue(EncodedType rowVal);


  /**
   * Convert a byte array representation to this dimension's EncodedType.
   *
   * @param bytes the byte array to convert
   *
   * @return Converted value
   */
  public EncodedType getRowValueFromBytes(byte[] bytes);


  /**
   * Get the size of this dimension's EncodedType values
   **
   * @return The size in bytes of a single encoded value.
   */
  public int getEncodedValueSize();
}
