{{/*

 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

*/}}

{{- if .Values.historicalmiddle.enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: {{ template "druid.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: {{ .Values.historicalmiddle.name }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  name: {{ template "druid.historicalmiddle.fullname" . }}
spec:
  serviceName: {{ template "druid.historicalmiddle.fullname" . }}
  replicas: {{ .Values.historicalmiddle.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "druid.name" . }}
      release: {{ .Release.Name }}
      component: {{ .Values.historicalmiddle.name }}
  template:
    metadata:
      labels:
        app: {{ template "druid.name" . }}
        component: {{ .Values.historicalmiddle.name }}
        release: {{ .Release.Name }}
      annotations:
        druid.k8s.enablePatching: "true"
        {{- with .Values.historicalmiddle.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.prometheus.enabled }}
          {{- with .Values.prometheus.annotation }}
            {{- toYaml . | nindent 8 }}
          {{- end }}
        {{- end }}
    spec:
      {{- if or .Values.historicalmiddle.antiAffinity .Values.historicalmiddle.nodeAffinity }}
      affinity:
      {{- end }}
      {{- if eq .Values.historicalmiddle.antiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: "{{ template "druid.name" . }}"
                  release: "{{ .Release.Name }}"
                  component: "{{ .Values.historicalmiddle.name }}"
      {{- else if eq .Values.historicalmiddle.antiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: "{{ template "druid.name" . }}"
                  release: "{{ .Release.Name }}"
                  component: "{{ .Values.historicalmiddle.name }}"
      {{- end }}
      {{- with .Values.historicalmiddle.nodeAffinity }}
        nodeAffinity:
{{ toYaml . | indent 10 }}
      {{- end }}
{{- if .Values.historicalmiddle.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.historicalmiddle.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.historicalmiddle.securityContext }}
      securityContext:
{{ toYaml .Values.historicalmiddle.securityContext | indent 8 }}
{{- end }}
  {{ if .Values.tolerations }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
  {{- end }}
  {{ else }}
    {{- with .Values.historicalmiddle.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
  {{- end }}
    {{- end }}
{{- if .Values.image.pullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.image.pullSecrets | indent 8 }}
{{- end }}
      {{- if .Values.historicalmiddle.serviceAccount.create }}
      serviceAccountName: {{ include "druid.historicalmiddle.serviceAccountName" . }}
      {{- end }}
      containers:
      - name: druid
        args: [ "historical" ]
        env:
        - name: POD_NAME
          valueFrom:  {fieldRef: {fieldPath: metadata.name}}
        - name: POD_NAMESPACE
          valueFrom: {fieldRef: {fieldPath: metadata.namespace}}
        {{- range $key, $val := .Values.historicalmiddle.config }}
        - name: {{ $key }}
          value: {{ $val | quote }}
        {{- end}}
        envFrom:
          - configMapRef:
              name: {{ template "druid.name" . }}
        resources:
{{ toYaml .Values.historicalmiddle.resources | indent 12 }}
        livenessProbe:
          initialDelaySeconds: {{ .Values.historicalmiddle.livenessProbeInitialDelaySeconds }}
          httpGet:
            path: /status/health
            port: {{ .Values.historicalmiddle.port }}
        readinessProbe:
          initialDelaySeconds: {{ .Values.historicalmiddle.readinessProbeInitialDelaySeconds }}
          httpGet:
            path: /status/health
            port: {{ .Values.historicalmiddle.port }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        ports:
        - containerPort: {{ .Values.historicalmiddle.port }}
          name: http
        {{- if .Values.prometheus.enabled }}
        - name: prometheus
          containerPort: {{ .Values.prometheus.port }}
          protocol: TCP
        {{- end }}
        volumeMounts:
        - mountPath: /opt/druid/var/druid/
          name: data
  {{- if .Values.gCloudStorage.enabled }}
        - name: google-cloud-key
          mountPath: /var/secrets/google
  {{- end }}
      volumes:
  {{- if not .Values.historicalmiddle.persistence.enabled }}
      - name: data
        emptyDir: {}
  {{- end }}
  {{- if .Values.gCloudStorage.enabled }}
      - name: google-cloud-key
        secret:
          secretName: {{ .Values.gCloudStorage.secretName }}
  {{- end }}
  updateStrategy:
    type: {{ .Values.historicalmiddle.updateStrategy.type }}
  {{- if .Values.historicalmiddle.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
        - {{ .Values.historicalmiddle.persistence.accessMode | quote }}
    {{- if .Values.historicalmiddle.persistence.storageClass }}
    {{- if (eq "-" .Values.historicalmiddle.persistence.storageClass) }}
      storageClassName: ""
    {{- else }}
      storageClassName: "{{ .Values.historicalmiddle.persistence.storageClass }}"
    {{- end }}
    {{- end }}
      resources:
        requests:
          storage: "{{ .Values.historicalmiddle.persistence.size }}"
  {{- end }}
{{- end }}
